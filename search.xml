<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android-View.Post</title>
      <link href="2021/08/28/Android-View-Post/"/>
      <url>2021/08/28/Android-View-Post/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍Android中的协程</p><a id="more"></a><h1 id="View-Post"><a href="#View-Post" class="headerlink" title="View.Post"></a>View.Post</h1><blockquote><p>Android源码剖析</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.post&#123;</span><br><span class="line">    notifyAnimState(listener,ANIM_STATE_END)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>众所周知，在子线程中是不能进行UI操作的，那么想要在子线程中进行UI操作，或者在很多场景下，一些操作想要延迟处理，该怎么办呢。答案就是都可以使用Handler来解决，但是说实话写Handler还是有点麻烦，还得注意内存泄漏问题。所以就可以使用<code>View.post()</code>或者<code>View.postDelay()</code>来替代Handler</p><p>但是用归用，难道就不好奇<code>View.post</code>为什么可以在子线程中操作UI，为什么可以解决在<code>Activity</code>的<code>OnCreate()</code>里调用<code>View.post()</code>来解决获取View高宽为0的问题。所以接下来将通过查看源码来解答以上两个问题</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="View"><a href="#View" class="headerlink" title="View#"></a>View#</h4><blockquote><p>以下所有代码都处于View中</p></blockquote><h5 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">    <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Postpone the runnable until we know on which thread it needs to run.</span></span><br><span class="line">    <span class="comment">// Assume that the runnable will be successfully placed after attach.</span></span><br><span class="line">    getRunQueue().post(action);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面不是好奇为什么<code>View.post()</code>可以在子线程中操作UI吗，其实跟我们想的差不多，<code>post</code>内部也是使用<code>Handler</code>来实现的。那么我们继续看看Android是怎么封装的</p><p>post里的代码还是蛮少的，我们慢慢来分析：</p><ol><li><p>首先将成员变量<code>mAttachInfo</code>赋值给<code>attachInfo</code>，再判断<code>attachInfo</code>是否为空(也就是判断<code>mAttachInfo</code>是否为空)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果<code>attachInfo</code>不为空的话，那么就直接调用<code>Handler.post()</code>将<code>Runnable</code>传进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">      <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>Runnable</code>就是个接口，实现了<code>Runnable</code>接口的类，称为 <strong>线程辅助类</strong>；<code>Thread</code>类才是真正的线程类，也就是最终还是想要通过<code>Thread</code>来创建线程并把<strong>线程辅助类</strong>传入进去</p></blockquote><ol start="3"><li><p>如果<code>attachInfo</code>为空的话，则执行从队列中获取一个值来执行<code>Post</code>。这里我们先不管这个队列中存储的是什么，是个什么队列，先继续往下看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">      getRunQueue().post(action);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>最终返回True，表示执行完成</p></li></ol><p><code>View.post()</code>里的代码已经看完了，但是又多出了几个新问题，也就是<code>mAttachInfo</code>到底是在哪里创建的，需要什么条件。<code>getRunQueue</code>又是啥，那么也就只能继续往下深入了</p><h5 id="mAttachInfo"><a href="#mAttachInfo" class="headerlink" title="mAttachInfo"></a>mAttachInfo</h5><p>我们直接在<code>Android Studio</code>使用<code>Ctrl + F</code>来进行查找，在搜索的时候可以使用点小技巧，搜索<code>mAttachInfo =</code> (等号前后都有空格)。这样就可以直接查到两处赋值操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchAttachedToWindow</span><span class="params">(AttachInfo info, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">        mAttachInfo = info;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">     mAttachInfo = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这两处分别对应了赋值和置空，刚好是在对应的一个生命周期内。接下来就继续了解<code>dispatchAttachedToWindow</code>和<code>dispatchDetachedFromWindow</code>分别在什么时候在哪里被调用了</p><p>好吧😛，其实可以先不用管它们两个在什么时候被调用了，至少在现在看来，在<code>Activity.onCreate()</code>的时候<code>dispatchAttachedToWindow</code>还是没有被调用的。但是我们在<code>onCreate()</code>里执行<strong>View.post</strong>里的操作仍然可以保证是在<code>View</code>的高宽计算完毕的，为什么呢？那么原因只可能在另一个<code>return</code>里了<code>getRunQueue.post</code></p><h5 id="getRunQueue"><a href="#getRunQueue" class="headerlink" title="getRunQueue"></a>getRunQueue</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HandlerActionQueue <span class="title">getRunQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRunQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRunQueue = <span class="keyword">new</span> HandlerActionQueue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mRunQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>getRunQueue</code>就是返回<code>HandlerActionQueue</code>，外部确实就是调用<code>HandlerActionQueue.post</code>，继续深入</p><h4 id="HandlerActionQueue"><a href="#HandlerActionQueue" class="headerlink" title="HandlerActionQueue#"></a>HandlerActionQueue#</h4><blockquote><p>以下所有代码都处于HandlerActionQueue中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerActionQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HandlerAction[] mActions; <span class="comment">// 这里创建了一个HandlerAction数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCount; <span class="comment">// 还有一个计数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">        postDelayed(action, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDelayed</span><span class="params">(Runnable action, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HandlerAction handlerAction = <span class="keyword">new</span> HandlerAction(action, delayMillis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;<span class="comment">// 加锁，同步进行</span></span><br><span class="line">            <span class="keyword">if</span> (mActions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mActions = <span class="keyword">new</span> HandlerAction[<span class="number">4</span>];<span class="comment">// 如果为空，则创建默认大小为4的数组</span></span><br><span class="line">            &#125;</span><br><span class="line">            mActions = GrowingArrayUtils.append(mActions, mCount, handlerAction);</span><br><span class="line">            mCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GrowingArrayUtils：从名字就可以看出来，是一个可以自动扩展的Array工具类</p></blockquote><p><code>HandlerActionQueue.post</code>内部则是调用了<code>postDelayed()</code>，<code>postDelayed()</code>内部则是将<code>Runnable</code>和<code>long</code>作为参数创建一个<code>HandlerAction</code>，之后再添加到<code>mActions</code>数组中去，那就顺便看一下<code>HandlerAction</code></p><h5 id="HandlerAction"><a href="#HandlerAction" class="headerlink" title="HandlerAction"></a>HandlerAction</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Runnable action;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> delay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerAction</span><span class="params">(Runnable action, <span class="keyword">long</span> delay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">        <span class="keyword">this</span>.delay = delay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Runnable otherAction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> otherAction == <span class="keyword">null</span> &amp;&amp; action == <span class="keyword">null</span></span><br><span class="line">                || action != <span class="keyword">null</span> &amp;&amp; action.equals(otherAction);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>蛮简单的一个类，主要作用就是把<code>View.post</code>传入的<code>Runnable</code>保存起来，如果是<code>postDelay()</code>，那就也把延迟时间用<code>delay</code>保存起来</p><p>现在我们回到上层，梳理一下。我们一开始调用的<code>View.post</code>传入的<code>Runnable</code>，在传到<code>HandlerActionQueue</code>里会包装成<code>HanlderAction</code>，然后再缓存起来。再<code>HanlderActionQueue</code>内部创建了个默认大小为4的<code>HanlderAction</code>数组，当数组不够用的时候，就会通过<code>GrowingArrayUtils.append()</code>来进行扩展。</p><h5 id="总结大概流程："><a href="#总结大概流程：" class="headerlink" title="总结大概流程："></a>总结大概流程：</h5><p><code>Activity.onCreate</code> –&gt; 调用<code>View.post()</code> –&gt; 还没进行<code>dispatchAttachedToWindow</code>  –&gt; <code>HandlerActionQueue</code>保存到数组中</p><p>那么什么时候这些存储起来的<code>Runnable</code>来会被执行呢，这又得回到<code>HandlerActionQueue</code>这里了</p><h5 id="executeActions"><a href="#executeActions" class="headerlink" title="executeActions"></a>executeActions</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeActions</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> HandlerAction[] actions = mActions;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = mCount; i &lt; count; i++) &#123; <span class="comment">// 全部遍历出来，然后加到Handler里面去</span></span><br><span class="line">            <span class="keyword">final</span> HandlerAction handlerAction = actions[i];</span><br><span class="line">            handler.postDelayed(handlerAction.action, handlerAction.delay);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mActions = <span class="keyword">null</span>;</span><br><span class="line">        mCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>HandlerActionQueue</code>里面，有一个<code>executeActions</code>的这么一个方法，就是用来处理<code>HandlerAction</code>的。还要一个主要的地方就是这些被缓存的<code>Runnable</code>也都是被<strong>Handler</strong>处理的，那么这个<strong>Hanlder</strong>是哪里来的呢</p><h4 id="View-1"><a href="#View-1" class="headerlink" title="View#"></a>View#</h4><blockquote><p>以下所有代码都处于View中</p></blockquote><h5 id="dispatchAttachedToWindow"><a href="#dispatchAttachedToWindow" class="headerlink" title="dispatchAttachedToWindow"></a>dispatchAttachedToWindow</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchAttachedToWindow</span><span class="params">(AttachInfo info, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Transfer all pending runnables.</span></span><br><span class="line">       <span class="keyword">if</span> (mRunQueue != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mRunQueue.executeActions(info.mHandler);</span><br><span class="line">           mRunQueue = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中很清晰的就可以看到，只要<code>mRunQueue</code>不为空，在执行<code>dispatchAttachedToWindow</code>的时候就会去运行</p><h5 id="再次总结大概流程🎉："><a href="#再次总结大概流程🎉：" class="headerlink" title="再次总结大概流程🎉："></a>再次总结大概流程🎉：</h5><p><code>Activity.onCreate</code> –&gt; 调用<code>View.post()</code> –&gt; 还没进行<code>dispatchAttachedToWindow</code>  –&gt; 使用<code>HandlerActionQueue</code>将<code>Runnable</code>保存到数组中 –&gt; <code>View.dispatchAttachedToWindow</code>被执行 –&gt; <code>mRunQueue</code>不为空 –&gt; <code>mRunQueue.executeActions()</code>运行被储存的<code>Runnable</code> —&gt;由于<code>View.dispatchAttachedToWindow</code>被执行，<code>mAttachInfo</code>不为空，则剩下的都交给<code>mAttachInfo.mHandler</code></p><p>图片流程：</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210730143624882.png" alt="image-20210730143624882"></p><p>到这里我们就可以回答一开始提的第二个问题，为什么可以解决在<code>Activity</code>的<code>OnCreate()</code>里调用<code>View.post()</code>来解决获取<code>View</code>高宽为0的问题。答案就是View先会将传入进来的<code>Runnable</code>都缓存起来，等到<code>dispatchAttachedToWindow</code>  执行，在先将缓存起来的<code>Runnable</code>遍历运行，之后的就正常交给<code>mAttachInfo.mHandler</code>。最后我们就只用搞清楚<code>mAttachInfo</code>是在哪里初始化的和什么时候会调用<code>dispatchAttachedToWindow</code> </p><p>通过查询，会在<code>ViewRootlmpl.performTraversals()</code>和<code>ViewGroup.addViewInner()</code>里被调用</p><h4 id="ViewGroup"><a href="#ViewGroup" class="headerlink" title="ViewGroup#"></a>ViewGroup#</h4><blockquote><p>以下所有代码都处于ViewGroup 中</p></blockquote><p>咱们先来看<code>ViewGroup</code>，在<code>ViewGroup</code>的<code>addViewInner()</code>方法内部会调用到<code>dispatchAttachedToWindow</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addViewInner</span><span class="params">(View child, <span class="keyword">int</span> index, LayoutParams params,<span class="keyword">boolean</span> preventRequestLayout)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    AttachInfo ai = mAttachInfo;</span><br><span class="line">   ...</span><br><span class="line">            child.dispatchAttachedToWindow(mAttachInfo, (mViewFlags&amp;VISIBILITY_MASK));</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>addViewInner()</code>是<code>ViewGroup</code>在添加<code>View</code>时内部的逻辑，也就是当<code>ViewGroup.addView()</code>的时候，如果<code>mAttachInfo</code>不为空，则会去调用子类的<code>dispatchAttachedToWindow()</code>，并将自身的<code>AttachInfo</code>传入过去。然后子<code>View</code>则会将传递过来的<code>mAttachInfo</code>赋值给自己的<code>AttachInfo</code></p><p>那么<code>ViewGroup</code>的<code>AttachInfo</code>是那来的呢，我们继续深入，最终找到的结果非常Amazed啊！。<code>ViewGroup</code>是继承<code>View</code>的，<code>ViewGroup</code>中的<code>AttachInfo</code>是直接使用<code>View</code>中<code>AttachInfo</code>，可以很牛，直接绕回来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>,<span class="title">AccessibilityEventSource</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    AttachInfo mAttachInfo;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ViewGroup</code>内部也有一个<code>dispatchAttachedToWindow</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispatchAttachedToWindow</span><span class="params">(AttachInfo info, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">super</span>.dispatchAttachedToWindow(info, visibility);</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">          <span class="keyword">final</span> View child = children[i];</span><br><span class="line">          child.dispatchAttachedToWindow(info,</span><br><span class="line">                  combineVisibility(visibility, child.getVisibility()));</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在该方法被调用时，会先调用父类的<code>dispatchAttachedToWindow</code>，也就是调用<code>View.dispatchAttachedToWindow</code>（<code>View</code>中的<code>AttachInfo</code>也是在这个时候被赋值的），接着遍历所有子类，调用子类的<code>dispatchAttachedToWindow</code>，并传入自身的<code>AttachInfo</code>。但是这样一来，我们就直接进入循环了… 所以我们还是去看看<code>ViewRootlmpl</code>，希望那里会有答案</p><h4 id="ViewRootlmpl"><a href="#ViewRootlmpl" class="headerlink" title="ViewRootlmpl#"></a>ViewRootlmpl#</h4><blockquote><p>以下所有代码都处于ViewRootlmpl中</p></blockquote><h5 id="performTraversals"><a href="#performTraversals" class="headerlink" title="performTraversals()"></a>performTraversals()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">final</span> View host = mView; <span class="comment">//这里的View是Activity中的DecorView</span></span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">if</span> (mFirst) &#123;</span><br><span class="line"> ...</span><br><span class="line"> host.dispatchAttachedToWindow(mAttachInfo, <span class="number">0</span>);</span><br><span class="line"> mAttachInfo.mTreeObserver.dispatchOnWindowAttachedChange(<span class="keyword">true</span>);</span><br><span class="line"> dispatchApplyInsets(host);</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line"> mFirst = <span class="keyword">false</span>;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>performTraversals()</code>这个方法是用来通知<code>Activity</code>的<code>View</code>树来开始测量、布局、绘制。而<code>DecorView</code>就是<code>Activity</code>的根布局，<code>View</code>树的起点，是一个<code>FrameLayout</code>(是一个<code>ViewGroup</code>)。所以就是在这里第一次将<code>mAttachInfo</code>传给了<code>DecorView</code>中的所有子类</p><p>可以了，现在只用找到<code>mAttachInfo</code>是在哪里进行的初始化就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewRootImpl</span><span class="params">(Context context, Display display, IWindowSession session,<span class="keyword">boolean</span> useSfChoreographer)</span> </span>&#123;</span><br><span class="line"> ...   </span><br><span class="line"> mAttachInfo = <span class="keyword">new</span> View.AttachInfo(mWindowSession, mWindow, display, <span class="keyword">this</span>, mHandler, <span class="keyword">this</span>,context);</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了，在<code>ViewRootImpl</code>的一个构造方法中，创建了一个<code>AttachInfo</code>。所以说<code>ViewRootImpl</code>是<code>AttachInfo</code>的开头，<code>AttachInfo</code>是从这里开始往下传递的</p><p>但又有一个小问题出现了，那就是创建<code>AttachInfo</code>中放入的参数<code>mHandler</code>，<code>mHandler</code>是那来的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ViewRootHandler mHandler = <span class="keyword">new</span> ViewRootHandler();</span><br></pre></td></tr></table></figure><p><code>mHandler</code>是在内部被创建的，又因为<code>ViewRootImpl</code>是在主线程中，所以这里创建的<code>Handler</code>会自动的获取当前线程的<code>Looper</code>，所以也就可以回答一开始所问的问题，为什么可以在子线程中调用<code>View.post</code>来更新<code>ui</code>，因为内部的<code>Handler</code>始终都是在主线程上的</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>当调用<code>View.post</code>的时候，<code>View</code>内部会先判断是否调用过<code>dispatchAttachedToWindow</code>，也就是<code>mAttachInfo</code>是否为空。为空的话，则会先将传入进来的<code>Runnable</code>通过调用<code>HandlerActionQueue</code>封装成<code>HandlerAction</code>保存在数组中，等待<code>dispatchAttachedToWindow</code>被执行。当<code>dispatchAttachedToWindow</code>被执行的时候，则会先将存储在<code>HandlerActionQueue</code>里的数组中的<code>HandlerAction</code>提取出来运行，之后的<code>Runnable</code>都将直接调用<code>mAttachInfo.post()</code>来运行</p><p>关于<code>mAttachInfo</code>的流程：一开始<code>ViewRootlmpl</code>通知<code>Activity</code>根<code>View</code>开始测量、布局、绘制。也就是通知<code>Activity.DevorView</code>去进行测量会调用<code>view.dispatchAttachedToWindow()</code>的方法，将自身的<code>mAttachInfo</code>传给根<code>View</code>。而根<code>View</code>(<code>DevorView</code>)是一个<code>ViewGroup</code>，所以在<code>ViewGroup</code>的<code>dispatchAttachedToWindow</code>又会遍历子<code>View</code>，通过调用子<code>View</code>的<code>dispatchAttachedToWindow</code>将<code>mAttachInfo</code>传递给每个子<code>View</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design - Navigation</title>
      <link href="2021/08/28/Material-Design-Navigation/"/>
      <url>2021/08/28/Material-Design-Navigation/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍Android中的协程</p><a id="more"></a><h1 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h1><blockquote><p>Material Design - Navigation</p></blockquote><h3 id="Navigation导航跳转"><a href="#Navigation导航跳转" class="headerlink" title="Navigation导航跳转"></a>Navigation导航跳转</h3><p>在 Google I/O 2018 上新出现了一个导航组件（Navigation Architecture Component），导航组件类似iOS开发里的StoryBoard，可以可视化的编辑App页面的导航关系。</p><h4 id="Navigation依赖"><a href="#Navigation依赖" class="headerlink" title="Navigation依赖"></a>Navigation依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.navigation:navigation-fragment-ktx:2.3.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;androidx.navigation:navigation-ui-ktx:2.3.0&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Navigation使用"><a href="#Navigation使用" class="headerlink" title="Navigation使用"></a>Navigation使用</h4><ol><li><p>先创建2个<code>Fragment</code>，用于导航跳转</p><h5 id="FragmentA"><a href="#FragmentA" class="headerlink" title="FragmentA"></a>FragmentA</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentA</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding: FragmentABinding <span class="keyword">by</span> lazy &#123; FragmentABinding.inflate(layoutInflater) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View &#123;</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>FragmentA</code>里面也就只是放了个<code>Button</code>用于跳转</p><h5 id="FragmentB"><a href="#FragmentB" class="headerlink" title="FragmentB"></a>FragmentB</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentB</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding: FragmentBBinding <span class="keyword">by</span> lazy &#123; FragmentBBinding.inflate(layoutInflater) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.card.MaterialCardView</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:transitionName</span>=<span class="string">&quot;fragmentB&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/med_title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:text</span>=<span class="string">&quot;标题&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/mad_author&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/ma_author&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/med_title&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/mad_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;@dimen/dp_10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;@dimen/dp_10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/mad_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/mad_author&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.google.android.material.card.MaterialCardView</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>FragmentB</code>这里就放了几个<code>TextView</code>。相当于是详情页，方便后面进行更改</p></li><li><p>在<code>res</code>文件下创建一个名为<code>navigation</code>的文件夹</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210817140632663.png" alt="image-20210817140632663"></p></li><li><p>在<code>navigation</code>文件夹下在创建一个名为<code>navigation_graph</code>的xml文件</p></li><li><p>创建完成之后，打开<code>navigation_graph</code></p><p>在xml文件中点击右上角的Design切换页面</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210817141242213.png" alt="image-20210817141242213"></p><p>之后就可以通过鼠标点击来操作了，非常简单</p><p>在点击xml文件中左上角的+号，将刚刚创建的2个<code>Fragment</code>拖进来，之后的样子会是如下图所示</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210817141752272.png" alt="image-20210817141752272"></p><p>当然你们肯定是还没有连线的，接下来就将它们联系起来</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210817141910247.png" alt="image-20210817141910247"></p><p>选中右边的一侧，拖至另一个Frag<code>m</code>ent，就联系上了</p><p>最后在<code>xml</code>文件的<code>Split</code>代码页面中，给第一行的<code>navigation</code>添加上开始页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_graph&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@id/homeFragment&quot;</span>&gt;</span> //《---这里</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>MainActivity</code>的<code>xml</code>中，添加一个<code>FragmentContainerView</code>，将上面创建好的<code>navigation</code>添加上去</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.fragment.app.FragmentContainerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragmentA&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/navigation_graph&quot;</span> /&gt;</span> //《--这里</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>NavHostFragment是导航视图的展示容器(name为固定写法，必须指明为)</p><p>defaultNavHost字段表示是否拦截返回按键操作(若为true，需要的Activity中重写onSupportNavigateUp方法。 因为默认情况下返回键是不会回退fragment页面的)</p></blockquote></li><li><p>就大功告成拉，打开软件，先是会显示<code>FragmentA</code>。你可以在<code>FragmentA</code>中添加一个按钮，通过如下代码进行跳转</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener &#123;</span><br><span class="line">    Navigation.findNavController(it).navigate(R.id.action_fragmentA_to_fragmentB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的R.id.action_fragmentA_to_fragmentB是刚才navigation中FragmentA的action定义的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/action_fragmentA_to_fragmentB&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:destination</span>=<span class="string">&quot;@id/fragmentBB&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>通过指定<code>action</code>的<code>id</code>来告诉<code>Navigation</code>跳转的逻辑。其他页面也是一样</p></li></ol><h3 id="Materal共享属性动画"><a href="#Materal共享属性动画" class="headerlink" title="Materal共享属性动画"></a>Materal共享属性动画</h3><p>接下来才是重点，在<code>Materal Design</code>中提供了容器变换、共享轴模式、淡出淡入、弹出这些转场模式</p><p>这里就可以使用<code>navigaion</code>+容器变换来实现非常炫酷的转场动画</p><h4 id="Materal依赖"><a href="#Materal依赖" class="headerlink" title="Materal依赖"></a>Materal依赖</h4><p><code>Materal</code>动画是需要<code>Materal</code>依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.google.android.material:material:1.4.0&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Materal转场动画使用"><a href="#Materal转场动画使用" class="headerlink" title="Materal转场动画使用"></a>Materal转场动画使用</h4><p>我们接着上面的项目继续更改</p><ol><li><p>将<code>FragmentA</code>继续完善</p><p>将<code>FragmentA</code>的布局改为<code>RecyclerView</code>，做成列表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/ma_list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>navigation</code>插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&quot;androidx.navigation.safeargs.kotlin&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>完善<code>FragmentA</code>代码(关于适配器的内容，我就不介绍了，就只是做个列表出来用于跳转而已)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentA</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding: FragmentABinding <span class="keyword">by</span> lazy &#123; FragmentABinding.inflate(layoutInflater) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> adapter: MaterialAdapter <span class="keyword">by</span> lazy &#123; MaterialAdapter() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View &#123;</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        enterTransition = MaterialFadeThrough().apply &#123;</span><br><span class="line">            duration = <span class="number">300</span>.toLong() <span class="comment">// 设置过度时间</span></span><br><span class="line">        &#125;</span><br><span class="line">        binding.maList.run &#123;<span class="comment">// 正常的设置适配器</span></span><br><span class="line">            adapter = <span class="keyword">this</span><span class="symbol">@FragmentA</span>.adapter</span><br><span class="line">            layoutManager = LinearLayoutManager(context)</span><br><span class="line">        &#125;</span><br><span class="line">        adapter.run &#123;<span class="comment">// 适配器的点击事件</span></span><br><span class="line">            addChildClickViewIds(R.id.ma_root)</span><br><span class="line">            setOnItemChildClickListener &#123; adapter, view, position -&gt;</span><br><span class="line">                <span class="keyword">val</span> transitionName = <span class="string">&quot;fragmentB&quot;</span><span class="comment">// 共享元素的Transition名称</span></span><br><span class="line">                <span class="keyword">val</span> extras = FragmentNavigatorExtras(view to transitionName)</span><br><span class="line">                <span class="keyword">val</span> directions =</span><br><span class="line">                    FragmentADirections.actionFragmentAToFragmentB((adapter.<span class="keyword">data</span>[position] <span class="keyword">as</span> <span class="built_in">Int</span>).toLong())</span><br><span class="line">                <span class="keyword">val</span> navHostFragment =</span><br><span class="line">                    activity?.supportFragmentManager?.findFragmentById(R.id.fragmentA) <span class="keyword">as</span> NavHostFragment</span><br><span class="line">                <span class="keyword">val</span> navController = navHostFragment.navController</span><br><span class="line">                navController.navigate(directions, extras)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        adapter.setList(arrayListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>enterTransition：进入别的场景时的过度</p><p>FragmentNavigatorExtras：使用给定的共享元素实例 </p><p>directions：动作，就是表明要跳到哪里</p><p>findNavController()：扩展函数，用于获取NavController</p></blockquote></li><li><p><code>FragmentB</code>代码部分</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentB</span> : <span class="type">Fragment</span></span>()&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        sharedElementEnterTransition = MaterialContainerTransform().apply &#123;</span><br><span class="line">            <span class="comment">//  drawingViewId 是视图的 id，在其上方，容器变换将在 z 轴空间进行</span></span><br><span class="line">            drawingViewId = R.id.fragmentA</span><br><span class="line">            duration = resources.getInteger(R.integer.reply_motion_duration_large).toLong()</span><br><span class="line">            <span class="comment">// 由于我们也想将列表页面通过动画转换出视图，所以将 scrimColor 设置为透明</span></span><br><span class="line">            scrimColor = Color.TRANSPARENT</span><br><span class="line">            setAllContainerColors(requireActivity().themeColor(R.attr.colorSurface))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sharedElementEnterTransition：设置将用于共享元素转移到内容场景的过渡</p><p>这里的R.id.fragmentA是MainActivity布局中的FragmentContainerView</p></blockquote></li><li><p>之后就可以启动看一下效果了，不出意外的话，效果会于下图一致(Gif图的速度会过快)</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/Material.gif" alt="Material"></p><p>官方效果</p><p><img src="https://codelabs.developers.google.com/codelabs/material-motion-android/img/9df2b39d5a150418.gif" alt="9df2b39d5a150418.gif"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Material </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android推送原理</title>
      <link href="2021/08/28/Android%E6%8E%A8%E9%80%81%E5%8E%9F%E7%90%86/"/>
      <url>2021/08/28/Android%E6%8E%A8%E9%80%81%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>这里将会介绍Android上的推送原理</p><a id="more"></a><h1 id="Android推送原理"><a href="#Android推送原理" class="headerlink" title="Android推送原理"></a>Android推送原理</h1><blockquote><p>这里将会介绍Android上的推送原理</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在用户未打开或打开的情况下，客户端主动的向用户推送服务器最新消息</p><h2 id="系统级别的推送"><a href="#系统级别的推送" class="headerlink" title="系统级别的推送"></a>系统级别的推送</h2><p>系统级别的推送就代表着，在任何时候都可以进行推送，也不用担心会被系统杀死</p><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><h4 id="C2DM"><a href="#C2DM" class="headerlink" title="C2DM"></a>C2DM</h4><p>全称：Cloud to Device Messaging 云端推送</p><p>这个是基于Push方法进行获取消息的，也就是说C2DM服务负责处理例如消息队列等事务，并向运行设备的应用发送这些消息</p><p><img src="https://upload-images.jianshu.io/upload_images/8421477-0402b7d5bc3096cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/593/format/webp"></p><blockquote><p>这张图网上全都是😓</p></blockquote><ul><li><p>优点</p><p>C2DM提供了一个简单的、轻量级的机制，允许服务器可以通知移动应用程序直接与服务器进行通信，以便于从服务器获取应用程序更新和用户数据</p></li><li><p>缺点</p><p>缺点很明显，这些都是需要依赖于Google服务，但是国内大部分的机型都阉割了Google服务，这就导致无法使用，并且连接上Google还需要进行网络代理</p></li></ul><h2 id="推送的几种方式"><a href="#推送的几种方式" class="headerlink" title="推送的几种方式"></a>推送的几种方式</h2><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p>从字面意思就可以知道，这是一种服务端主动向客户端进行发送消息的模式，也就是客户端跟服务端之间会维护一个长连接</p><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><p>这是一种由客户端主动向服务端请求消息的模式</p><ul><li>缺点<ol><li>成本大，需要自己实现与服务器之间的通信，例如消息排队等；</li><li>客户端中需要一直保持着请求服务的存活，并且还要间隔一定时间就要向服务端发起请求消息，这样也会导致消息不能及时到达</li></ol></li></ul><h3 id="SMS"><a href="#SMS" class="headerlink" title="SMS"></a>SMS</h3><p>这种模式是基于Push的方式，如果服务端上有新的消息，那么服务端会发送一个类似于短信的信令到客户端，客户端接受到信令之后，就会主动向服务端请求消息</p><ul><li>优点<ol><li>客户端消耗小</li><li>可实现完全的实时操作</li></ol></li><li>缺点<ol><li>成本较高，因为目前来说，很难找到免费的短消息发送网关来实现这种方案，只能通过向运营商缴纳相应的短信费用</li></ol></li></ul><h2 id="推送的设计"><a href="#推送的设计" class="headerlink" title="推送的设计"></a>推送的设计</h2><p>一般来说，进行推送最好的方式就是：移动网络长连接(Push)。因为手机平台本身的特点，电量、网络、流量的限制移动互联网应用在设计上跟传统PC 上的应用很大不一样。所以需要根据手机平台的特点，尽量节省流量、电量，同时还要保证数据能及时的到达客户端。在手机平台上，常用的方法有如下2种</p><h3 id="定时查询"><a href="#定时查询" class="headerlink" title="定时查询"></a>定时查询</h3><p>这种就是上面推送方法所讲的Pull，在性能、电量等各方面来说都是使用实时推送(Push)会更好一点，所以这里就不着重讲解</p><h3 id="实时推送"><a href="#实时推送" class="headerlink" title="实时推送"></a>实时推送</h3><p>这种就是手机和服务端之间维护一个TCP长连接，当服务端有新数据的时候，就实时推送到客户端。但是Push的实现和维护成本都会比较高，在移动网络下长连接的维护，相对也有一些技术上的难度。下面就来讲讲移动网络下长连接的维护</p><p><img src="https://img-blog.csdnimg.cn/20200826193844584.png#pic_center"></p><h4 id="移动网络长连接"><a href="#移动网络长连接" class="headerlink" title="移动网络长连接"></a>移动网络长连接</h4><p>这里就先要讲一下移动网络的特点</p><h5 id="移动网络"><a href="#移动网络" class="headerlink" title="移动网络"></a>移动网络</h5><p>现在绝大多数的IP地址应该都还是IPV4，但是IPV4的IP数量有限，运营商分配给手机的的IP是运营商内网的IP，手机想要访问互联网，就必须得先通过运营商的网关，去做一个网络地址转换。简单来说就是运营商的网关需要维护一个外网IP、端口内网IP、端口对应的关系，以确保内网中的手机可以随时的与互联网的服务器通信</p><p><img src="https://img-blog.csdnimg.cn/20190409151034430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjcyNDQ2Nw==,size_16,color_FFFFFF,t_70"></p><p>但是大部分移动无线网络运营商都在链路一段时间没有数据通讯时，会淘汰NAT 表中的对应项，造成链路中断。所以说要想维护好长连接就得避免链路中断</p><blockquote><p>NAT表：NAT映射表存在在路由器里面，实现的是私有IP与公有IP之间的转换；实际上可能是你家一台路由器拥有一个公网IP，而所有连在这台路由器上的所有设备都共享一个公网IP</p></blockquote><h4 id="客户端长连接的维护"><a href="#客户端长连接的维护" class="headerlink" title="客户端长连接的维护"></a>客户端长连接的维护</h4><p>为了不让NAT链路中断，所以我们需要定时发送心跳包，来刷新NAT表项，防止淘汰。在Android上定时运行任务的常用方法有如下两种</p><h5 id="Timter-其他计时器的实现"><a href="#Timter-其他计时器的实现" class="headerlink" title="Timter/其他计时器的实现"></a>Timter/其他计时器的实现</h5><p>Timeter类可以用来执行需要循环执行的任务，但是Timeter有个问题，就是它是需要使用WakeLock来保持CPU的唤醒，这样会大量消耗手机电量，所以这种方法不太可行。其他计时器的实现也是一样，比如说是通过While和Thread.sleep来实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PushService</span> : <span class="type">Service</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">&quot;你请求的网络地址&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pushThread: PushThread <span class="keyword">by</span> lazy &#123; PushThread() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        pushThread.start()</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span>: IBinder? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PushThread</span> : <span class="type">Thread</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>)</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是通过开启了个Service，在onCreate中开启了一个线程，线程中每隔10秒向服务器发送一次请求</p><h5 id="AlarmManager"><a href="#AlarmManager" class="headerlink" title="AlarmManager"></a>AlarmManager</h5><p>而AlarmManager是Android系统封装的用于管理RTC模块，RTC(Real Time Clock)是一个独立的时钟，在CPU处于休眠状态下也可以正常运行，在预定时间到达时，会中断CPU休眠，唤醒CPU。这不是完美符合我们的预期吗，没达到预定时间的时候CPU正常休眠，到达时间则唤醒工作，这样一来手机的耗电量问题也得到了改善</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PushManager</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> context: Context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mAlarmMgr: AlarmManager <span class="keyword">by</span> lazy &#123; context.getSystemService(Context.ALARM_SERVICE) <span class="keyword">as</span> AlarmManager &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">startRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cancelRequestAlarm()</span><br><span class="line">        mAlarmMgr.setRepeating(</span><br><span class="line">            AlarmManager.RTC_WAKEUP,</span><br><span class="line">            System.currentTimeMillis() + <span class="number">1000</span>,</span><br><span class="line">            <span class="number">10000</span>,</span><br><span class="line">            getOperationIntent()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">cancelRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">        mAlarmMgr.cancel(getOperationIntent())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送广播的意图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getOperationIntent</span><span class="params">()</span></span>: PendingIntent &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent()</span><br><span class="line">        intent.action = <span class="string">&quot;push&quot;</span></span><br><span class="line">        <span class="keyword">return</span> PendingIntent.getBroadcast(context, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AlarmManager是系统服务，所以不能用一般的构造方法去构造，可以使用getSystemService()来获取系统级别的服务</p><p>接下来我写了一个发起请求的方法，内部是通过PendingIentent去通知广播，具体的请求应该在广播中处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cancelRequestAlarm()</span><br><span class="line">    mAlarmMgr.setRepeating(</span><br><span class="line">        AlarmManager.RTC_WAKEUP,</span><br><span class="line">        System.currentTimeMillis() + <span class="number">1000</span>,</span><br><span class="line">        <span class="number">10000</span>,</span><br><span class="line">        getOperationIntent()</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面调用了AlarmManager设置重复执行定时任务setRepeating()，setRepeating()接收4个参数</p><table><thead><tr><th>参数</th><th>属性</th></tr></thead><tbody><tr><td>第一个参数标识闹钟类型</td><td>AlarmManager.ELAPSED_REALTIME_WAKEUP(从手机开机后的时间，包含了手机睡眠时间)/AlarmManager.RTC_WAKEUP(使用系统设置中的时间)</td></tr><tr><td>第二个参数表示任务的首次执行时间</td><td>这里就与第一个参数相关了，如果第一个参数设置为AlarmManager.ELAPSED_REALTIME_WAKEUP，那么当前时间就为SystemClock.elapsedRealtime()。如果第一个参数设置为AlarmManager.RTC_WAKEUP，那么当前时间就为System.currentTimeMillis()</td></tr><tr><td>第三个参数为两次任务执行的间隔</td><td>传入你想要的间隔时间</td></tr><tr><td>第四个参数为对应的相应操作</td><td>一般这里都是去发送广播，然后在广播中执行相应的操作。当然也可以getActivity()、getService()</td></tr></tbody></table><p>这样就可以最大程度上可以解决电量消耗问题和定时器被系统回收问题</p><p>至于电量消耗问题还可以进一步的解决，可以执行一些策略</p><ul><li>在移动网络下每隔5分钟去请求一次信息</li><li>在Wifi情况下每隔2分钟去请求一次信息</li><li>在熄屏情况下停止请求</li><li>熄屏一分钟则杀死推送进程</li></ul><h2 id="推送服务持久化"><a href="#推送服务持久化" class="headerlink" title="推送服务持久化"></a>推送服务持久化</h2><p>比如说我们的推送相关的服务是在Service上，那么客户端如何防止用户在使用第三方或者系统本身的清理后台杀死进程呢？</p><p>这里就可以用到Android中的ActivityManager内部类RunningAppProcessInfo</p><h3 id="RunningAppProcessInfo"><a href="#RunningAppProcessInfo" class="headerlink" title="RunningAppProcessInfo"></a>RunningAppProcessInfo</h3><p>RunningAppProcessInfo是用来记录当前系统中进程状态的类，下面讲介绍一些常用值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this is a persistent process.</span></span><br><span class="line"><span class="comment"> * Only used when reporting to process observers.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_PERSISTENT = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process is running the</span></span><br><span class="line"><span class="comment"> * foreground UI.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_FOREGROUND = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process is running something</span></span><br><span class="line"><span class="comment"> * that is actively visible to the user, though not in the immediate</span></span><br><span class="line"><span class="comment"> * foreground.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_VISIBLE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process is running something</span></span><br><span class="line"><span class="comment"> * that is considered to be actively perceptible to the user.  An</span></span><br><span class="line"><span class="comment"> * example would be an application performing background music playback.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_PERCEPTIBLE = <span class="number">130</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process is running an</span></span><br><span class="line"><span class="comment"> * application that can not save its state, and thus can&#x27;t be killed</span></span><br><span class="line"><span class="comment"> * while in the background.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_CANT_SAVE_STATE = <span class="number">170</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process is contains services</span></span><br><span class="line"><span class="comment"> * that should remain running.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_SERVICE = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process process contains</span></span><br><span class="line"><span class="comment"> * background code that is expendable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_BACKGROUND = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constant for &#123;<span class="doctag">@link</span> #importance&#125;: this process is empty of any</span></span><br><span class="line"><span class="comment"> * actively running code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMPORTANCE_EMPTY = <span class="number">500</span>;</span><br></pre></td></tr></table></figure><ul><li><p>一般数值大于IMPORTANCE_SERVICE(300)的进程都表示着，已经长时间没用，或者为空了</p></li><li><p>一般数值大于IMPORTANCE_VISIBLE(200)的进程都是非可见进程，也就是在后台运行了</p></li></ul><p>大多数第三方的清理软件都是清理大于IMPORTANCE_VISIBLE的值，也就是说只要我们进程的值小于IMPORTANCE_VISIBLE(200)，就不会被清理软件清理掉。在Serivce中，有一个方法叫startForeground()这个方法的只用是以可见进程的模式启动Serivce(也就是进程值会小于200)。但是这样会在设备通知栏持续显示一个通知，别急这也有解决办法，只需要讲id传为0即可避免显示通知。相应的想要关闭Service也得用对应的stopForgeround()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#Service</span><br><span class="line"><span class="comment">//如果你的服务已经启动(通过&#123;@link Context#startService(Intent)&#125;运行)，那么  </span></span><br><span class="line"><span class="comment">//还可以让这个服务在前台运行，提供正在进行的  </span></span><br><span class="line"><span class="comment">//在此状态下显示给用户的通知。  </span></span><br><span class="line"><span class="comment">//默认情况下，启动的服务是后台的，这意味着它们的进程不会被给出  </span></span><br><span class="line"><span class="comment">//前台CPU调度(除非该进程中的其他东西是前台的)，  </span></span><br><span class="line"><span class="comment">//如果系统需要杀死它们来回收更多的内存(例如在  </span></span><br><span class="line"><span class="comment">//网络浏览器)，它们可以被杀死而不会造成太大的伤害。</span></span><br><span class="line">startForeground()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design - MaterialShapeDrawable</title>
      <link href="2021/08/28/Material-Design-MaterialShapeDrawable/"/>
      <url>2021/08/28/Material-Design-MaterialShapeDrawable/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍Material Design下的MaterialShapeDrawable</p><a id="more"></a><h1 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h1><blockquote><p>Material Design - MaterialShapeDrawable</p></blockquote><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&quot;com.google.android.material:material:1.3.0&quot;</span></span><br></pre></td></tr></table></figure><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Google介绍：材质形状的基本可绘制类，用于处理生成路径的阴影、高度、比例和颜色。</p></blockquote><p>我的理解就是可动态改变Drawable的绘制路径</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>创建一个MaterialShapeDrawable</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> backgroundShapeDrawable: MaterialShapeDrawable <span class="keyword">by</span> lazy(LazyThreadSafetyMode.NONE) &#123;</span><br><span class="line">        MaterialShapeDrawable(<span class="keyword">this</span>,<span class="literal">null</span>,R.attr.bottomSheetStyle,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MaterialShapeDrawable()的构造函数接收4个参数，第一个为Context、第二个为attrs资源属性文件、第三个为defStyleAttr样式、第四个为defStyleRes</p></li><li><p>设置Drawable内容</p><p>MaterialShapeDrawable创建完了，那么接下就要设置来里面的Drawable的内容了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> foregroundShapeDrawable: MaterialShapeDrawable <span class="keyword">by</span> lazy(LazyThreadSafetyMode.NONE) &#123;</span><br><span class="line">        MaterialShapeDrawable(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            R.attr.bottomSheetStyle,</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        ).apply &#123;</span><br><span class="line">            <span class="comment">// 设置填充颜色</span></span><br><span class="line">            fillColor = ColorStateList.valueOf(</span><br><span class="line">                ContextCompat.getColor(</span><br><span class="line">                    <span class="keyword">this</span><span class="symbol">@ListScalingActivity</span>,</span><br><span class="line">                    R.color.gray</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// 设置阴影大小</span></span><br><span class="line">            elevation = dpToPixel(<span class="number">16f</span>)</span><br><span class="line">            <span class="comment">// 是否启用假阴影</span></span><br><span class="line">            shadowCompatibilityMode = MaterialShapeDrawable.SHADOW_COMPAT_MODE_NEVER</span><br><span class="line">            <span class="comment">// 初始化Drawable叠加功能</span></span><br><span class="line">            initializeElevationOverlay(<span class="keyword">this</span><span class="symbol">@ListScalingActivity</span>)</span><br><span class="line">            <span class="comment">// 设置Drawable的绘制路径</span></span><br><span class="line">            shapeAppearanceModel = shapeAppearanceModel.toBuilder()</span><br><span class="line">                .setTopEdge(<span class="comment">// 在边缘处理</span></span><br><span class="line">                    SemiCircleEdgeCutoutTreatment(<span class="comment">// 绘制一个圆形</span></span><br><span class="line">                        dpToPixel(<span class="number">8f</span>),</span><br><span class="line">                        dpToPixel(<span class="number">24f</span>),<span class="comment">// 半径</span></span><br><span class="line">                        <span class="number">0F</span>,<span class="comment">// 圆形的位置</span></span><br><span class="line">                        dpToPixel(<span class="number">32f</span>)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我为了方便设置属性，使用了apply扩展函数</p><blockquote><p>fillColor：填充背景的颜色</p><p>elevation：阴影高度</p><p>dpToPixel：这个是扩展函数，用于将px转换为dp</p><p>shapeAppearanceModel：Drawable绘制路径</p><p>initializeElevationOverlay()：初始化Drawable的叠加功能</p><p>shapeAppearanceModel.setTopEdge()：在顶部边缘上进行处理</p><p>SemiCircleEdgeCutoutTreatment()：在边缘上的任意一个地方绘制一个圆形</p></blockquote></li><li><p>设置完成之后在添加给控件</p><p>效果如下：</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210817105344089.png" alt="image-20210817105344089"></p><p>将会得到一个中间下凹的背景(我在中间加入了一张图片)</p></li><li><p>动态改变</p><p>我们可以使用<code>MaterialShapeDrawable.interpolation()</code>方法来还原</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foregroundShapeDrawable.interpolation = progress</span><br></pre></td></tr></table></figure><p><code>MaterialShapeDrawable.interpolation()</code>方法表示设置路径的插值，介于0-1之间，1表示一个完全渲染的路径，0表示一个完整修复的路径。也就是是0表示不变，1表示恢复原状</p><p>然后可以通过监听滑动值来进行动态更改</p></li><li><p>将会得到如下效果</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/MaterialShapeDrawable.gif" alt="MaterialShapeDrawable">这里的效果是通过<code>BottomSheetBehavior</code>+<code>MaterialShapeDrawable</code>+图片缩放达成的，可以看到效果非常不错</p><p>如果想要了解使用<code>BottomSheetBehavior</code>那么可以去看看我的另一篇文章<code>Material Design - BottomSheetBehavior</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Material </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Design - BottomSheetBehavior</title>
      <link href="2021/08/28/Material-Design-BottomSheetBehavior/"/>
      <url>2021/08/28/Material-Design-BottomSheetBehavior/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍Material Design下的BottomSheetBehavior</p><a id="more"></a><h1 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h1><blockquote><p>Material Design - BottomSheetBehavior</p></blockquote><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>BottomSheetBehavior是在Design23.3推出的底部动作条，所以说，想要用上BottomSheetBehavior那么就要保证design依赖在23.3或者以上</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.android.support:design:26.0.0-alpha1&#x27;</span></span><br></pre></td></tr></table></figure><p>当然Androidx也是可以的</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.2.0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>BottomSheetBehavior不是一个控件(View)而是一个显示控制器</p><p>只需要在Xml中，往需要的View中添加<code>app:layout_behavior=&quot;@string/bottom_sheet_behavior&quot;</code>，然后通过控制BottomSheetBehavior的状态来控制显示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/background_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_halfExpandedRatio</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_hideable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:behavior_skipCollapsed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">&quot;@string/bottom_sheet_behavior&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h4><ol><li><p>behavior_halfExpandedRatio:</p><p>设置展开的高度占父类高度的比例，比例范围介于0-1。在上图中，设置为0.5就表示着BottomSheetBehavior展开后占父类高度的50%，也就是一半</p></li><li><p>behavior_hideable:</p><p>设置BottomSheetBehavior是否可以通过向下拖动来进行隐藏，也就是下图中的效果</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/BottomSheetBehavior.gif" alt="BottomSheetBehavior"></p></li></ol><ol start="3"><li><p>behavior_skipCollapsed</p><p>设置BottomSheetBehavior一旦展开就跳过折叠状态，跳过过度效果。除非它是可隐藏的</p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>先给想要成为BottomSheetBehavior的View添加上<code>app:layout_behavior</code></p></li><li><p>在代码中进行获取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> behavior: BottomSheetBehavior&lt;FrameLayout&gt; <span class="keyword">by</span> lazy(LazyThreadSafetyMode.NONE) &#123;</span><br><span class="line">        BottomSheetBehavior.from(binding.backgroundContainer)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里是使用了BottomSheetBehavior.from()来将View关联起来的</p></li><li><p>通过控BottomSheetBehavior的状态来控制是否展开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">behavior.state &#x3D; BottomSheetBehavior.STATE_HALF_EXPANDED</span><br></pre></td></tr></table></figure><p>BottomSheetBehavior的状态码如下</p><table><thead><tr><th>状态码</th><th>状态效果</th></tr></thead><tbody><tr><td>STATE_DRAGGING</td><td>指BottomSheet处于被手指拖着</td></tr><tr><td>STATE_SETTLING</td><td>指BottomSheet处于正在折叠的过程中</td></tr><tr><td>STATE_EXPANDED</td><td>指BottomSheet处于展开的状态</td></tr><tr><td>STATE_COLLAPSED</td><td>指BottomSheet处于折叠的状态</td></tr><tr><td>STATE_HIDDEN</td><td>指BottomSheet处于隐藏的状态</td></tr><tr><td>STATE_HALF_EXPANDED</td><td>指BottomSheet是半展开的(当mFitToContents为false时使用)</td></tr></tbody></table></li><li><p>之后BottomSheetBehavior就会根据现在的状态来自动的更改UI</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Material </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glide源码剖析-load</title>
      <link href="2021/08/28/Glide%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-load/"/>
      <url>2021/08/28/Glide%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-load/</url>
      
        <content type="html"><![CDATA[<p>本篇将分析源码Glide.load()方法</p><a id="more"></a><h1 id="Glide源码剖析-load"><a href="#Glide源码剖析-load" class="headerlink" title="Glide源码剖析-load"></a>Glide源码剖析-load</h1><blockquote><p>将分析源码Glide.load()</p></blockquote><h2 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>).load(<span class="string">&quot;图片资源&quot;</span>)</span><br></pre></td></tr></table></figure><p>load()一共有9个重载方法，都返回<code>RequestBuilder&lt;Drawable&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Object model)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Bitmap bitmap)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Drawable drawable)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> String string)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Uri uri)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> File file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@RawRes</span> <span class="meta">@DrawableRes</span> <span class="meta">@Nullable</span> Integer resourceId)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> URL url)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> <span class="keyword">byte</span>[] model)</span></span></span><br></pre></td></tr></table></figure><p>这些重载方法内部都会调用<code>asDrawable().load()</code>，这里就拿最常用的<code>load(String string)</code>来作为例子</p><p>我们先来看一下<code>asDrawable()</code></p><h3 id="asDrawable"><a href="#asDrawable" class="headerlink" title="asDrawable()"></a>asDrawable()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#RequestManager</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">asDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> as(Drawable.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@CheckResult</span></span><br><span class="line"><span class="keyword">public</span> &lt;ResourceType&gt; <span class="function">RequestBuilder&lt;ResourceType&gt; <span class="title">as</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Class&lt;ResourceType&gt; resourceClass)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RequestBuilder&lt;&gt;(glide, <span class="keyword">this</span>, resourceClass, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是通过使用传递进来的参数来创建一个RequestBuilder()，所以<code>asDrawable()</code>方法最终创建了 RequestBuilder 的实例并返回，查看RequestBuilder的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">RequestBuilder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@NonNull</span> Glide glide,</span></span></span><br><span class="line"><span class="function"><span class="params">      RequestManager requestManager,</span></span></span><br><span class="line"><span class="function"><span class="params">      Class&lt;TranscodeType&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">      Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.glide = glide;</span><br><span class="line">    <span class="keyword">this</span>.requestManager = requestManager;</span><br><span class="line">    <span class="keyword">this</span>.transcodeClass = transcodeClass;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="keyword">this</span>.transitionOptions = requestManager.getDefaultTransitionOptions(transcodeClass);</span><br><span class="line">    <span class="keyword">this</span>.glideContext = glide.getGlideContext();</span><br><span class="line"></span><br><span class="line">    initRequestListeners(requestManager.getDefaultRequestListeners());</span><br><span class="line">    apply(requestManager.getDefaultRequestOptions());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>构造函数里也是将参数赋值给了一些常量，之后初始化了请求监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initRequestListeners(requestManager.getDefaultRequestListeners());</span><br></pre></td></tr></table></figure><p>最后调用了apply()将默认选择应用于请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; <span class="title">apply</span><span class="params">(<span class="meta">@NonNull</span> BaseRequestOptions&lt;?&gt; requestOptions)</span> </span>&#123;</span><br><span class="line">    Preconditions.checkNotNull(requestOptions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.apply(requestOptions);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>代码很少，就执行了两个操作。先判断传入及拿来的Options是否是为空，其次调用父类的apply，将Options传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#BaseRequestOptions</span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">apply</span><span class="params">(<span class="meta">@NonNull</span> BaseRequestOptions&lt;?&gt; o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本上就是设置一些默认配置项</span></span><br><span class="line">    <span class="keyword">if</span> (isAutoCloneEnabled) &#123;</span><br><span class="line">      <span class="keyword">return</span> clone().apply(o);</span><br><span class="line">    &#125;</span><br><span class="line">    BaseRequestOptions&lt;?&gt; other = o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, SIZE_MULTIPLIER)) &#123;</span><br><span class="line">      sizeMultiplier = other.sizeMultiplier;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, USE_UNLIMITED_SOURCE_GENERATORS_POOL)) &#123;</span><br><span class="line">      useUnlimitedSourceGeneratorsPool = other.useUnlimitedSourceGeneratorsPool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, USE_ANIMATION_POOL)) &#123;</span><br><span class="line">      useAnimationPool = other.useAnimationPool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, DISK_CACHE_STRATEGY)) &#123;</span><br><span class="line">      diskCacheStrategy = other.diskCacheStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, PRIORITY)) &#123;</span><br><span class="line">      priority = other.priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, ERROR_PLACEHOLDER)) &#123;</span><br><span class="line">      errorPlaceholder = other.errorPlaceholder;</span><br><span class="line">      errorId = <span class="number">0</span>;</span><br><span class="line">      fields &amp;= ~ERROR_ID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, ERROR_ID)) &#123;</span><br><span class="line">      errorId = other.errorId;</span><br><span class="line">      errorPlaceholder = <span class="keyword">null</span>;</span><br><span class="line">      fields &amp;= ~ERROR_PLACEHOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, PLACEHOLDER)) &#123;</span><br><span class="line">      placeholderDrawable = other.placeholderDrawable;</span><br><span class="line">      placeholderId = <span class="number">0</span>;</span><br><span class="line">      fields &amp;= ~PLACEHOLDER_ID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, PLACEHOLDER_ID)) &#123;</span><br><span class="line">      placeholderId = other.placeholderId;</span><br><span class="line">      placeholderDrawable = <span class="keyword">null</span>;</span><br><span class="line">      fields &amp;= ~PLACEHOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, IS_CACHEABLE)) &#123;</span><br><span class="line">      isCacheable = other.isCacheable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, OVERRIDE)) &#123;</span><br><span class="line">      overrideWidth = other.overrideWidth;</span><br><span class="line">      overrideHeight = other.overrideHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, SIGNATURE)) &#123;</span><br><span class="line">      signature = other.signature;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, RESOURCE_CLASS)) &#123;</span><br><span class="line">      resourceClass = other.resourceClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, FALLBACK)) &#123;</span><br><span class="line">      fallbackDrawable = other.fallbackDrawable;</span><br><span class="line">      fallbackId = <span class="number">0</span>;</span><br><span class="line">      fields &amp;= ~FALLBACK_ID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, FALLBACK_ID)) &#123;</span><br><span class="line">      fallbackId = other.fallbackId;</span><br><span class="line">      fallbackDrawable = <span class="keyword">null</span>;</span><br><span class="line">      fields &amp;= ~FALLBACK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, THEME)) &#123;</span><br><span class="line">      theme = other.theme;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, TRANSFORMATION_ALLOWED)) &#123;</span><br><span class="line">      isTransformationAllowed = other.isTransformationAllowed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, TRANSFORMATION_REQUIRED)) &#123;</span><br><span class="line">      isTransformationRequired = other.isTransformationRequired;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, TRANSFORMATION)) &#123;</span><br><span class="line">      transformations.putAll(other.transformations);</span><br><span class="line">      isScaleOnlyOrNoTransform = other.isScaleOnlyOrNoTransform;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSet(other.fields, ONLY_RETRIEVE_FROM_CACHE)) &#123;</span><br><span class="line">      onlyRetrieveFromCache = other.onlyRetrieveFromCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Applying options with dontTransform() is expected to clear our transformations.</span></span><br><span class="line">    <span class="keyword">if</span> (!isTransformationAllowed) &#123;</span><br><span class="line">      transformations.clear();</span><br><span class="line">      fields &amp;= ~TRANSFORMATION;</span><br><span class="line">      isTransformationRequired = <span class="keyword">false</span>;</span><br><span class="line">      fields &amp;= ~TRANSFORMATION_REQUIRED;</span><br><span class="line">      isScaleOnlyOrNoTransform = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fields |= other.fields;</span><br><span class="line">    options.putAll(other.options);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> selfOrThrowIfLocked();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>isSet()：将两个Int类型参数进行与运算。（就是比较二进制数，是1为1，否则为0）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSet</span><span class="params">(<span class="keyword">int</span> fields, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (fields &amp; flag) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面基本上都是在配置配置项，包括磁盘缓存策略，加载中的占位图，加载失败的占位图等。 到这里 asDrawable() 方法完成了。接下来查看load部分</p><h3 id="asDrawable-load"><a href="#asDrawable-load" class="headerlink" title="asDrawable().load()"></a>asDrawable().load()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> String string)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadGeneric(string);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>里面也就调用了loadGeneric()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> RequestBuilder&lt;TranscodeType&gt; <span class="title">loadGeneric</span><span class="params">(<span class="meta">@Nullable</span> Object model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isAutoCloneEnabled()) &#123;</span><br><span class="line">      <span class="keyword">return</span> clone().loadGeneric(model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    isModelSet = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> selfOrThrowIfLocked();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li><p>先判断需不需要进行克隆，需要的话则会将克隆一个RequestBuilder，包括目前为止的所有配置项</p><blockquote><p>返回此请求生成器的副本，其中包含到目前为止在此生成器上放置的所有选项。  </p><p>该方法返回一个“深度”副本，其中所有非不可变参数都被复制，这样对一个构建器的更改不会影响到另一个构建器。 然而，除了不可变参数外，当前模型不会被复制，因此对模型的更改将影响两个构建器。  </p><p>[^Ps]: 以上内容来自有道翻译</p></blockquote></li><li><p>将传入进来的图片资源赋值给成员变量model，在设置isModelSet为true，代表着已经设置过了</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>load()方法就比较简单了，主要就是通过之前创建的Glide和RequestManager来构建RequestBuilder，将参数赋值给成员变量model。还要就是设置一些默认配置项</p>]]></content>
      
      
      
        <tags>
            
            <tag> Glide </tag>
            
            <tag> 源码剖析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glide源码剖析-with</title>
      <link href="2021/08/28/Glide%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-with/"/>
      <url>2021/08/28/Glide%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-with/</url>
      
        <content type="html"><![CDATA[<p>本篇将分析源码Glide.with()方法</p><a id="more"></a><h1 id="Glide源码剖析-with"><a href="#Glide源码剖析-with" class="headerlink" title="Glide源码剖析-with"></a>Glide源码剖析-with</h1><blockquote><p>将分析源码Glide.with()</p></blockquote><p>在大多数情况下，我们使用<code>Glide</code>进行图片加载无非就是下面一句话</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Activity</span><br><span class="line">Glide.with(<span class="keyword">this</span>).load(src).into(imageView)</span><br></pre></td></tr></table></figure><p>可以见得<code>Glide</code>帮我们在背后完成了海量的操作，所以下面我们将先按照使用者的角度来进行剖析</p><h2 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p><code>with()</code>是<code>Glide</code>中的<strong>一组静态方法</strong>。为什么说是一组呢，因为它有很多个重载方法。在我们日常使用中，我们经常性的会往<code>with()</code>里传递<code>Activity</code>，有时也会传递<code>Fragment</code>。所以<code>Glide.with()</code>是一组静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#Glide</span><br><span class="line">...</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(context).get(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(activity).get(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(<span class="meta">@NonNull</span> FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(activity).get(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(<span class="meta">@NonNull</span> Fragment fragment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(fragment.getContext()).get(fragment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(<span class="meta">@NonNull</span> android.app.Fragment fragment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(fragment.getActivity()).get(fragment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(<span class="meta">@NonNull</span> View view)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getRetriever(view.getContext()).get(view);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上述代码是精简过之后的代码。可以见得虽然往里面传递了不同的参数，但最终都还是指向了<code>getRetriever().get()</code>，那接下来就先看看<code>getRetriever()</code>是个什么方法把</p><h3 id="getRetriever"><a href="#getRetriever" class="headerlink" title="getRetriever()"></a>getRetriever()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Glide</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RequestManagerRetriever <span class="title">getRetriever</span><span class="params">(<span class="meta">@Nullable</span> Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Context could be null for other reasons (ie the user passes in null), but in practice it will</span></span><br><span class="line">    <span class="comment">// only occur due to errors with the Fragment lifecycle.</span></span><br><span class="line">    Preconditions.checkNotNull(</span><br><span class="line">        context,</span><br><span class="line">        <span class="string">&quot;You cannot start a load on a not yet attached View or a Fragment where getActivity() &quot;</span></span><br><span class="line">            + <span class="string">&quot;returns null (which usually occurs when getActivity() is called before the Fragment &quot;</span></span><br><span class="line">            + <span class="string">&quot;is attached or after the Fragment is destroyed).&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Glide.get(context).getRequestManagerRetriever();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>getRetriever()的代码不多。我们可以简单分析以下</p><ol><li><p>Preconditions.checkNotNull()</p><p>Preconditions.checkNotNull()：就是个判空处理，它接收2个参数。第一个就是需要判空的对象，第二个则是如果为空则会抛出的异常信息</p><ul><li>使用优势<ol><li>节省时间</li><li>简单使用，如果全部手写，可能需要写十几处判空的逻辑,还要处理异常</li><li>适用于空指针异常处理</li></ol></li></ul></li><li><p>Glide.get().getRequestManagerRetriever()</p><p>这里可以看出先调用了<code>Glide.get()</code>在调用<code>getRequestManagerRetriever</code>()获取<code>RequestManagerRetriever</code>对象。那么就先看一下<code>Glide.get()</code>方法把</p><h5 id="Glide-get"><a href="#Glide-get" class="headerlink" title="Glide.get()"></a>Glide.get()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#Glide</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="comment">// Double checked locking is safe here.</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;GuardedBy&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Glide <span class="title">get</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">    GeneratedAppGlideModule annotationGeneratedModule =</span><br><span class="line">        getAnnotationGeneratedGlideModules(context.getApplicationContext());</span><br><span class="line">    <span class="keyword">synchronized</span> (Glide.class) &#123;</span><br><span class="line">      <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkAndInitializeGlide(context, annotationGeneratedModule);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">return</span> glide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是单例模式下获取本身。至于是如何进行构造的我们先不用理会，这里就只用明白就是获取一个自己出来即可</p><p>那剩下的就只有<code>getRequestManagerRetriever</code>()了</p><h5 id="getRequestManagerRetriever"><a href="#getRequestManagerRetriever" class="headerlink" title="getRequestManagerRetriever()"></a>getRequestManagerRetriever()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Glide</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RequestManagerRetriever requestManagerRetriever;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestManagerRetriever <span class="title">getRequestManagerRetriever</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> requestManagerRetriever;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>代码啥也没做，就是返回了个<code>RequestManagerRetriever</code>回来。至于它是在哪被初始化的，我们先也不展开了</p></li></ol><p>回到<code>Glide.with()</code>我们梳理一遍，<code>with()</code>内部先调用了<code>getRetriever()</code>去获取<code>RequestManagerRetriever</code>，在调用了<code>.get()</code>方法，相当于是直接调用了<code>RequestManagerRetriever.get()</code>方法。所以说最终还是调用的是<code>RequestManagerRetriever.get()</code>方法</p><p>那我们也就只能继续去查看<code>RequestManagerRetriever.get()</code>方法了</p><h3 id="RequestManagerRetriever"><a href="#RequestManagerRetriever" class="headerlink" title="RequestManagerRetriever"></a>RequestManagerRetriever</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#RequestManagerRetriever</span><br><span class="line">...</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;You cannot start a load on a null Context&quot;</span>);</span><br><span class="line">      <span class="comment">// 判断是否在主线程、判断context是否是Application</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class="keyword">instanceof</span> Application)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">      <span class="keyword">return</span> get((FragmentActivity) context);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">      <span class="keyword">return</span> get((Activity) context);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> ContextWrapper</span><br><span class="line">        <span class="comment">// Only unwrap a ContextWrapper if the baseContext has a non-null application context.</span></span><br><span class="line">        <span class="comment">// Context#createPackageContext may return a Context without an Application instance,</span></span><br><span class="line">        <span class="comment">// in which case a ContextWrapper may be used to attach one.</span></span><br><span class="line">        &amp;&amp; ((ContextWrapper) context).getBaseContext().getApplicationContext() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> get(((ContextWrapper) context).getBaseContext());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> getApplicationManager(context);</span><br><span class="line">&#125; </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们一个一个分析</p><ol><li><p>方法一开始就先进行了判空处理</p></li><li><p>之后会判断当前是否处于主线程中和传入进来的<code>context</code>是否是<code>Application</code></p><ul><li>如果任意一个条件不满足，则会直接调用getApplicationManager()</li></ul></li><li><p>接下就只有三种情况：</p><ul><li>第一种就是传入进来的context是FragmentActivity，那么会返回get((FragmentActivity) context)</li><li>第二种就是传入进来的context是Activity，那么会返回get((Activity) context)</li><li>最后一种就是传入进来的context是属于ContextWrapper，那么会返回get(((ContextWrapper) context).getBaseContext())</li></ul><blockquote><p>ContextWrapper是继承于Context，而Activity、Service、Application也都是ContextWrapper的直接或间接子类</p></blockquote></li></ol><p>所以说<code>RequestManagerRetriever.get()</code>方法会根据传递进来的<code>context</code>类型来返回不同的<code>RequestManager</code>，那就继续看看<code>get()</code>方法把</p><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>这里就先以参数为<code>FragmentActivity</code>作为例子，别的都大同小异</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#RequestManagerRetriever</span><br><span class="line">...</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(<span class="meta">@NonNull</span> FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;<span class="comment">// 判断是否处于子线程中</span></span><br><span class="line">    <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    assertNotDestroyed(activity);<span class="comment">// 判断传入的Activity是否被销毁</span></span><br><span class="line">    frameWaiter.registerSelf(activity);</span><br><span class="line">    FragmentManager fm = activity.getSupportFragmentManager();<span class="comment">// 获取activity的FragmentManager</span></span><br><span class="line">    <span class="keyword">return</span> supportFragmentGet(activity, fm, <span class="comment">/*parentHint=*/</span> <span class="keyword">null</span>, isActivityVisible(activity));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>一开始就直接判断当前是否处于后台线程，是的话就直接返回<code>get(activity.getApplicationContext())</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">   <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Util.isOnBackgroundThread()：判断当前线程是否是后台线程，是返回true，不是返回false</p></blockquote></li><li><p>判断传入进来的<code>activity</code>是否已经被销毁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assertNotDestroyed(activity);</span><br></pre></td></tr></table></figure><h6 id="assertNotDestroyed"><a href="#assertNotDestroyed" class="headerlink" title="assertNotDestroyed"></a>assertNotDestroyed</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#RequestManagerRetriever</span><br><span class="line">  <span class="meta">@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assertNotDestroyed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1 &amp;&amp; activity.isDestroyed()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;You cannot start a load for a destroyed activity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>就判断一下当前的SDK是否大于等于17和传入进来的<code>activity</code>是否被销毁</p><blockquote><p>Build.VERSION_CODES.JELLY_BEAN_MR1：API 17</p></blockquote></li><li><p>获取当前传入<code>activity</code>的<code>FragmentManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fm = activity.getSupportFragmentManager();</span><br></pre></td></tr></table></figure></li><li><p>最后调用<code>supportFragmentGet()</code>，返回<code>RequestManager</code>出去。😔还是得继续看下去，看看是如何返回<code>RequestManager</code></p></li></ol><h5 id="RequestManager"><a href="#RequestManager" class="headerlink" title="RequestManager"></a>RequestManager</h5><p>这里就是重头戏了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#RequestManagerRetriever</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> RequestManager <span class="title">supportFragmentGet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@NonNull</span> Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@NonNull</span> FragmentManager fm,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Nullable</span> Fragment parentHint,// 注意这里是可为空</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class="line">    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);</span><br><span class="line">    RequestManager requestManager = current.getRequestManager();<span class="comment">// 这里也可能为空</span></span><br><span class="line">    <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123; <span class="comment">// 开始判空</span></span><br><span class="line">      <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">      Glide glide = Glide.get(context); <span class="comment">// 开始构建</span></span><br><span class="line">      requestManager = factory.build(glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class="line">      <span class="comment">// This is a bit of hack, we&#x27;re going to start the RequestManager, but not the</span></span><br><span class="line">      <span class="comment">// corresponding Lifecycle. It&#x27;s safe to start the RequestManager, but starting the</span></span><br><span class="line">      <span class="comment">// Lifecycle might trigger memory leaks. See b/154405040</span></span><br><span class="line">      <span class="keyword">if</span> (isParentVisible) &#123;</span><br><span class="line">        requestManager.onStart();</span><br><span class="line">      &#125;</span><br><span class="line">      current.setRequestManager(requestManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> requestManager;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先第八行获取了一个SupporRequestManagerFragment，这其实是一个隐形的Fragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);</span><br></pre></td></tr></table></figure><p>通过参数FragmentManager和Fragment(可空)来创建一个隐形的Fragment</p><blockquote><p>这里创建一个隐形的Fragment的意图就是，想通过添加一个隐形的Fragment到Activity中去，来监听Fragment的生命周期，便于控制加载</p><p>因为Fragment的生命周期是跟随着Activity的，所以可以根据这个方法来监听到Activity的生命周期</p></blockquote></li><li><p>下面又通过刚获取的Fragment又获取到了RequestManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestManager requestManager = current.getRequestManager();</span><br></pre></td></tr></table></figure><blockquote><p>RequestManager：其实就是一个生命周期管理类，用来判断当前的生命周期来选择是否继续加载图片</p></blockquote><p>到这里为止，Glide就可以根据这个 Fragment 的生命周期进行请求管理了。</p></li><li><p>但是如果是第一次，那么获取到的RequestManager会为空，就需要继续判空处理，如果刚刚current.getRequestManager()获取为空，则重新创建一个RequsetManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// Factor out this Glide.get() call.</span></span><br><span class="line">  Glide glide = Glide.get(context);</span><br><span class="line">  <span class="comment">// 这有点小技巧，我们要启动RequestManager，但不是</span></span><br><span class="line">  <span class="comment">// 相应的生命周期。 启动RequestManager是安全的，但是启动  </span></span><br><span class="line">  <span class="comment">// 生命周期可能会触发内存泄漏</span></span><br><span class="line">  requestManager =</span><br><span class="line">      factory.build(</span><br><span class="line">          glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class="line">  <span class="keyword">if</span> (isParentVisible) &#123;</span><br><span class="line">    requestManager.onStart();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将创建好的requestManager添加到SupportRequestManagerFragment 上去</span></span><br><span class="line">  current.setRequestManager(requestManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，又重新获取了一次<code>Glide</code>单例，并通过<code>Fractory</code>工厂类来构建<code>RequestManager</code>，构建需要三个参数</p><ol><li>Glide实例</li><li>这里的 current.getGlideLifecycle() 就是getSupportRequestManagerFragment中实例化的 ActivityFragmentLifecycle。这样 RequestManager 就与 ActivityFragmentLifecycle 进行了关联</li><li>Context</li></ol><p>创建完<code>RequestManager</code>之后，就根据传递进来的<code>isParentVisible</code>来通知<code>requestManager</code>是否开始</p><blockquote><p>isParentVisible：字面意思就是之前传递进来的Fragment Activity是否显示</p></blockquote><p>最后就是将 <code>RequestManager</code> 设置到 <code>SupportRequestManagerFragment</code> 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current.setRequestManager(requestManager);</span><br></pre></td></tr></table></figure></li></ol><h4 id="getApplicationContext"><a href="#getApplicationContext" class="headerlink" title="getApplicationContext()"></a>getApplicationContext()</h4><p>接下来在看一个Application的情况，因为大体上就可以分为两种，context是Application和context不是Application</p><p>先放出代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#RequestManagerRetriever</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> RequestManager <span class="title">getApplicationManager</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Either an application context or we&#x27;re on a background thread.</span></span><br><span class="line">    <span class="keyword">if</span> (applicationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;<span class="comment">// 保证同步</span></span><br><span class="line">        <span class="keyword">if</span> (applicationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 通常，暂停/恢复是由我们添加到片段或活动的片段来处理的。 然而，在这种情况下，由于附加到应用程序的管理器将不会接收生命周期事件，我们必须强制管理器使用ApplicationLifecycle开始恢复。  </span></span><br><span class="line">          <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">          Glide glide = Glide.get(context.getApplicationContext());</span><br><span class="line">          applicationManager =</span><br><span class="line">              factory.build(</span><br><span class="line">                  glide,</span><br><span class="line">                  <span class="keyword">new</span> ApplicationLifecycle(),</span><br><span class="line">                  <span class="keyword">new</span> EmptyRequestManagerTreeNode(),</span><br><span class="line">                  context.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> applicationManager;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>总体上于非Application的差不了多少，不过我们也还是继续分析</p><ol><li><p>还是和之前一样，先使用传递进来的context去获取到Glide，然后通过Glide去创建Request Manager</p></li><li><p>只不过在<code>getApplicationManager()</code>这里，通过Factory创建Request Manager的参数可不一样。在这里第一个参数还是Glide，但是第二个参数就变成了<code>ApplicationLifecycle()</code>，之前是传入Fragment的<code>getGlideLifecycle()</code>也就是Fragment的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationLifecycle</span> <span class="keyword">implements</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(<span class="meta">@NonNull</span> LifecycleListener listener)</span> </span>&#123;</span><br><span class="line">    listener.onStart();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeListener</span><span class="params">(<span class="meta">@NonNull</span> LifecycleListener listener)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do nothing.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>ApplicationLifecycle</code>是空实现，也就是说这里没有专门做生命周期的处理， 因为 Application 对象的生命周期即为应用程序的生命周期，所以在这里图片请求的生命周期是和应用程序同步的。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以说，<code>Glide.with()</code>就是根据传递进来的context是什么它就会返回什么样的Request Manager出去，至于Request Manager内部就是创建了一个隐形的Fragment上去，通过这个隐形的Fragment来监听Activity的生命周期变化</p><p>也可以说是Glide为了能够自动的配合生命周期来控制图片的加载和暂停，所以才想出判断传入进来的Context是否是Application来考虑是通过一个隐形的Fragment来感知Activity的生命周期还是直接使用ApplicationLifecycle</p>]]></content>
      
      
      
        <tags>
            
            <tag> Glide </tag>
            
            <tag> 源码剖析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glide源码剖析-into</title>
      <link href="2021/08/28/Glide%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-into/"/>
      <url>2021/08/28/Glide%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-into/</url>
      
        <content type="html"><![CDATA[<p>本篇将分析源码Glide.into()方法</p><a id="more"></a><h1 id="Glide源码剖析-into"><a href="#Glide源码剖析-into" class="headerlink" title="Glide源码剖析-into"></a>Glide源码剖析-into</h1><blockquote><p>将分析源码Glide.into()</p></blockquote><h2 id="into"><a href="#into" class="headerlink" title="into()"></a>into()</h2><p>可以发现，前面两个方法with()和load()都没有涉及到图片的请求、缓存、解码等别的逻辑。那么都会在into()里，所以这部分会非常复杂:muscle:加油</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>).load(<span class="string">&quot;图片资源&quot;</span>).into(image)</span><br></pre></td></tr></table></figure><h3 id="重载方法"><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h3><p>into()的重载方法和View的那套差不多，都是向下重复调用重载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(<span class="meta">@NonNull</span> Y target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> into(target, <span class="comment">/*targetListener=*/</span> <span class="keyword">null</span>, Executors.mainThreadExecutor());</span><br><span class="line">&#125;</span><br><span class="line">---分割---</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Synthetic</span></span><br><span class="line">&lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Y target,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> into(target, targetListener, <span class="comment">/*options=*/</span> <span class="keyword">this</span>, callbackExecutor);</span><br><span class="line">&#125;</span><br><span class="line">---分割---</span><br><span class="line"><span class="keyword">private</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Y target,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; options,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  Preconditions.checkNotNull(target);</span><br><span class="line">  <span class="keyword">if</span> (!isModelSet) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;You must call #load() before calling #into()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Request request = buildRequest(target, targetListener, options, callbackExecutor);</span><br><span class="line"></span><br><span class="line">  Request previous = target.getRequest();</span><br><span class="line">  <span class="keyword">if</span> (request.isEquivalentTo(previous)</span><br><span class="line">      &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;</span><br><span class="line">    <span class="comment">// If the request is completed, beginning again will ensure the result is re-delivered,</span></span><br><span class="line">    <span class="comment">// triggering RequestListeners and Targets. If the request is failed, beginning again will</span></span><br><span class="line">    <span class="comment">// restart the request, giving it another chance to complete. If the request is already</span></span><br><span class="line">    <span class="comment">// running, we can let it continue running without interruption.</span></span><br><span class="line">    <span class="keyword">if</span> (!Preconditions.checkNotNull(previous).isRunning()) &#123;</span><br><span class="line">      <span class="comment">// Use the previous request rather than the new one to allow for optimizations like skipping</span></span><br><span class="line">      <span class="comment">// setting placeholders, tracking and un-tracking Targets, and obtaining View dimensions</span></span><br><span class="line">      <span class="comment">// that are done in the individual Request.</span></span><br><span class="line">      previous.begin();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> requestManager.clear(target);</span><br><span class="line"> target.setRequest(request);</span><br><span class="line"> requestManager.track(target, request);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会还是会来到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">into(<span class="meta">@NonNull</span> Y target,</span><br><span class="line">     <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span><br><span class="line">     BaseRequestOptions&lt;?&gt; options,</span><br><span class="line">     Executor callbackExecutor)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这个方法，我们一步一步分析</p><ol><li><p>首先，会判断前面是否调用过load()，因为只有调用了load()，isMolderSet才会为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="keyword">if</span> (!isModelSet) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;You must call #load() before calling #into()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保证调用顺序不发生错误</p></li><li><p>通过buildeRequest()构建了一个Request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line">...</span><br><span class="line">Request request = buildRequest(target, targetListener, options, callbackExecutor); </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那就先继续去看看buildRequest()</p></li></ol><h3 id="buildRequest"><a href="#buildRequest" class="headerlink" title="buildRequest()"></a>buildRequest()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">buildRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; requestOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> buildRequestRecursive(</span><br><span class="line">      <span class="comment">/*requestLock=*/</span> <span class="keyword">new</span> Object(),</span><br><span class="line">      target,</span><br><span class="line">      targetListener,</span><br><span class="line">      <span class="comment">/*parentCoordinator=*/</span> <span class="keyword">null</span>,</span><br><span class="line">      transitionOptions,</span><br><span class="line">      requestOptions.getPriority(),</span><br><span class="line">      requestOptions.getOverrideWidth(),</span><br><span class="line">      requestOptions.getOverrideHeight(),</span><br><span class="line">      requestOptions,</span><br><span class="line">      callbackExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BaseRequestOptions：是之前load()创建RequestBuilder时，调用的apply设置的一些默认参数</p><p>transitionOptions：用于设置加载完成时在资源上使用的转换的基类</p></blockquote><p>可以看到它又将参数和一些额外参数都传递进了buildRequestRecursive。到目前为止都还没有看到实际性的构建代码:sweat:，那就只能继续深入</p><h4 id="buildRequestRecursive"><a href="#buildRequestRecursive" class="headerlink" title="buildRequestRecursive()"></a>buildRequestRecursive()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">buildRequestRecursive</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Object requestLock,</span></span></span><br><span class="line"><span class="function"><span class="params">    Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestCoordinator parentCoordinator,</span></span></span><br><span class="line"><span class="function"><span class="params">    TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; requestOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Build the ErrorRequestCoordinator first if necessary so we can update parentCoordinator.</span></span><br><span class="line">  <span class="comment">// 错误请求协调者</span></span><br><span class="line">  ErrorRequestCoordinator errorRequestCoordinator = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (errorBuilder != <span class="keyword">null</span>) &#123;<span class="comment">// 如果没有设置错误后构建，那么是不会有errorBuilder</span></span><br><span class="line">    errorRequestCoordinator = <span class="keyword">new</span> ErrorRequestCoordinator(requestLock, parentCoordinator);<span class="comment">// 创建协调</span></span><br><span class="line">    parentCoordinator = errorRequestCoordinator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 构建主请求</span></span><br><span class="line">  Request mainRequest =</span><br><span class="line">      buildThumbnailRequestRecursive(</span><br><span class="line">          requestLock,</span><br><span class="line">          target,</span><br><span class="line">          targetListener,</span><br><span class="line">          parentCoordinator,</span><br><span class="line">          transitionOptions,</span><br><span class="line">          priority,</span><br><span class="line">          overrideWidth,</span><br><span class="line">          overrideHeight,</span><br><span class="line">          requestOptions,</span><br><span class="line">          callbackExecutor);</span><br><span class="line">  <span class="comment">// 如果没有设置errorBuilder，那么就会直接返回mainRequest</span></span><br><span class="line">  <span class="keyword">if</span> (errorRequestCoordinator == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mainRequest;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 下面为设置了error时，返回errorRequest</span></span><br><span class="line">  <span class="keyword">int</span> errorOverrideWidth = errorBuilder.getOverrideWidth();</span><br><span class="line">  <span class="keyword">int</span> errorOverrideHeight = errorBuilder.getOverrideHeight();</span><br><span class="line">  <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !errorBuilder.isValidOverride()) &#123;</span><br><span class="line">    errorOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class="line">    errorOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Request errorRequest =</span><br><span class="line">      errorBuilder.buildRequestRecursive(</span><br><span class="line">          requestLock,</span><br><span class="line">          target,</span><br><span class="line">          targetListener,</span><br><span class="line">          errorRequestCoordinator,</span><br><span class="line">          errorBuilder.transitionOptions,</span><br><span class="line">          errorBuilder.getPriority(),</span><br><span class="line">          errorOverrideWidth,</span><br><span class="line">          errorOverrideHeight,</span><br><span class="line">          errorBuilder,</span><br><span class="line">          callbackExecutor);</span><br><span class="line">    <span class="comment">//将两个请求都放入协调中</span></span><br><span class="line">  errorRequestCoordinator.setRequests(mainRequest, errorRequest);</span><br><span class="line">  <span class="keyword">return</span> errorRequestCoordinator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ErrorRequestCoordinator：为协调器，目的是可以让errorRequest和mainRequest一起工作</p></blockquote><p>关于errorBuilder的这行代码，如果没有设置在主请求失败时开始新的请求（如下设置），那么是不会走最后去递归构建错误请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置在主请求失败时开始新的请求</span></span><br><span class="line">Glide.with(<span class="keyword">this</span>).load(url).error(Glide.with(<span class="keyword">this</span>).load(url)).into(imageView);</span><br></pre></td></tr></table></figure><p>所以我们先看一下没有设置erro的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#buildRequestRecursive</span><br><span class="line">Request mainRequest =</span><br><span class="line">    buildThumbnailRequestRecursive(</span><br><span class="line">        requestLock,</span><br><span class="line">        target,</span><br><span class="line">        targetListener,</span><br><span class="line">        parentCoordinator,</span><br><span class="line">        transitionOptions,</span><br><span class="line">        priority,</span><br><span class="line">        overrideWidth,</span><br><span class="line">        overrideHeight,</span><br><span class="line">        requestOptions,</span><br><span class="line">        callbackExecutor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errorRequestCoordinator == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> mainRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如果没有设置error，那么errorRequestCoordinator一定会为空，所以就到此为止返回一个buildThumbnailRequestRecursive出去。那么继续</p><h4 id="buildThumbnailRequestRecursive"><a href="#buildThumbnailRequestRecursive" class="headerlink" title="buildThumbnailRequestRecursive()"></a>buildThumbnailRequestRecursive()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">buildThumbnailRequestRecursive</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Object requestLock,</span></span></span><br><span class="line"><span class="function"><span class="params">    Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">    RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestCoordinator parentCoordinator,</span></span></span><br><span class="line"><span class="function"><span class="params">    TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; requestOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有设置缩略图，那么thumbnailBuilder为空</span></span><br><span class="line">  <span class="keyword">if</span> (thumbnailBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Recursive case: contains a potentially recursive thumbnail request builder.</span></span><br><span class="line">    <span class="keyword">if</span> (isThumbnailBuilt) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">          <span class="string">&quot;You cannot use a request as both the main request and a &quot;</span> + <span class="string">&quot;thumbnail, consider using clone() on the request(s) passed to thumbnail()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; thumbTransitionOptions =</span><br><span class="line">        thumbnailBuilder.transitionOptions;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply our transition by default to thumbnail requests but avoid overriding custom options</span></span><br><span class="line">    <span class="comment">// that may have been applied on the thumbnail request explicitly.</span></span><br><span class="line">    <span class="keyword">if</span> (thumbnailBuilder.isDefaultTransitionOptionsSet) &#123;</span><br><span class="line">      thumbTransitionOptions = transitionOptions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Priority thumbPriority =</span><br><span class="line">        thumbnailBuilder.isPrioritySet()</span><br><span class="line">            ? thumbnailBuilder.getPriority()</span><br><span class="line">            : getThumbnailPriority(priority);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> thumbOverrideWidth = thumbnailBuilder.getOverrideWidth();</span><br><span class="line">    <span class="keyword">int</span> thumbOverrideHeight = thumbnailBuilder.getOverrideHeight();</span><br><span class="line">      <span class="comment">// 判断是否设置了override</span></span><br><span class="line">    <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)</span><br><span class="line">        &amp;&amp; !thumbnailBuilder.isValidOverride()) &#123;</span><br><span class="line">      thumbOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class="line">      thumbOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 缩略图协调器</span></span><br><span class="line">    ThumbnailRequestCoordinator coordinator =</span><br><span class="line">        <span class="keyword">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class="line">    <span class="comment">// 构建原图</span></span><br><span class="line">    Request fullRequest =</span><br><span class="line">        obtainRequest(</span><br><span class="line">            requestLock,</span><br><span class="line">            target,</span><br><span class="line">            targetListener,</span><br><span class="line">            requestOptions,</span><br><span class="line">            coordinator,</span><br><span class="line">            transitionOptions,</span><br><span class="line">            priority,</span><br><span class="line">            overrideWidth,</span><br><span class="line">            overrideHeight,</span><br><span class="line">            callbackExecutor);</span><br><span class="line">    isThumbnailBuilt = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// Recursively generate thumbnail requests.</span></span><br><span class="line">    <span class="comment">// 构建缩略图</span></span><br><span class="line">    Request thumbRequest =</span><br><span class="line">        thumbnailBuilder.buildRequestRecursive(</span><br><span class="line">            requestLock,</span><br><span class="line">            target,</span><br><span class="line">            targetListener,</span><br><span class="line">            coordinator,</span><br><span class="line">            thumbTransitionOptions,</span><br><span class="line">            thumbPriority,</span><br><span class="line">            thumbOverrideWidth,</span><br><span class="line">            thumbOverrideHeight,</span><br><span class="line">            thumbnailBuilder,</span><br><span class="line">            callbackExecutor);</span><br><span class="line">    isThumbnailBuilt = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 都添加到协调器中去</span></span><br><span class="line">    coordinator.setRequests(fullRequest, thumbRequest);</span><br><span class="line">    <span class="keyword">return</span> coordinator;</span><br><span class="line">      <span class="comment">// thumbSizeMultiplier缩放比例，没有设置也是为空</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (thumbSizeMultiplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Base case: thumbnail multiplier generates a thumbnail request, but cannot recurse.</span></span><br><span class="line">    ThumbnailRequestCoordinator coordinator =</span><br><span class="line">        <span class="keyword">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class="line">    Request fullRequest =</span><br><span class="line">        obtainRequest(</span><br><span class="line">            requestLock,</span><br><span class="line">            target,</span><br><span class="line">            targetListener,</span><br><span class="line">            requestOptions,</span><br><span class="line">            coordinator,</span><br><span class="line">            transitionOptions,</span><br><span class="line">            priority,</span><br><span class="line">            overrideWidth,</span><br><span class="line">            overrideHeight,</span><br><span class="line">            callbackExecutor);</span><br><span class="line">    BaseRequestOptions&lt;?&gt; thumbnailOptions =</span><br><span class="line">        requestOptions.clone().sizeMultiplier(thumbSizeMultiplier);</span><br><span class="line"></span><br><span class="line">    Request thumbnailRequest =</span><br><span class="line">        obtainRequest(</span><br><span class="line">            requestLock,</span><br><span class="line">            target,</span><br><span class="line">            targetListener,</span><br><span class="line">            thumbnailOptions,</span><br><span class="line">            coordinator,</span><br><span class="line">            transitionOptions,</span><br><span class="line">            getThumbnailPriority(priority),</span><br><span class="line">            overrideWidth,</span><br><span class="line">            overrideHeight,</span><br><span class="line">            callbackExecutor);</span><br><span class="line"></span><br><span class="line">    coordinator.setRequests(fullRequest, thumbnailRequest);</span><br><span class="line">    <span class="keyword">return</span> coordinator;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 主请求</span></span><br><span class="line">    <span class="keyword">return</span> obtainRequest(</span><br><span class="line">        requestLock,</span><br><span class="line">        target,</span><br><span class="line">        targetListener,</span><br><span class="line">        requestOptions,</span><br><span class="line">        parentCoordinator,</span><br><span class="line">        transitionOptions,</span><br><span class="line">        priority,</span><br><span class="line">        overrideWidth,</span><br><span class="line">        overrideHeight,</span><br><span class="line">        callbackExecutor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“代码很长，你忍耐一下”条主要的分析把:collision:</p><p>这里有些地方和上面的error有点类似，比如说一开始就判断thumbnailBuilder 是否为空</p><blockquote><p>thumbnailBuilder 也和error一样，只有设置了缩略图才会不为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>).load(url).thumbnail(Glide.with(<span class="keyword">this</span>).load(thumbnailUrl)).into(imageView);</span><br></pre></td></tr></table></figure><p>thumbSizeMultiplier：不为空，说明设置了缩放比例（如下设置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>).load(url).thumbnail(<span class="number">0.5f</span>).into(imageView);</span><br></pre></td></tr></table></figure></blockquote><p>这里就先不去理分支了，先直接看获取原图。(套不下去了，太深了)可以看到，如果没有设置缩略图和缩略比例，那么就只会调用obtainRequest()</p><h4 id="obtainRequest"><a href="#obtainRequest" class="headerlink" title="obtainRequest()"></a>obtainRequest()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">obtainRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Object requestLock,</span></span></span><br><span class="line"><span class="function"><span class="params">    Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">    RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; requestOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    RequestCoordinator requestCoordinator,</span></span></span><br><span class="line"><span class="function"><span class="params">    TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> SingleRequest.obtain(</span><br><span class="line">      context,</span><br><span class="line">      glideContext,</span><br><span class="line">      requestLock,</span><br><span class="line">      model,</span><br><span class="line">      transcodeClass,</span><br><span class="line">      requestOptions,</span><br><span class="line">      overrideWidth,</span><br><span class="line">      overrideHeight,</span><br><span class="line">      priority,</span><br><span class="line">      target,</span><br><span class="line">      targetListener,</span><br><span class="line">      requestListeners,</span><br><span class="line">      requestCoordinator,</span><br><span class="line">      glideContext.getEngine(),</span><br><span class="line">      transitionOptions.getTransitionFactory(),</span><br><span class="line">      callbackExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SingleRequest"><a href="#SingleRequest" class="headerlink" title="SingleRequest"></a>SingleRequest</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#SingleRequest</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">SingleRequest&lt;R&gt; <span class="title">obtain</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">    GlideContext glideContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object requestLock,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object model,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; requestOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    Target&lt;R&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">    RequestListener&lt;R&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> List&lt;RequestListener&lt;R&gt;&gt; requestListeners,</span></span></span><br><span class="line"><span class="function"><span class="params">    RequestCoordinator requestCoordinator,</span></span></span><br><span class="line"><span class="function"><span class="params">    Engine engine,</span></span></span><br><span class="line"><span class="function"><span class="params">    TransitionFactory&lt;? <span class="keyword">super</span> R&gt; animationFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SingleRequest&lt;&gt;(</span><br><span class="line">      context,</span><br><span class="line">      glideContext,</span><br><span class="line">      requestLock,</span><br><span class="line">      model,</span><br><span class="line">      transcodeClass,</span><br><span class="line">      requestOptions,</span><br><span class="line">      overrideWidth,</span><br><span class="line">      overrideHeight,</span><br><span class="line">      priority,</span><br><span class="line">      target,</span><br><span class="line">      targetListener,</span><br><span class="line">      requestListeners,</span><br><span class="line">      requestCoordinator,</span><br><span class="line">      engine,</span><br><span class="line">      animationFactory,</span><br><span class="line">      callbackExecutor);</span><br><span class="line">&#125;</span><br><span class="line">---分割---</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">    GlideContext glideContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Object requestLock,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> Object model,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; requestOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> overrideHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    Target&lt;R&gt; target,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestListener&lt;R&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> List&lt;RequestListener&lt;R&gt;&gt; requestListeners,</span></span></span><br><span class="line"><span class="function"><span class="params">    RequestCoordinator requestCoordinator,</span></span></span><br><span class="line"><span class="function"><span class="params">    Engine engine,</span></span></span><br><span class="line"><span class="function"><span class="params">    TransitionFactory&lt;? <span class="keyword">super</span> R&gt; animationFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将传入进来的参数都赋值给成员变量</span></span><br><span class="line">  <span class="keyword">this</span>.requestLock = requestLock;</span><br><span class="line">  <span class="keyword">this</span>.context = context;</span><br><span class="line">  <span class="keyword">this</span>.glideContext = glideContext;</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  <span class="keyword">this</span>.transcodeClass = transcodeClass;</span><br><span class="line">  <span class="keyword">this</span>.requestOptions = requestOptions;</span><br><span class="line">  <span class="keyword">this</span>.overrideWidth = overrideWidth;</span><br><span class="line">  <span class="keyword">this</span>.overrideHeight = overrideHeight;</span><br><span class="line">  <span class="keyword">this</span>.priority = priority;</span><br><span class="line">  <span class="keyword">this</span>.target = target;</span><br><span class="line">  <span class="keyword">this</span>.targetListener = targetListener;</span><br><span class="line">  <span class="keyword">this</span>.requestListeners = requestListeners;</span><br><span class="line">  <span class="keyword">this</span>.requestCoordinator = requestCoordinator;</span><br><span class="line">  <span class="keyword">this</span>.engine = engine;</span><br><span class="line">  <span class="keyword">this</span>.animationFactory = animationFactory;</span><br><span class="line">  <span class="keyword">this</span>.callbackExecutor = callbackExecutor;</span><br><span class="line">  status = Status.PENDING;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (requestOrigin == <span class="keyword">null</span> &amp;&amp; glideContext.getExperiments().isEnabled(LogRequestOrigins.class)) &#123;</span><br><span class="line">    requestOrigin = <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Glide request origin trace&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泪目，终于到头了:cry:这里也是将参数传递进去，最终构建了一个SingleRequest出来。可是我们一开始不是要的是Request吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleRequest</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Request</span>, <span class="title">SizeReadyCallback</span>, <span class="title">ResourceCallback</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>SingleRequest是Request的具体实现</p><p>回到开头，现在Request有了，最上面的代码中还有一个地方没处理，那就是track()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="keyword">private</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Y target,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span></span></span><br><span class="line"><span class="function"><span class="params">    BaseRequestOptions&lt;?&gt; options,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  Request request = buildRequest(target, targetListener, options, callbackExecutor);</span><br><span class="line">  ...</span><br><span class="line">  Request previous = target.getRequest();</span><br><span class="line"></span><br><span class="line">  requestManager.clear(target);</span><br><span class="line">  target.setRequest(request);</span><br><span class="line">  requestManager.track(target, request);<span class="comment">// 《--这里</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="track"><a href="#track" class="headerlink" title="track()"></a>track()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#RequestManager</span><br><span class="line"><span class="meta">@GuardedBy(&quot;this&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TargetTracker targetTracker = <span class="keyword">new</span> TargetTracker();</span><br><span class="line"></span><br><span class="line"><span class="meta">@GuardedBy(&quot;this&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RequestTracker requestTracker;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">track</span><span class="params">(<span class="meta">@NonNull</span> Target&lt;?&gt; target, <span class="meta">@NonNull</span> Request request)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将一个 target 加入 Set 集合中</span></span><br><span class="line">  targetTracker.track(target);</span><br><span class="line">    </span><br><span class="line">  requestTracker.runRequest(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，就是将传入进来的Target加入到TargetTracker里去，再调用requestTracker.runRequest()来运行Request</p><h4 id="TargetTracker"><a href="#TargetTracker" class="headerlink" title="TargetTracker"></a>TargetTracker</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetTracker</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Target&lt;?&gt;&gt; targets =</span><br><span class="line">      Collections.newSetFromMap(<span class="keyword">new</span> WeakHashMap&lt;Target&lt;?&gt;, Boolean&gt;());</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">track</span><span class="params">(<span class="meta">@NonNull</span> Target&lt;?&gt; target)</span> </span>&#123;</span><br><span class="line">    targets.add(target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">untrack</span><span class="params">(<span class="meta">@NonNull</span> Target&lt;?&gt; target)</span> </span>&#123;</span><br><span class="line">    targets.remove(target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Target&lt;?&gt; target : Util.getSnapshot(targets)) &#123;</span><br><span class="line">      target.onStart();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Target&lt;?&gt; target : Util.getSnapshot(targets)) &#123;</span><br><span class="line">      target.onStop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Target&lt;?&gt; target : Util.getSnapshot(targets)) &#123;</span><br><span class="line">      target.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Target&lt;?&gt;&gt; getAll() &#123;</span><br><span class="line">    <span class="keyword">return</span> Util.getSnapshot(targets);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    targets.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TargetTracker看起来还是比较简单的，track()就是将Target加入一个Set集合中去，其余的操作都是对Set集合中的数据进行遍历操作</p><blockquote><p> Collections.newSetFromMap()：JDK1.6开始提供的，用于将生成的Map包装成Set，这样这个Set和被包装的Map拥有相同的key顺序。简单来说就是你可以使用这个工厂类来包装WeakHashMap来生成一个WeakHashSet，因为没有WeakHashSet这个现成的类可用</p></blockquote><h4 id="RequestTracker"><a href="#RequestTracker" class="headerlink" title="RequestTracker"></a>RequestTracker</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTracker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;RequestTracker&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Request&gt; requests =</span><br><span class="line">      Collections.newSetFromMap(<span class="keyword">new</span> WeakHashMap&lt;Request, Boolean&gt;());</span><br><span class="line">  <span class="comment">// A set of requests that have not completed and are queued to be run again. We use this list to</span></span><br><span class="line">  <span class="comment">// maintain hard references to these requests to ensure that they are not garbage collected</span></span><br><span class="line">  <span class="comment">// before they start running or while they are paused. See #346.</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Request&gt; pendingRequests = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isPaused;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Starts tracking the given request. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRequest</span><span class="params">(<span class="meta">@NonNull</span> Request request)</span> </span>&#123;</span><br><span class="line">    requests.add(request);</span><br><span class="line">    <span class="keyword">if</span> (!isPaused) &#123;</span><br><span class="line">      request.begin();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      request.clear();</span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        Log.v(TAG, <span class="string">&quot;Paused, delaying request&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      pendingRequests.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RequestTracker.runRequest()</code>也还是蛮简单的，一开始也是将<code>request</code>添加到Set集合里去，之后再判断当前是否处于停止状态，是则清空请求，否则开始请求</p><p>我们继续深入一下<code>RequestTracker</code>，查看一下<code>RequestTracker.begin()</code>，由于begin是一个接口，<code>SingleRequest</code>又是<code>Request</code>的具体实现，那我们相当于是去看一下<code>SingleRequest.begin()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#SingleRequest</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (requestLock) &#123;</span><br><span class="line">    assertNotCallingCallbacks();</span><br><span class="line">    stateVerifier.throwIfRecycled();</span><br><span class="line">    startTime = LogTime.getLogTime();</span><br><span class="line">    <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;<span class="comment">// 判断图片资源是否为空</span></span><br><span class="line">      <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;<span class="comment">// 判断是否设置了ovreeide</span></span><br><span class="line">        width = overrideWidth;</span><br><span class="line">        height = overrideHeight;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Only log at more verbose log levels if the user has set a fallback drawable, because</span></span><br><span class="line">      <span class="comment">// fallback Drawables indicate the user expects null models occasionally.</span></span><br><span class="line">      <span class="keyword">int</span> logLevel = getFallbackDrawable() == <span class="keyword">null</span> ? Log.WARN : Log.DEBUG;</span><br><span class="line">      onLoadFailed(<span class="keyword">new</span> GlideException(<span class="string">&quot;Received null model&quot;</span>), logLevel);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status == Status.RUNNING) &#123;<span class="comment">// 判断当前状态是否处于运行状态</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot restart a running request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we&#x27;re restarted after we&#x27;re complete (usually via something like a notifyDataSetChanged</span></span><br><span class="line">    <span class="comment">// that starts an identical request into the same Target or View), we can simply use the</span></span><br><span class="line">    <span class="comment">// resource and size we retrieved the last time around and skip obtaining a new size, starting</span></span><br><span class="line">    <span class="comment">// a new load etc. This does mean that users who want to restart a load because they expect</span></span><br><span class="line">    <span class="comment">// that the view size has changed will need to explicitly clear the View or Target before</span></span><br><span class="line">    <span class="comment">// starting the new load.</span></span><br><span class="line">    <span class="keyword">if</span> (status == Status.COMPLETE) &#123;</span><br><span class="line">      onResourceReady(</span><br><span class="line">          resource, DataSource.MEMORY_CACHE, <span class="comment">/* isLoadedFromAlternateCacheKey= */</span> <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Restarts for requests that are neither complete nor running can be treated as new requests</span></span><br><span class="line">    <span class="comment">// and can run again from the beginning.</span></span><br><span class="line"></span><br><span class="line">    cookie = GlideTrace.beginSectionAsync(TAG);</span><br><span class="line">    status = Status.WAITING_FOR_SIZE;<span class="comment">// 等待尺寸状态</span></span><br><span class="line">    <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class="line">      onSizeReady(overrideWidth, overrideHeight);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target.getSize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE)</span><br><span class="line">        &amp;&amp; canNotifyStatusChanged()) &#123;</span><br><span class="line">      target.onLoadStarted(getPlaceholderDrawable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">&quot;finished run method in &quot;</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>先判断CallingCallbacks()是否为空</p></li><li><p>再判断加载资源是否为空，空的话则调用加载失败的回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#SingleRequest</span><br><span class="line"><span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否设置了override</span></span><br><span class="line">        <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class="line">          width = overrideWidth;</span><br><span class="line">          height = overrideHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果用户设置了回调Drawables，则只在更详细的日志级别进行日志记录，因为回调Drawables表明用户偶尔期望空模型。</span></span><br><span class="line">        <span class="keyword">int</span> logLevel = getFallbackDrawable() == <span class="keyword">null</span> ? Log.WARN : Log.DEBUG;</span><br><span class="line">        onLoadFailed(<span class="keyword">new</span> GlideException(<span class="string">&quot;Received null model&quot;</span>), logLevel);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>其次再判断当前的状态，是否在运行中，是否完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">#SingleRequest</span><br><span class="line"> <span class="keyword">if</span> (status == Status.RUNNING) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot restart a running request&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If we&#x27;re restarted after we&#x27;re complete (usually via something like a notifyDataSetChanged</span></span><br><span class="line">      <span class="comment">// that starts an identical request into the same Target or View), we can simply use the</span></span><br><span class="line">      <span class="comment">// resource and size we retrieved the last time around and skip obtaining a new size, starting</span></span><br><span class="line">      <span class="comment">// a new load etc. This does mean that users who want to restart a load because they expect</span></span><br><span class="line">      <span class="comment">// that the view size has changed will need to explicitly clear the View or Target before</span></span><br><span class="line">      <span class="comment">// starting the new load.</span></span><br><span class="line"><span class="keyword">if</span> (status == Status.COMPLETE) &#123;</span><br><span class="line">    <span class="comment">//调用资源加载完成</span></span><br><span class="line">    onResourceReady(</span><br><span class="line">    resource, DataSource.MEMORY_CACHE, <span class="comment">/* isLoadedFromAlternateCacheKey= */</span> <span class="keyword">false</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>接下来就是判断是否设置了overrideWidth、overrideHeight</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#SingleRequest</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class="line">  onSizeReady(overrideWidth, overrideHeight);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  target.getSize(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果设置了overrideWidth、overrideHeight，则会直接调用onSizeRead()，否则的话，会调用getSize()</p><blockquote><p>设置override</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置加载图片的宽高为 100x100 px</span></span><br><span class="line">Glide.with(<span class="keyword">this</span>).load(url).override(<span class="number">100</span>,<span class="number">100</span>).into(imageView);</span><br></pre></td></tr></table></figure></blockquote><p>那就继续看一下getSize()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Target</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span>&lt;<span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(<span class="meta">@NonNull</span> SizeReadyCallback cb)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">---分割---</span><br><span class="line">#SizeReadyCallback</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SizeReadyCallback</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSizeReady</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getSize()内部是通过ViewTreeObserver来监听ImageView的高宽，最终也还是调用onSizeReady()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#SingleRequest</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSizeReady</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">  stateVerifier.throwIfRecycled();</span><br><span class="line">  <span class="keyword">synchronized</span> (requestLock) &#123;<span class="comment">// 同步锁</span></span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">&quot;Got onSizeReady in &quot;</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status != Status.WAITING_FOR_SIZE) &#123;<span class="comment">// 如果状态不是等待，就直接跳出</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    status = Status.RUNNING;<span class="comment">// 设置状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> sizeMultiplier = requestOptions.getSizeMultiplier();<span class="comment">// 从配置信息中获取缩略比例</span></span><br><span class="line">    <span class="keyword">this</span>.width = maybeApplySizeMultiplier(width, sizeMultiplier);<span class="comment">// 根据缩放比例来获取宽度</span></span><br><span class="line">    <span class="keyword">this</span>.height = maybeApplySizeMultiplier(height, sizeMultiplier);<span class="comment">// 根据缩放比例来获取高度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">&quot;finished setup for calling load in &quot;</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开始加载</span></span><br><span class="line">    loadStatus =</span><br><span class="line">        engine.load(</span><br><span class="line">            glideContext,</span><br><span class="line">            model,</span><br><span class="line">            requestOptions.getSignature(),</span><br><span class="line">            <span class="keyword">this</span>.width,</span><br><span class="line">            <span class="keyword">this</span>.height,</span><br><span class="line">            requestOptions.getResourceClass(),</span><br><span class="line">            transcodeClass,</span><br><span class="line">            priority,</span><br><span class="line">            requestOptions.getDiskCacheStrategy(),</span><br><span class="line">            requestOptions.getTransformations(),</span><br><span class="line">            requestOptions.isTransformationRequired(),</span><br><span class="line">            requestOptions.isScaleOnlyOrNoTransform(),</span><br><span class="line">            requestOptions.getOptions(),</span><br><span class="line">            requestOptions.isMemoryCacheable(),</span><br><span class="line">            requestOptions.getUseUnlimitedSourceGeneratorsPool(),</span><br><span class="line">            requestOptions.getUseAnimationPool(),</span><br><span class="line">            requestOptions.getOnlyRetrieveFromCache(),</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            callbackExecutor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is a hack that&#x27;s only useful for testing right now where loads complete synchronously</span></span><br><span class="line">    <span class="comment">// even though under any executor running on any thread but the main thread, the load would</span></span><br><span class="line">    <span class="comment">// have completed asynchronously.</span></span><br><span class="line">    <span class="keyword">if</span> (status != Status.RUNNING) &#123;</span><br><span class="line">      loadStatus = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">&quot;finished onSizeReady in &quot;</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先将状态设置为运行中</p></li><li><p>再根据缩略比例来获取图片高宽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#onSizeReady</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 根据缩略比例获取图片宽高</span></span><br><span class="line"><span class="keyword">float</span> sizeMultiplier = requestOptions.getSizeMultiplier();</span><br><span class="line"><span class="keyword">this</span>.width = maybeApplySizeMultiplier(width, sizeMultiplier);</span><br><span class="line"><span class="keyword">this</span>.height = maybeApplySizeMultiplier(height, sizeMultiplier);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>最后调用engine.load()进行加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#onSizeReady</span><br><span class="line">...</span><br><span class="line">loadStatus =</span><br><span class="line">      engine.load(</span><br><span class="line">          glideContext,</span><br><span class="line">          model,</span><br><span class="line">          requestOptions.getSignature(),</span><br><span class="line">          <span class="keyword">this</span>.width,</span><br><span class="line">          <span class="keyword">this</span>.height,</span><br><span class="line">          requestOptions.getResourceClass(),</span><br><span class="line">          transcodeClass,</span><br><span class="line">          priority,</span><br><span class="line">          requestOptions.getDiskCacheStrategy(),</span><br><span class="line">          requestOptions.getTransformations(),</span><br><span class="line">          requestOptions.isTransformationRequired(),</span><br><span class="line">          requestOptions.isScaleOnlyOrNoTransform(),</span><br><span class="line">          requestOptions.getOptions(),</span><br><span class="line">          requestOptions.isMemoryCacheable(),</span><br><span class="line">          requestOptions.getUseUnlimitedSourceGeneratorsPool(),</span><br><span class="line">          requestOptions.getUseAnimationPool(),</span><br><span class="line">          requestOptions.getOnlyRetrieveFromCache(),</span><br><span class="line">          <span class="keyword">this</span>,</span><br><span class="line">          callbackExecutor);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里着重关注<code>engine.load()</code>方法，可以猜测为正在加载的部分</p></li></ol></li></ol><h3 id="Engine-load"><a href="#Engine-load" class="headerlink" title="Engine.load()"></a>Engine.load()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#Engine</span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    GlideContext glideContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object model,// 图片加载资源</span></span></span><br><span class="line"><span class="function"><span class="params">    Key signature,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;?&gt; resourceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    DiskCacheStrategy diskCacheStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">    Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isTransformationRequired,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isScaleOnlyOrNoTransform,</span></span></span><br><span class="line"><span class="function"><span class="params">    Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isMemoryCacheable,// 是否使用内存缓存</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> useAnimationPool,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> onlyRetrieveFromCache,</span></span></span><br><span class="line"><span class="function"><span class="params">    ResourceCallback cb,// 回调</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  EngineKey key =</span><br><span class="line">      keyFactory.buildKey(</span><br><span class="line">          model,</span><br><span class="line">          signature,</span><br><span class="line">          width,</span><br><span class="line">          height,</span><br><span class="line">          transformations,</span><br><span class="line">          resourceClass,</span><br><span class="line">          transcodeClass,</span><br><span class="line">          options);</span><br><span class="line"></span><br><span class="line">  EngineResource&lt;?&gt; memoryResource; <span class="comment">// 内存资源</span></span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// 从内存中获取</span></span><br><span class="line">    memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memoryResource == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> waitForExistingOrStartNewJob(</span><br><span class="line">          glideContext,</span><br><span class="line">          model,</span><br><span class="line">          signature,</span><br><span class="line">          width,</span><br><span class="line">          height,</span><br><span class="line">          resourceClass,</span><br><span class="line">          transcodeClass,</span><br><span class="line">          priority,</span><br><span class="line">          diskCacheStrategy,</span><br><span class="line">          transformations,</span><br><span class="line">          isTransformationRequired,</span><br><span class="line">          isScaleOnlyOrNoTransform,</span><br><span class="line">          options,</span><br><span class="line">          isMemoryCacheable,</span><br><span class="line">          useUnlimitedSourceExecutorPool,</span><br><span class="line">          useAnimationPool,</span><br><span class="line">          onlyRetrieveFromCache,</span><br><span class="line">          cb,</span><br><span class="line">          callbackExecutor,</span><br><span class="line">          key,</span><br><span class="line">          startTime);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Avoid calling back while holding the engine lock, doing so makes it easier for callers to</span></span><br><span class="line">  <span class="comment">// deadlock.</span></span><br><span class="line">  cb.onResourceReady(</span><br><span class="line">      memoryResource, DataSource.MEMORY_CACHE, <span class="comment">/* isLoadedFromAlternateCacheKey= */</span> <span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码做了4件事情</p><ol><li><p>使用参数构建了个EngineKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//load</span></span><br><span class="line">EngineKey key =</span><br><span class="line">    keyFactory.buildKey(</span><br><span class="line">        model,</span><br><span class="line">        signature,</span><br><span class="line">        width,</span><br><span class="line">        height,</span><br><span class="line">        transformations,</span><br><span class="line">        resourceClass,</span><br><span class="line">        transcodeClass,</span><br><span class="line">        options);</span><br></pre></td></tr></table></figure></li><li><p>使用EngineKey去获取缓存中的资源，先从内存中进行获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//load</span></span><br><span class="line">memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);</span><br></pre></td></tr></table></figure></li><li><p>如果获取不到，则等待或新开启一个EngineJob</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//load</span></span><br><span class="line"><span class="keyword">if</span> (memoryResource == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> waitForExistingOrStartNewJob(</span><br><span class="line">      glideContext,</span><br><span class="line">      model,</span><br><span class="line">      signature,</span><br><span class="line">      width,</span><br><span class="line">      height,</span><br><span class="line">      resourceClass,</span><br><span class="line">      transcodeClass,</span><br><span class="line">      priority,</span><br><span class="line">      diskCacheStrategy,</span><br><span class="line">      transformations,</span><br><span class="line">      isTransformationRequired,</span><br><span class="line">      isScaleOnlyOrNoTransform,</span><br><span class="line">      options,</span><br><span class="line">      isMemoryCacheable,</span><br><span class="line">      useUnlimitedSourceExecutorPool,</span><br><span class="line">      useAnimationPool,</span><br><span class="line">      onlyRetrieveFromCache,</span><br><span class="line">      cb,</span><br><span class="line">      callbackExecutor,</span><br><span class="line">      key,</span><br><span class="line">      startTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果获取成功，则调用加载成功的回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//load</span></span><br><span class="line">cb.onResourceReady(</span><br><span class="line">        memoryResource, DataSource.MEMORY_CACHE, <span class="comment">/* isLoadedFromAlternateCacheKey= */</span> <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li></ol><p>接下来先不讲解缓存，先继续将主要流程，缓存将再下面部分再进行讲解</p><h4 id="waitForExistingOrStartNewJob"><a href="#waitForExistingOrStartNewJob" class="headerlink" title="waitForExistingOrStartNewJob"></a>waitForExistingOrStartNewJob</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#Engine</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Jobs jobs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;R&gt; <span class="function">LoadStatus <span class="title">waitForExistingOrStartNewJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    GlideContext glideContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object model,</span></span></span><br><span class="line"><span class="function"><span class="params">    Key signature,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;?&gt; resourceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="function"><span class="params">    Priority priority,</span></span></span><br><span class="line"><span class="function"><span class="params">    DiskCacheStrategy diskCacheStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">    Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isTransformationRequired,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isScaleOnlyOrNoTransform,</span></span></span><br><span class="line"><span class="function"><span class="params">    Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> isMemoryCacheable,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> useAnimationPool,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> onlyRetrieveFromCache,</span></span></span><br><span class="line"><span class="function"><span class="params">    ResourceCallback cb,</span></span></span><br><span class="line"><span class="function"><span class="params">    Executor callbackExecutor,</span></span></span><br><span class="line"><span class="function"><span class="params">    EngineKey key,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> startTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  EngineJob&lt;?&gt; current = jobs.get(key, onlyRetrieveFromCache);</span><br><span class="line">  <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">    current.addCallback(cb, callbackExecutor);</span><br><span class="line">    <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">&quot;Added to existing load&quot;</span>, startTime, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  EngineJob&lt;R&gt; engineJob =</span><br><span class="line">      engineJobFactory.build(</span><br><span class="line">          key,</span><br><span class="line">          isMemoryCacheable,</span><br><span class="line">          useUnlimitedSourceExecutorPool,</span><br><span class="line">          useAnimationPool,</span><br><span class="line">          onlyRetrieveFromCache);</span><br><span class="line"></span><br><span class="line">  DecodeJob&lt;R&gt; decodeJob =</span><br><span class="line">      decodeJobFactory.build(</span><br><span class="line">          glideContext,</span><br><span class="line">          model,</span><br><span class="line">          key,</span><br><span class="line">          signature,</span><br><span class="line">          width,</span><br><span class="line">          height,</span><br><span class="line">          resourceClass,</span><br><span class="line">          transcodeClass,</span><br><span class="line">          priority,</span><br><span class="line">          diskCacheStrategy,</span><br><span class="line">          transformations,</span><br><span class="line">          isTransformationRequired,</span><br><span class="line">          isScaleOnlyOrNoTransform,</span><br><span class="line">          onlyRetrieveFromCache,</span><br><span class="line">          options,</span><br><span class="line">          engineJob);</span><br><span class="line"></span><br><span class="line">  jobs.put(key, engineJob);</span><br><span class="line"></span><br><span class="line">  engineJob.addCallback(cb, callbackExecutor);</span><br><span class="line">  engineJob.start(decodeJob);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">    logWithTimeAndKey(<span class="string">&quot;Started new load&quot;</span>, startTime, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>waitForExistingOrStartNewJob()做了6件事情</p><ol><li><p>从成员变量jobs中获取EngineJob，如果获取不为空，则表示当前有正在执行的EngineJob，给EngineJob添加回调并返回新创建的LoadStatus()加载状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitForExistingOrStartNewJob</span></span><br><span class="line">EngineJob&lt;?&gt; current = jobs.get(key, onlyRetrieveFromCache);</span><br><span class="line"><span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;<span class="comment">// 获取不为空的话，设置回调</span></span><br><span class="line">  current.addCallback(cb, callbackExecutor);</span><br><span class="line">  <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">    logWithTimeAndKey(<span class="string">&quot;Added to existing load&quot;</span>, startTime, key);</span><br><span class="line">  &#125;<span class="comment">//并返回加载状态</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取为空的话，则通过EngineJob工厂类来创建EngineJob。该类主要用来管理加载以及当加载完成时通知回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitForExistingOrStartNewJob</span></span><br><span class="line">EngineJob&lt;R&gt; engineJob =</span><br><span class="line">    engineJobFactory.build(</span><br><span class="line">        key,</span><br><span class="line">        isMemoryCacheable,<span class="comment">// 是否使用内存缓存</span></span><br><span class="line">        useUnlimitedSourceExecutorPool,<span class="comment">// 是否使用无限制的资源执行池</span></span><br><span class="line">        useAnimationPool,<span class="comment">// 是否使用动画池</span></span><br><span class="line">        onlyRetrieveFromCache);</span><br></pre></td></tr></table></figure></li><li><p>使用DecodeJob工厂类来创建DecodeJob。该类主要负责图片的解码，实现了 Runnable 接口，属于一个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitForExistingOrStartNewJob</span></span><br><span class="line">DecodeJob&lt;R&gt; decodeJob =</span><br><span class="line">    decodeJobFactory.build(</span><br><span class="line">        glideContext,</span><br><span class="line">        model,</span><br><span class="line">        key,</span><br><span class="line">        signature,</span><br><span class="line">        width,</span><br><span class="line">        height,</span><br><span class="line">        resourceClass,</span><br><span class="line">        transcodeClass,</span><br><span class="line">        priority,</span><br><span class="line">        diskCacheStrategy,</span><br><span class="line">        transformations,</span><br><span class="line">        isTransformationRequired,</span><br><span class="line">        isScaleOnlyOrNoTransform,</span><br><span class="line">        onlyRetrieveFromCache,</span><br><span class="line">        options,</span><br><span class="line">        engineJob);</span><br></pre></td></tr></table></figure></li><li><p>将新创建的EngineJob添加到成员变量jobs中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitForExistingOrStartNewJob</span></span><br><span class="line">jobs.put(key, engineJob);</span><br></pre></td></tr></table></figure></li><li><p>给新创建的EngineJob添加上回调并调用start()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitForExistingOrStartNewJob</span></span><br><span class="line">engineJob.addCallback(cb, callbackExecutor);</span><br><span class="line">engineJob.start(decodeJob);</span><br></pre></td></tr></table></figure></li><li><p>返回加载状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitForExistingOrStartNewJob</span></span><br><span class="line"><span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">  logWithTimeAndKey(<span class="string">&quot;Started new load&quot;</span>, startTime, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br></pre></td></tr></table></figure></li></ol><p>所以接下来我们需要先关注一下engineJob.start()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.decodeJob = decodeJob;</span><br><span class="line">  GlideExecutor executor =</span><br><span class="line">      decodeJob.willDecodeFromCache() ? diskCacheExecutor : getActiveSourceExecutor();   executor.execute(decodeJob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是将传入进来的DecodeJob放入线程池中去运行</p><h3 id="DecodeJob"><a href="#DecodeJob" class="headerlink" title="DecodeJob"></a>DecodeJob</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This should be much more fine grained, but since Java&#x27;s thread pool implementation silently</span></span><br><span class="line">  <span class="comment">// swallows all otherwise fatal exceptions, this will at least make it obvious to developers</span></span><br><span class="line">  <span class="comment">// that something is failing.</span></span><br><span class="line">  GlideTrace.beginSectionFormat(<span class="string">&quot;DecodeJob#run(reason=%s, model=%s)&quot;</span>, runReason, model);</span><br><span class="line">  <span class="comment">// Methods in the try statement can invalidate currentFetcher, so set a local variable here to</span></span><br><span class="line">  <span class="comment">// ensure that the fetcher is cleaned up either way.</span></span><br><span class="line">  DataFetcher&lt;?&gt; localFetcher = currentFetcher;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">      notifyFailed();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    runWrapped();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (CallbackException e) &#123;</span><br><span class="line">    <span class="comment">// If a callback not controlled by Glide throws an exception, we should avoid the Glide</span></span><br><span class="line">    <span class="comment">// specific debug logic below.</span></span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="comment">// Catch Throwable and not Exception to handle OOMs. Throwables are swallowed by our</span></span><br><span class="line">    <span class="comment">// usage of .submit() in GlideExecutor so we&#x27;re not silently hiding crashes by doing this. We</span></span><br><span class="line">    <span class="comment">// are however ensuring that our callbacks are always notified when a load fails. Without this</span></span><br><span class="line">    <span class="comment">// notification, uncaught throwables never notify the corresponding callbacks, which can cause</span></span><br><span class="line">    <span class="comment">// loads to silently hang forever, a case that&#x27;s especially bad for users using Futures on</span></span><br><span class="line">    <span class="comment">// background threads.</span></span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">      Log.d(</span><br><span class="line">          TAG,</span><br><span class="line">          <span class="string">&quot;DecodeJob threw unexpectedly&quot;</span> + <span class="string">&quot;, isCancelled: &quot;</span> + isCancelled + <span class="string">&quot;, stage: &quot;</span> + stage,t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// When we&#x27;re encoding we&#x27;ve already notified our callback and it isn&#x27;t safe to do so again.</span></span><br><span class="line">    <span class="keyword">if</span> (stage != Stage.ENCODE) &#123;</span><br><span class="line">      throwables.add(t);</span><br><span class="line">      notifyFailed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isCancelled) &#123;</span><br><span class="line">      <span class="keyword">throw</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// Keeping track of the fetcher here and calling cleanup is excessively paranoid, we call</span></span><br><span class="line">    <span class="comment">// close in all cases anyway.</span></span><br><span class="line">    <span class="keyword">if</span> (localFetcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">      localFetcher.cleanup();</span><br><span class="line">    &#125;</span><br><span class="line">    GlideTrace.endSection();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>判断是否被取消，如果取消了则调用加载失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">  notifyFailed();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run</span></span><br><span class="line">...</span><br><span class="line">runWrapped();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>真正的执行都在runWrapped中</p></li><li><p>判断状态码是否解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (stage != Stage.ENCODE) &#123;</span><br><span class="line">  throwables.add(t);</span><br><span class="line">  notifyFailed();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h4 id="runWrapped"><a href="#runWrapped" class="headerlink" title="runWrapped()"></a>runWrapped()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runWrapped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (runReason) &#123;<span class="comment">// runReason有默认值，是INITIALIZE，所以一般情况下会直接走第一个分支</span></span><br><span class="line">    <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">      stage = getNextStage(Stage.INITIALIZE);<span class="comment">// 获取资源状态</span></span><br><span class="line">      currentGenerator = getNextGenerator();<span class="comment">// 根据资源状态来获取资源处理器</span></span><br><span class="line">      runGenerators();<span class="comment">// 开始执行</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SWITCH_TO_SOURCE_SERVICE:</span><br><span class="line">      runGenerators();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DECODE_DATA:</span><br><span class="line">      decodeFromRetrievedData();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unrecognized run reason: &quot;</span> + runReason);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>runReason是有默认值的，默认为INITIALIZE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function">DecodeJob&lt;R&gt; <span class="title">init</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.runReason = RunReason.INITIALIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来将会通过INITIALIZE来获取资源状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runWrapped</span></span><br><span class="line">...</span><br><span class="line">stage = getNextStage(Stage.INITIALIZE);<span class="comment">// 获取资源状态</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="getNextStage"><a href="#getNextStage" class="headerlink" title="getNextStage()"></a>getNextStage()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">private</span> Stage <span class="title">getNextStage</span><span class="params">(Stage current)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">    <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">      <span class="keyword">return</span> diskCacheStrategy.decodeCachedResource()<span class="comment">// 判断是否使用内存缓存</span></span><br><span class="line">          ? Stage.RESOURCE_CACHE</span><br><span class="line">          : getNextStage(Stage.RESOURCE_CACHE);</span><br><span class="line">    <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">      <span class="keyword">return</span> diskCacheStrategy.decodeCachedData()<span class="comment">// 判断是否使用硬盘缓存</span></span><br><span class="line">          ? Stage.DATA_CACHE</span><br><span class="line">          : getNextStage(Stage.DATA_CACHE);</span><br><span class="line">    <span class="keyword">case</span> DATA_CACHE:<span class="comment">// 配置了禁用内存与磁盘缓存，getNextStage得到的stage为 SOURCE</span></span><br><span class="line">      <span class="comment">// Skip loading from source if the user opted to only retrieve the resource from cache.</span></span><br><span class="line">      <span class="keyword">return</span> onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;</span><br><span class="line">    <span class="keyword">case</span> SOURCE:</span><br><span class="line">    <span class="keyword">case</span> FINISHED:</span><br><span class="line">      <span class="keyword">return</span> Stage.FINISHED;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unrecognized stage: &quot;</span> + current);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会因为传递进来的是INITIALIZE，所以会进入第一个分支。内部则会判断是否使用内存缓存，如果使用的话，返回状态Stage.RESOURCE_CACHE。不使用的话，则继续递归传入下一个分支</p><p>回到runWrapped()，之后会通过资源状态来获取资源执行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//runWrapped</span></span><br><span class="line">...</span><br><span class="line">currentGenerator = getNextGenerator();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="getNextGenerator"><a href="#getNextGenerator" class="headerlink" title="getNextGenerator()"></a>getNextGenerator()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">private</span> DataFetcherGenerator <span class="title">getNextGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (stage) &#123;</span><br><span class="line">    <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResourceCacheGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DataCacheGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">case</span> SOURCE:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SourceGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">case</span> FINISHED:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unrecognized stage: &quot;</span> + stage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果禁用了内存缓存和硬盘缓存，那么这里的<code>stage</code>会是<code>Stage.SOURCE</code>，则会返回<code>SourceGenerator()</code>,拿到资源执行器之后，就是开始执行了，调用了<code>runGenerators()</code>方法</p><h4 id="runGenerators"><a href="#runGenerators" class="headerlink" title="runGenerators()"></a>runGenerators()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runGenerators</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  currentThread = Thread.currentThread();</span><br><span class="line">  startFetchTime = LogTime.getLogTime();</span><br><span class="line">  <span class="keyword">boolean</span> isStarted = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!isCancelled</span><br><span class="line">      &amp;&amp; currentGenerator != <span class="keyword">null</span></span><br><span class="line">      &amp;&amp; !(isStarted = currentGenerator.startNext())) &#123;</span><br><span class="line">    stage = getNextStage(stage);</span><br><span class="line">    currentGenerator = getNextGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stage == Stage.SOURCE) &#123;</span><br><span class="line">      reschedule();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// We&#x27;ve run out of stages and generators, give up.</span></span><br><span class="line">  <span class="keyword">if</span> ((stage == Stage.FINISHED || isCancelled) &amp;&amp; !isStarted) &#123;</span><br><span class="line">    notifyFailed();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Otherwise a generator started a new load and we expect to be called back in</span></span><br><span class="line">  <span class="comment">// onDataFetcherReady.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while条件中调用了<code>currentGenerator.startNext()</code>，由这里的<code>currentGenerator</code>是<code>SourceGenerator</code>，所以实际上是在调用<code>SourceGenerator.starNext()</code></p><h3 id="SourceGenerator"><a href="#SourceGenerator" class="headerlink" title="SourceGenerator"></a>SourceGenerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (dataToCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Object data = dataToCache;</span><br><span class="line">    dataToCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">boolean</span> isDataInCache = cacheData(data);</span><br><span class="line">      <span class="comment">// If we failed to write the data to cache, the cacheData method will try to decode the</span></span><br><span class="line">      <span class="comment">// original data directly instead of going through the disk cache. Since cacheData has</span></span><br><span class="line">      <span class="comment">// already called our callback at this point, there&#x27;s nothing more to do but return.</span></span><br><span class="line">      <span class="keyword">if</span> (!isDataInCache) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If we were able to write the data to cache successfully, we now need to proceed to call</span></span><br><span class="line">      <span class="comment">// the sourceCacheGenerator below to load the data from cache.</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="comment">// An IOException means we weren&#x27;t able to write data to cache or we weren&#x27;t able to rewind</span></span><br><span class="line">      <span class="comment">// it after a disk cache write failed. In either case we can just move on and try the next</span></span><br><span class="line">      <span class="comment">// fetch below.</span></span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Failed to properly rewind or write data to cache&quot;</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sourceCacheGenerator != <span class="keyword">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sourceCacheGenerator = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  loadData = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class="line">      <span class="comment">// 通过hepler.getLoadData()来获取LoadData集合，然后再通过索引来获取对应的loadData</span></span><br><span class="line">    loadData = helper.getLoadData().get(loadDataListIndex++);</span><br><span class="line">      <span class="comment">// 判空</span></span><br><span class="line">    <span class="keyword">if</span> (loadData != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</span><br><span class="line">            || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</span><br><span class="line">      started = <span class="keyword">true</span>;</span><br><span class="line">      <span class="comment">// 开始加载</span></span><br><span class="line">      startNextLoad(loadData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> started;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先是使用了<code>helper.getLoadData.get()</code>来获取<code>loadData</code>，再进行判空，如果不为空的话，则调用<code>startNextLoad()</code></p><h4 id="helper-getLoadData-get"><a href="#helper-getLoadData-get" class="headerlink" title="helper.getLoadData.get()"></a>helper.getLoadData.get()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#DecodeHelper</span><br><span class="line">List&lt;LoadData&lt;?&gt;&gt; getLoadData() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isLoadDataSet) &#123;</span><br><span class="line">    isLoadDataSet = <span class="keyword">true</span>;</span><br><span class="line">    loadData.clear();</span><br><span class="line">    List&lt;ModelLoader&lt;Object, ?&gt;&gt; modelLoaders = glideContext.getRegistry().getModelLoaders(model);</span><br><span class="line">    <span class="comment">//noinspection ForLoopReplaceableByForEach to improve perf</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = modelLoaders.size(); i &lt; size; i++) &#123;</span><br><span class="line">      ModelLoader&lt;Object, ?&gt; modelLoader = modelLoaders.get(i);</span><br><span class="line">      <span class="comment">// 通过 ModelLoader 对象的 buildLoadData() 方法获取的 LoadData</span></span><br><span class="line">      <span class="comment">// 从网络加载数据，这里实际调用的是 com.bumptech.glide.load.model.stream HttpGlideUrlLoader#buildLoadData()</span></span><br><span class="line">      LoadData&lt;?&gt; current = modelLoader.buildLoadData(model, width, height, options);</span><br><span class="line">      <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        loadData.add(current);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> loadData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>先通过成员变量<code>modelLoaders</code>，获取一个<code>ModelLoader</code>出来</p></li><li><p>再调用<code>buildLoadData</code>来构建一个<code>LoadData</code></p><blockquote><p><code>buildLoadData</code>是一个接口，由于我们当前的是<code>SourceGenerator</code>，也就是只是网络加载，所以这里的<code>buildLoadData</code>实际上是<code>HttpGlideUrlLoader.buildLoadData()</code></p></blockquote></li></ol><h5 id="HttpGlideUrlLoader-buildLoadData"><a href="#HttpGlideUrlLoader-buildLoadData" class="headerlink" title="HttpGlideUrlLoader.buildLoadData()"></a>HttpGlideUrlLoader.buildLoadData()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#HttpGlideUrlLoader</span><br><span class="line"><span class="function"><span class="keyword">public</span> LoadData&lt;InputStream&gt; <span class="title">buildLoadData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> GlideUrl model, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="meta">@NonNull</span> Options options)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// GlideUrls memoize parsed URLs so caching them saves a few object instantiations and time</span></span><br><span class="line">  <span class="comment">// spent parsing urls.</span></span><br><span class="line">  GlideUrl url = model;<span class="comment">// 将图片资源赋值给局部变量</span></span><br><span class="line">  <span class="keyword">if</span> (modelCache != <span class="keyword">null</span>) &#123;<span class="comment">// 如果modelCache不为空，则将值获取出来</span></span><br><span class="line">    url = modelCache.get(model, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;<span class="comment">// 如果获取出来为空，则表示第一次添加，将添加到modelCache中去</span></span><br><span class="line">      modelCache.put(model, <span class="number">0</span>, <span class="number">0</span>, model);</span><br><span class="line">      url = model;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> timeout = options.get(TIMEOUT);</span><br><span class="line">  <span class="comment">// 实例化 LoadData 的时候顺带实例化了 HttpUrlFetcher</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoadData&lt;&gt;(url, <span class="keyword">new</span> HttpUrlFetcher(url, timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="startNextLoad"><a href="#startNextLoad" class="headerlink" title="startNextLoad"></a>startNextLoad</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#SourceGenerator</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startNextLoad</span><span class="params">(<span class="keyword">final</span> LoadData&lt;?&gt; toStart)</span> </span>&#123;</span><br><span class="line">  loadData.fetcher.loadData(</span><br><span class="line">      helper.getPriority(),</span><br><span class="line">      <span class="keyword">new</span> DataCallback&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataReady</span><span class="params">(<span class="meta">@Nullable</span> Object data)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (isCurrentRequest(toStart)) &#123;</span><br><span class="line">            onDataReadyInternal(toStart, data);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@NonNull</span> Exception e)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (isCurrentRequest(toStart)) &#123;</span><br><span class="line">            onLoadFailedInternal(toStart, e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>loadData.fetcher其实就是刚刚返回LoadData的时候顺便实例化的HttpUrlFetcher</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># interface ModelLoader</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoadData</span><span class="params">(<span class="meta">@NonNull</span> Key sourceKey, <span class="meta">@NonNull</span> DataFetcher&lt;Data&gt; fetcher)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(sourceKey, Collections.&lt;Key&gt;emptyList(), fetcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里是调用HttpUrlFetcher.loadData()</p></li></ol><h5 id="HttpUrlFetcher-loadData"><a href="#HttpUrlFetcher-loadData" class="headerlink" title="HttpUrlFetcher.loadData()"></a>HttpUrlFetcher.loadData()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Priority priority, <span class="meta">@NonNull</span> DataCallback&lt;? <span class="keyword">super</span> InputStream&gt; callback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 通过重定向加载数据</span></span><br><span class="line">    InputStream result = loadDataWithRedirects(glideUrl.toURL(), <span class="number">0</span>, <span class="keyword">null</span>, glideUrl.getHeaders());</span><br><span class="line">    <span class="comment">// 加载成功，将结果通过回调传递给上层的currentGenerator，也就是SourceGenerator</span></span><br><span class="line">    callback.onDataReady(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">      Log.d(TAG, <span class="string">&quot;Failed to load data for url&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    callback.onLoadFailed(e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      Log.v(TAG, <span class="string">&quot;Finished http url fetcher fetch in &quot;</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpUrlFetcher.loadData()中，要关注两个方法，一个是loadDataWithRedirects()，另一个则是callback.onDataReady()</p><ul><li><p>loadDataWithRedirects()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#HttpUrlFetcher</span><br><span class="line"><span class="keyword">private</span> HttpURLConnection urlConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> InputStream stream;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> InputStream <span class="title">loadDataWithRedirects</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    URL url, <span class="keyword">int</span> redirects, URL lastUrl, Map&lt;String, String&gt; headers)</span> <span class="keyword">throws</span> HttpException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (redirects &gt;= MAXIMUM_REDIRECTS) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(</span><br><span class="line">        <span class="string">&quot;Too many (&gt; &quot;</span> + MAXIMUM_REDIRECTS + <span class="string">&quot;) redirects!&quot;</span>, INVALID_STATUS_CODE);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Comparing the URLs using .equals performs additional network I/O and is generally broken.</span></span><br><span class="line">    <span class="comment">// See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (lastUrl != <span class="keyword">null</span> &amp;&amp; url.toURI().equals(lastUrl.toURI())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&quot;In re-direct loop&quot;</span>, INVALID_STATUS_CODE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">      <span class="comment">// Do nothing, this is best effort.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将url和头部信息一起构建一个HttpURLConnection</span></span><br><span class="line">  urlConnection = buildAndConfigureConnection(url, headers);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 明确连接以避免连接失败时解码器出现错误。</span></span><br><span class="line">    <span class="comment">// 发起连接</span></span><br><span class="line">    urlConnection.connect();</span><br><span class="line"><span class="comment">// 获取输入流</span></span><br><span class="line">    stream = urlConnection.getInputStream();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(</span><br><span class="line">        <span class="string">&quot;Failed to connect or obtain data&quot;</span>, getHttpStatusCodeOrInvalid(urlConnection), e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取请求状态码</span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> statusCode = getHttpStatusCodeOrInvalid(urlConnection);</span><br><span class="line">  <span class="keyword">if</span> (isHttpOk(statusCode)) &#123;<span class="comment">// 判断是否请求成功</span></span><br><span class="line">    <span class="keyword">return</span> getStreamForSuccessfulRequest(urlConnection);<span class="comment">// 获取 InputStream</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isHttpRedirect(statusCode)) &#123;</span><br><span class="line">    String redirectUrlString = urlConnection.getHeaderField(REDIRECT_HEADER_FIELD);<span class="comment">// 估计是获取失败信息</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(redirectUrlString)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&quot;Received empty or null redirect url&quot;</span>, statusCode);</span><br><span class="line">    &#125;</span><br><span class="line">    URL redirectUrl;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      redirectUrl = <span class="keyword">new</span> URL(url, redirectUrlString);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&quot;Bad redirect url: &quot;</span> + redirectUrlString, statusCode, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特别需要关闭流以避免额外泄漏responsebody  </span></span><br><span class="line">    <span class="comment">// 断开下面的url连接</span></span><br><span class="line">    cleanup();</span><br><span class="line">    <span class="comment">// 继续递归调用</span></span><br><span class="line">    <span class="keyword">return</span> loadDataWithRedirects(redirectUrl, redirects + <span class="number">1</span>, url, headers);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == INVALID_STATUS_CODE) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(statusCode);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(urlConnection.getResponseMessage(), statusCode);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">&quot;Failed to get a response message&quot;</span>, statusCode, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Glide内部是选用了HttpURLConnection来进行网络请求的，请求成功之后返回了InputStream</p></li><li><p>callback.onDataReady()</p><p>callback.onDataReady则是将结果返回给currentGenerator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#SourceGenerator</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startNextLoad</span><span class="params">(<span class="keyword">final</span> LoadData&lt;?&gt; toStart)</span> </span>&#123;</span><br><span class="line">  loadData.fetcher.loadData(</span><br><span class="line">      helper.getPriority(),</span><br><span class="line">      <span class="keyword">new</span> DataCallback&lt;Object&gt;() &#123;<span class="comment">// 《--这里</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataReady</span><span class="params">(<span class="meta">@Nullable</span> Object data)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (isCurrentRequest(toStart)) &#123;</span><br><span class="line">            onDataReadyInternal(toStart, data);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(<span class="meta">@NonNull</span> Exception e)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (isCurrentRequest(toStart)) &#123;</span><br><span class="line">            onLoadFailedInternal(toStart, e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们继续顺着下去，去看一下onDataReadyInternal()</p><h3 id="onDataReadyInternal"><a href="#onDataReadyInternal" class="headerlink" title="onDataReadyInternal"></a>onDataReadyInternal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#SourceGenerator</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FetcherReadyCallback cb;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Synthetic</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDataReadyInternal</span><span class="params">(LoadData&lt;?&gt; loadData, Object data)</span> </span>&#123;</span><br><span class="line">  DiskCacheStrategy diskCacheStrategy = helper.getDiskCacheStrategy();</span><br><span class="line">  <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) &#123;</span><br><span class="line">    dataToCache = data;</span><br><span class="line">    <span class="comment">// We might be being called back on someone else&#x27;s thread. Before doing anything, we should</span></span><br><span class="line">    <span class="comment">// reschedule to get back onto Glide&#x27;s thread.</span></span><br><span class="line">    cb.reschedule();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cb.onDataFetcherReady(</span><br><span class="line">        loadData.sourceKey,</span><br><span class="line">        data,</span><br><span class="line">        loadData.fetcher,</span><br><span class="line">        loadData.fetcher.getDataSource(),</span><br><span class="line">        originalKey);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始还是一如既往的进行判空和一些别的判断，之后就是调用了FetcherReadyCallback.onDataFetcherReady</p><blockquote><p>FetcherReadyCallback是个接口，只有SourceGenerator和DecodeJob实现了。所以这里实际上是调用DecodeJob.onDataFetcherReady()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataFetcherReady</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Key sourceKey, Object data, DataFetcher&lt;?&gt; fetcher, DataSource dataSource, Key attemptedKey)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.currentSourceKey = sourceKey;</span><br><span class="line">  <span class="keyword">this</span>.currentData = data;</span><br><span class="line">  <span class="keyword">this</span>.currentFetcher = fetcher;</span><br><span class="line">  <span class="keyword">this</span>.currentDataSource = dataSource;</span><br><span class="line">  <span class="keyword">this</span>.currentAttemptingKey = attemptedKey;</span><br><span class="line">  <span class="keyword">this</span>.isLoadingFromAlternateCacheKey = sourceKey != decodeHelper.getCacheKeys().get(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 判断当前线程是否是指定的线程</span></span><br><span class="line">  <span class="keyword">if</span> (Thread.currentThread() != currentThread) &#123;</span><br><span class="line">    <span class="comment">// 我们在一个不属于我们的线程上检索了一些数据，并希望切换回我们的线程来处理这些数据。  </span></span><br><span class="line">    runReason = RunReason.DECODE_DATA;</span><br><span class="line">    callback.reschedule(<span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    GlideTrace.beginSection(<span class="string">&quot;DecodeJob.decodeFromRetrievedData&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 开始解码</span></span><br><span class="line">      decodeFromRetrievedData();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      GlideTrace.endSection();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点注意decodeFromRetrievedData()，经过了这么多的跳转，终于要开始解码了</p><h3 id="decodeFromRetrievedData"><a href="#decodeFromRetrievedData" class="headerlink" title="decodeFromRetrievedData()"></a>decodeFromRetrievedData()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="keyword">private</span> DataFetcher&lt;?&gt; currentFetcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object currentData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DataSource currentDataSource;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeFromRetrievedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;<span class="comment">// 输出日志信息</span></span><br><span class="line">    logWithTimeAndKey(</span><br><span class="line">        <span class="string">&quot;Retrieved data&quot;</span>,</span><br><span class="line">        startFetchTime,</span><br><span class="line">        <span class="string">&quot;data: &quot;</span></span><br><span class="line">            + currentData</span><br><span class="line">            + <span class="string">&quot;, cache key: &quot;</span></span><br><span class="line">            + currentSourceKey</span><br><span class="line">            + <span class="string">&quot;, fetcher: &quot;</span></span><br><span class="line">            + currentFetcher);</span><br><span class="line">  &#125;</span><br><span class="line">  Resource&lt;R&gt; resource = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开始解码</span></span><br><span class="line">    resource = decodeFromData(currentFetcher, currentData, currentDataSource);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (GlideException e) &#123;</span><br><span class="line">    e.setLoggingDetails(currentAttemptingKey, currentDataSource);</span><br><span class="line">    throwables.add(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">    notifyEncodeAndRelease(resource, currentDataSource, isLoadingFromAlternateCacheKey);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    runGenerators();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别的我们都先不管了，先把主流程走一遍，这里有两个地方需要注意，decodeFromData(解码)、notifyEncodeAndRelease(解码完毕，进行通知)</p><h4 id="decodeFromData"><a href="#decodeFromData" class="headerlink" title="decodeFromData"></a>decodeFromData</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="keyword">private</span> &lt;Data&gt; <span class="function">Resource&lt;R&gt; <span class="title">decodeFromData</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DataFetcher&lt;?&gt; fetcher, Data data, DataSource dataSource)</span> <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line">    <span class="comment">// 继续调用decodeFromFetcher</span></span><br><span class="line">    Resource&lt;R&gt; result = decodeFromFetcher(data, dataSource);</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">&quot;Decoded result &quot;</span> + result, startTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    fetcher.cleanup();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="decodeFromFetcher"><a href="#decodeFromFetcher" class="headerlink" title="decodeFromFetcher"></a>decodeFromFetcher</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="keyword">private</span> &lt;Data&gt; <span class="function">Resource&lt;R&gt; <span class="title">decodeFromFetcher</span><span class="params">(Data data, DataSource dataSource)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  <span class="comment">// 获取解码器，解码器里面封装了 DecodePath，它就是用来解码转码的</span></span><br><span class="line">  LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</span><br><span class="line">  <span class="comment">// 通过解码器解析数据</span></span><br><span class="line">  <span class="keyword">return</span> runLoadPath(data, dataSource, path);</span><br><span class="line">&#125;</span><br><span class="line">---分割---</span><br><span class="line"><span class="keyword">private</span> &lt;Data, ResourceType&gt; <span class="function">Resource&lt;R&gt; <span class="title">runLoadPath</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Data data, DataSource dataSource, LoadPath&lt;Data, ResourceType, R&gt; path)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  Options options = getOptionsWithHardwareConfig(dataSource);</span><br><span class="line">  <span class="comment">// 这里相当于是创建了个任务的传送带</span></span><br><span class="line">  DataRewinder&lt;Data&gt; rewinder = glideContext.getRegistry().getRewinder(data);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ResourceType in DecodeCallback below is required for compilation to work with gradle.</span></span><br><span class="line">    <span class="comment">// 最后还是将任务传递给了path.load()</span></span><br><span class="line">    <span class="keyword">return</span> path.load(</span><br><span class="line">        rewinder, options, width, height, <span class="keyword">new</span> DecodeCallback&lt;ResourceType&gt;(dataSource));</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rewinder.cleanup();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终还是将任务传递给了<code>path.load()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#LoadPath</span><br><span class="line"><span class="function"><span class="keyword">public</span> Resource&lt;Transcode&gt; <span class="title">load</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DataRewinder&lt;Data&gt; rewinder,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">    DecodePath.DecodeCallback&lt;ResourceType&gt; decodeCallback)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">    <span class="comment">// 从池中取出最后一个实例出来并进行判空异常处理</span></span><br><span class="line">  List&lt;Throwable&gt; throwables = Preconditions.checkNotNull(listPool.acquire());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> loadWithExceptionList(rewinder, options, width, height, decodeCallback, throwables);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 最后将这些实例都释放掉</span></span><br><span class="line">    listPool.release(throwables);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---分割---</span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource&lt;Transcode&gt; <span class="title">loadWithExceptionList</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DataRewinder&lt;Data&gt; rewinder,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">    DecodePath.DecodeCallback&lt;ResourceType&gt; decodeCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">    List&lt;Throwable&gt; exceptions)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  Resource&lt;Transcode&gt; result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//noinspection ForLoopReplaceableByForEach to improve perf</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = decodePaths.size(); i &lt; size; i++) &#123;</span><br><span class="line">    DecodePath&lt;Data, ResourceType, Transcode&gt; path = decodePaths.get(i);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      result = path.decode(rewinder, width, height, options, decodeCallback);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (GlideException e) &#123;</span><br><span class="line">      exceptions.add(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GlideException(failureMessage, <span class="keyword">new</span> ArrayList&lt;&gt;(exceptions));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是将解码的任务交给了Decode Path来完成，所以<code>DecodePath.decode()</code>才是真正开始解析数据的</p><h5 id="DecodePath"><a href="#DecodePath" class="headerlink" title="DecodePath"></a>DecodePath</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#DecodePath</span><br><span class="line"><span class="function"><span class="keyword">public</span> Resource&lt;Transcode&gt; <span class="title">decode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DataRewinder&lt;DataType&gt; rewinder,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">    DecodeCallback&lt;ResourceType&gt; callback)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  Resource&lt;ResourceType&gt; decoded = decodeResource(rewinder, width, height, options);</span><br><span class="line">  Resource&lt;ResourceType&gt; transformed = callback.onResourceDecoded(decoded);</span><br><span class="line">  <span class="keyword">return</span> transcoder.transcode(transformed, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>将图片资源进行解码成原始图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource&lt;ResourceType&gt; decoded = decodeResource(rewinder, width, height, options);</span><br></pre></td></tr></table></figure><h4 id="decodeResource"><a href="#decodeResource" class="headerlink" title="decodeResource"></a>decodeResource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#DecodePath</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource&lt;ResourceType&gt; <span class="title">decodeResource</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DataRewinder&lt;DataType&gt; rewinder, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="meta">@NonNull</span> Options options)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  List&lt;Throwable&gt; exceptions = Preconditions.checkNotNull(listPool.acquire());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> decodeResourceWithList(rewinder, width, height, options, exceptions);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    listPool.release(exceptions);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource&lt;ResourceType&gt; <span class="title">decodeResourceWithList</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DataRewinder&lt;DataType&gt; rewinder,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Options options,</span></span></span><br><span class="line"><span class="function"><span class="params">    List&lt;Throwable&gt; exceptions)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  Resource&lt;ResourceType&gt; result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//noinspection ForLoopReplaceableByForEach to improve perf</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = decoders.size(); i &lt; size; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取当前的资源解码器</span></span><br><span class="line">    ResourceDecoder&lt;DataType, ResourceType&gt; decoder = decoders.get(i);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      DataType data = rewinder.rewindAndGet();</span><br><span class="line">      <span class="keyword">if</span> (decoder.handles(data, options)) &#123;</span><br><span class="line">        data = rewinder.rewindAndGet();</span><br><span class="line">        <span class="comment">// 再调用对应的解码器来进行解码</span></span><br><span class="line">        result = decoder.decode(data, width, height, options);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Some decoders throw unexpectedly. If they do, we shouldn&#x27;t fail the entire load path, but</span></span><br><span class="line">      <span class="comment">// instead log and continue. See #2406 for an example.</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | RuntimeException | OutOfMemoryError e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        Log.v(TAG, <span class="string">&quot;Failed to decode data for &quot;</span> + decoder, e);</span><br><span class="line">      &#125;</span><br><span class="line">      exceptions.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GlideException(failureMessage, <span class="keyword">new</span> ArrayList&lt;&gt;(exceptions));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里遍历拿到可以解码当前数据的资源解码器，然后调用 decode() 方法进行解码。</p><p>因为当前数据是 Input Stream，所以这里遍历拿到的 Resource Decoder 其实是 StreamBitmapDecoder，所以调用的是 <code>StreamBitmapDecoder.decode()</code>StreamBitmapDecoder的内部是调用<code>Downsampler.decode()</code>将输入流解码变成Bitmap，最后将Bitmap包装成Resource返回</p></li><li><p>将原始图片通过回调通知Decode Job</p><p>回调最终会回到<code>DecodeJob.onResourceDecoded()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;Z&gt; <span class="function">Resource&lt;Z&gt; <span class="title">onResourceDecoded</span><span class="params">(DataSource dataSource, <span class="meta">@NonNull</span> Resource&lt;Z&gt; decoded)</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  Class&lt;Z&gt; resourceSubClass = (Class&lt;Z&gt;) decoded.get().getClass();</span><br><span class="line">  Transformation&lt;Z&gt; appliedTransformation = <span class="keyword">null</span>;</span><br><span class="line">  Resource&lt;Z&gt; transformed = decoded;</span><br><span class="line">  <span class="comment">// 这里判断资源是否是从硬盘中获取的，如果不是则需要进行转换</span></span><br><span class="line">  <span class="keyword">if</span> (dataSource != DataSource.RESOURCE_DISK_CACHE) &#123;</span><br><span class="line">    appliedTransformation = decodeHelper.getTransformation(resourceSubClass);</span><br><span class="line">    transformed = appliedTransformation.transform(glideContext, decoded, width, height);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Make this the responsibility of the Transformation.</span></span><br><span class="line">  <span class="keyword">if</span> (!decoded.equals(transformed)) &#123;</span><br><span class="line">    decoded.recycle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> EncodeStrategy encodeStrategy;</span><br><span class="line">  <span class="keyword">final</span> ResourceEncoder&lt;Z&gt; encoder;</span><br><span class="line">  <span class="keyword">if</span> (decodeHelper.isResourceEncoderAvailable(transformed)) &#123;</span><br><span class="line">    encoder = decodeHelper.getResultEncoder(transformed);</span><br><span class="line">    encodeStrategy = encoder.getEncodeStrategy(options);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    encoder = <span class="keyword">null</span>;</span><br><span class="line">    encodeStrategy = EncodeStrategy.NONE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 缓存相关</span></span><br><span class="line">  Resource&lt;Z&gt; result = transformed;</span><br><span class="line">  <span class="keyword">boolean</span> isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);</span><br><span class="line">  <span class="keyword">if</span> (diskCacheStrategy.isResourceCacheable(</span><br><span class="line">      isFromAlternateCacheKey, dataSource, encodeStrategy)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (encoder == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Registry.NoResultEncoderAvailableException(transformed.get().getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Key key;</span><br><span class="line">    <span class="keyword">switch</span> (encodeStrategy) &#123;</span><br><span class="line">      <span class="keyword">case</span> SOURCE:</span><br><span class="line">        key = <span class="keyword">new</span> DataCacheKey(currentSourceKey, signature);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> TRANSFORMED:</span><br><span class="line">        key =</span><br><span class="line">            <span class="keyword">new</span> ResourceCacheKey(</span><br><span class="line">                decodeHelper.getArrayPool(),</span><br><span class="line">                currentSourceKey,</span><br><span class="line">                signature,</span><br><span class="line">                width,</span><br><span class="line">                height,</span><br><span class="line">                appliedTransformation,</span><br><span class="line">                resourceSubClass,</span><br><span class="line">                options);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unknown strategy: &quot;</span> + encodeStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LockedResource&lt;Z&gt; lockedResult = LockedResource.obtain(transformed);</span><br><span class="line">    deferredEncodeManager.init(key, encoder, lockedResult);</span><br><span class="line">    result = lockedResult;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是进行资源转换的，也就是如果我们设置了center Crop之类的，那么就会进行对应的转换，最后将结果返回出去</p></li><li><p>调用 <code>BitmapDrawableTranscoder.transcode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource&lt;BitmapDrawable&gt; <span class="title">transcode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Resource&lt;Bitmap&gt; toTranscode, <span class="meta">@NonNull</span> Options options)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> LazyBitmapDrawableResource.obtain(resources, toTranscode);</span><br><span class="line">&#125;</span><br><span class="line">---------</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resource&lt;BitmapDrawable&gt; <span class="title">obtain</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Resources resources, <span class="meta">@Nullable</span> Resource&lt;Bitmap&gt; bitmapResource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bitmapResource == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LazyBitmapDrawableResource(resources, bitmapResource);</span><br><span class="line">&#125;</span><br><span class="line">---------</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazyBitmapDrawableResource</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@NonNull</span> Resources resources, <span class="meta">@NonNull</span> Resource&lt;Bitmap&gt; bitmapResource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.resources = Preconditions.checkNotNull(resources);</span><br><span class="line">  <span class="keyword">this</span>.bitmapResource = Preconditions.checkNotNull(bitmapResource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是将传入进来的Bitmap封装再Resource里面，顺便再进行一下判空处理</p></li></ol><h4 id="notifyEncodeAndRelease"><a href="#notifyEncodeAndRelease" class="headerlink" title="notifyEncodeAndRelease"></a>notifyEncodeAndRelease</h4><p>解码部分完成了，剩下就是要将结果通知出去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyEncodeAndRelease</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Resource&lt;R&gt; resource, DataSource dataSource, <span class="keyword">boolean</span> isLoadedFromAlternateCacheKey)</span> </span>&#123;</span><br><span class="line">  GlideTrace.beginSection(<span class="string">&quot;DecodeJob.notifyEncodeAndRelease&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (resource <span class="keyword">instanceof</span> Initializable) &#123;</span><br><span class="line">      ((Initializable) resource).initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Resource&lt;R&gt; result = resource;</span><br><span class="line">    LockedResource&lt;R&gt; lockedResource = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (deferredEncodeManager.hasResourceToEncode()) &#123;</span><br><span class="line">      lockedResource = LockedResource.obtain(resource);</span><br><span class="line">      result = lockedResource;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 通知完成</span></span><br><span class="line">    notifyComplete(result, dataSource, isLoadedFromAlternateCacheKey);</span><br><span class="line"></span><br><span class="line">    stage = Stage.ENCODE;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (deferredEncodeManager.hasResourceToEncode()) &#123;</span><br><span class="line">        deferredEncodeManager.encode(diskCacheProvider, options);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (lockedResource != <span class="keyword">null</span>) &#123;</span><br><span class="line">        lockedResource.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Call onEncodeComplete outside the finally block so that it&#x27;s not called if the encode</span></span><br><span class="line">    <span class="comment">// process</span></span><br><span class="line">    <span class="comment">// throws.</span></span><br><span class="line">    <span class="comment">// 释放各种资源</span></span><br><span class="line">    onEncodeComplete();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    GlideTrace.endSection();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过<code>notifyComplete()</code>进一步的将结果通知给外部，notifyComlete内部使用通过<code>callback.onResourceReady()</code>来进行回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#DecodeJob</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyComplete</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Resource&lt;R&gt; resource, DataSource dataSource, <span class="keyword">boolean</span> isLoadedFromAlternateCacheKey)</span> </span>&#123;</span><br><span class="line">  setNotifiedOrThrow();</span><br><span class="line">  <span class="comment">// 通知结果回调</span></span><br><span class="line">  callback.onResourceReady(resource, dataSource, isLoadedFromAlternateCacheKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而实现了callback的只有Engine Job一个，所以这里是将结果返回给了Engine Job</p><h3 id="EnginJob"><a href="#EnginJob" class="headerlink" title="EnginJob"></a>EnginJob</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Resource&lt;R&gt; resource, DataSource dataSource, <span class="keyword">boolean</span> isLoadedFromAlternateCacheKey)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    <span class="keyword">this</span>.isLoadedFromAlternateCacheKey = isLoadedFromAlternateCacheKey;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知结果回调</span></span><br><span class="line">  notifyCallbacksOfResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Synthetic</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyCallbacksOfResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ResourceCallbacksAndExecutors copy;</span><br><span class="line">  Key localKey;</span><br><span class="line">  EngineResource&lt;?&gt; localResource;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    stateVerifier.throwIfRecycled();</span><br><span class="line">    <span class="comment">// 如果取消，则回收和释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">      resource.recycle();</span><br><span class="line">      release();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cbs.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Received a resource without any callbacks to notify&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasResource) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Already have resource&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    engineResource = engineResourceFactory.build(resource, isCacheable, key, resourceListener);</span><br><span class="line">      </span><br><span class="line">    hasResource = <span class="keyword">true</span>;</span><br><span class="line">    copy = cbs.copy();</span><br><span class="line">    incrementPendingCallbacks(copy.size() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    localKey = key;</span><br><span class="line">    localResource = engineResource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里表示 EngineJob 完成了，回调给 Engine</span></span><br><span class="line">  engineJobListener.onEngineJobComplete(<span class="keyword">this</span>, localKey, localResource);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//遍历 copy 后拿到了线程池的执行器（entry.executor）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">final</span> ResourceCallbackAndExecutor entry : copy) &#123;</span><br><span class="line">    entry.executor.execute(<span class="keyword">new</span> CallResourceReady(entry.cb));</span><br><span class="line">  &#125;</span><br><span class="line">  decrementPendingCallbacks();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个重要部分，第一个是<code>engineJobListener.onEngineJobComplete()</code>、第二个为<code>entry.executor.execute()</code></p><ul><li><p><code>engineJobListener.onEngineJobComplete()</code></p><p>内部主要判断是否配置了内存缓存，如果有，则进行内存缓存</p></li><li><p><code>entry.executor.execute()</code></p><p>这里的executor其实就是最上方的传入进来的<code>Executors.mainThreadExecutor()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#RequestBuilder</span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(<span class="meta">@NonNull</span> Y target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> into(target, <span class="comment">/*targetListener=*/</span> <span class="keyword">null</span>, Executors.mainThreadExecutor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Executors</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Executors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Utility class.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor MAIN_THREAD_EXECUTOR =</span><br><span class="line">      <span class="keyword">new</span> Executor() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="meta">@NonNull</span> Runnable command)</span> </span>&#123;</span><br><span class="line">          Util.postOnUiThread(command);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor DIRECT_EXECUTOR =</span><br><span class="line">      <span class="keyword">new</span> Executor() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="meta">@NonNull</span> Runnable command)</span> </span>&#123;</span><br><span class="line">          command.run();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Posts executions to the main thread. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Executor <span class="title">mainThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MAIN_THREAD_EXECUTOR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Immediately calls &#123;<span class="doctag">@link</span> Runnable#run()&#125; on the current thread. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Executor <span class="title">directExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DIRECT_EXECUTOR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@VisibleForTesting</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownAndAwaitTermination</span><span class="params">(ExecutorService pool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> shutdownSeconds = <span class="number">5</span>;</span><br><span class="line">    pool.shutdownNow();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!pool.awaitTermination(shutdownSeconds, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        pool.shutdownNow();</span><br><span class="line">        <span class="keyword">if</span> (!pool.awaitTermination(shutdownSeconds, TimeUnit.SECONDS)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Failed to shutdown&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">      pool.shutdownNow();</span><br><span class="line">      Thread.currentThread().interrupt();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ie);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Executors.mainThreadExecutor()</code>其实就是创建了个Executors实例，然后内部重写了execute()方法，还是使用Handler来post一个一个任务并切换到了主线程，所以现在只用去查看<code>CallResourceReady.run()</code>即可</p><h4 id="CallResourceReady"><a href="#CallResourceReady" class="headerlink" title="CallResourceReady"></a>CallResourceReady</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#EngineJob</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CallResourceReady</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ResourceCallback cb;</span><br><span class="line"></span><br><span class="line">  CallResourceReady(ResourceCallback cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (cb.getLock()) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (EngineJob.<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cbs.contains(cb)) &#123;</span><br><span class="line">          <span class="comment">// Acquire for this particular callback.</span></span><br><span class="line">          engineResource.acquire();</span><br><span class="line">          callCallbackOnResourceReady(cb);</span><br><span class="line">          removeCallback(cb);</span><br><span class="line">        &#125;</span><br><span class="line">        decrementPendingCallbacks();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callCallbackOnResourceReady</span><span class="params">(ResourceCallback cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 资源准备完成后，还是通过回调，传递给上一层</span></span><br><span class="line">    cb.onResourceReady(engineResource, dataSource);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CallbackException(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里的<code>cb.onResourceReady()</code>是直接回调给了<code>SingleRequest.onResourceReady()</code>，<code>SingleRequest.onResourceReady()</code>内部主要是处理一些加载失败的判断，然后调用重载方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//onResourceReady()</span></span><br><span class="line">onResourceReady(</span><br><span class="line">    (Resource&lt;R&gt;) resource, (R) received, dataSource, isLoadedFromAlternateCacheKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="onResourceReady"><a href="#onResourceReady" class="headerlink" title="onResourceReady"></a>onResourceReady</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">     Resource&lt;R&gt; resource, R result, DataSource dataSource, <span class="keyword">boolean</span> isAlternateCacheKey)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// We must call isFirstReadyResource before setting status.</span></span><br><span class="line">   <span class="keyword">boolean</span> isFirstResource = isFirstReadyResource();</span><br><span class="line">   status = Status.COMPLETE;</span><br><span class="line">   <span class="keyword">this</span>.resource = resource;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (glideContext.getLogLevel() &lt;= Log.DEBUG) &#123;</span><br><span class="line">     Log.d( GLIDE_TAG,  <span class="string">&quot;...“);</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   isCallingCallbacks = true;</span></span><br><span class="line"><span class="string">   try &#123;</span></span><br><span class="line"><span class="string">     boolean anyListenerHandledUpdatingTarget = false;</span></span><br><span class="line"><span class="string">     if (requestListeners != null) &#123;</span></span><br><span class="line"><span class="string">       for (RequestListener&lt;R&gt; listener : requestListeners) &#123;</span></span><br><span class="line"><span class="string">         anyListenerHandledUpdatingTarget |=</span></span><br><span class="line"><span class="string">             listener.onResourceReady(result, model, target, dataSource, isFirstResource);</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">     anyListenerHandledUpdatingTarget |=</span></span><br><span class="line"><span class="string">         targetListener != null</span></span><br><span class="line"><span class="string">             &amp;&amp; targetListener.onResourceReady(result, model, target, dataSource, isFirstResource);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     if (!anyListenerHandledUpdatingTarget) &#123;</span></span><br><span class="line"><span class="string">       Transition&lt;? super R&gt; animation = animationFactory.build(dataSource, isFirstResource);</span></span><br><span class="line"><span class="string">       // 这里的target是ImageViewTarget，所以这里是直接回调给ImageViewTarget</span></span><br><span class="line"><span class="string">       target.onResourceReady(result, animation);</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">   &#125; finally &#123;</span></span><br><span class="line"><span class="string">     isCallingCallbacks = false;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   // 通知加载成功</span></span><br><span class="line"><span class="string">   notifyLoadSuccess();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>最后再<code>ImageViewTarget.onResourceReady()</code>内部会判断传入的animation是否为空，为空的话就会直接设置图片。不为空的话，则会调用animation</p><p>animation为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#ImageViewTarget</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setResourceInternal</span><span class="params">(<span class="meta">@Nullable</span> Z resource)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Order matters here. Set the resource first to make sure that the Drawable has a valid and</span></span><br><span class="line">  <span class="comment">// non-null Callback before starting it.</span></span><br><span class="line">  setResource(resource);</span><br><span class="line">  maybeUpdateAnimatable(resource);</span><br><span class="line">&#125;</span><br><span class="line">---------</span><br><span class="line">#BitmapImageViewTarget</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setResource</span><span class="params">(Bitmap resource)</span> </span>&#123;</span><br><span class="line">  view.setImageBitmap(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终将图片设置到Image View上去</p><p>animation不为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#ImageViewTarget</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeUpdateAnimatable</span><span class="params">(<span class="meta">@Nullable</span> Z resource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (resource <span class="keyword">instanceof</span> Animatable) &#123;</span><br><span class="line">    animatable = (Animatable) resource;</span><br><span class="line">    animatable.start();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animatable = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>into()方法十分复杂，主要就是先从内存中进行获取，没有的话，再去硬盘中获取，都没有则通过HttpURLconnection来进行网络请求，其次在将结果给Decode Path进行解码，解码完成将结果封装成Resource通过回调层层传递，中间顺便判断是否需要缓存到硬盘、内存、是否需要进行形状变化。最终将结果设置到Image View上去</p>]]></content>
      
      
      
        <tags>
            
            <tag> Glide </tag>
            
            <tag> 源码剖析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android跨进程通信-AIDL(使用)</title>
      <link href="2021/08/28/Android%E8%B7%A8%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-AIDL-%E4%BD%BF%E7%94%A8/"/>
      <url>2021/08/28/Android%E8%B7%A8%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-AIDL-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍进程间通信(IPC)机制-AIDL</p><a id="more"></a><h1 id="Android跨进程通信-AIDL-使用"><a href="#Android跨进程通信-AIDL-使用" class="headerlink" title="Android跨进程通信-AIDL(使用)"></a>Android跨进程通信-AIDL(使用)</h1><blockquote><p>本文将介绍进程间通信(IPC)机制-AIDL</p></blockquote><h2 id="AIDL介绍"><a href="#AIDL介绍" class="headerlink" title="AIDL介绍"></a>AIDL介绍</h2><p>ADIL是Android中进程间通信的一种机制，我们可以利用它定义客户端与服务端进行进程间通信的编程接口</p><p>在Android中，一个进程是无法访问另一个进程的内存，所以为了解决进程间通讯的问题，Android使用一种接口定义语言来公开服务的<strong>接口</strong>，本质上，AIDL非常像一个接口，通过公开接口，让别的进程调用该接口，从而实现进程间的通讯。</p><h2 id="使用AIDL"><a href="#使用AIDL" class="headerlink" title="使用AIDL"></a>使用AIDL</h2><h3 id="数据实体类"><a href="#数据实体类" class="headerlink" title="数据实体类"></a>数据实体类</h3><p>首先先创建一个实体数据类，用来进程间进行通信</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String?,</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span></span><br><span class="line">) : Parcelable &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(parcel: Parcel) : <span class="keyword">this</span>(</span><br><span class="line">        parcel.readString(),</span><br><span class="line">        parcel.readInt()</span><br><span class="line">    ) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeToParcel</span><span class="params">(parcel: <span class="type">Parcel</span>, flags: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        parcel.writeString(name)</span><br><span class="line">        parcel.writeInt(age)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">describeContents</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> CREATOR : Parcelable.Creator&lt;Person&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">createFromParcel</span><span class="params">(parcel: <span class="type">Parcel</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(parcel)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newArray</span><span class="params">(size: <span class="type">Int</span>)</span></span>: Array&lt;Person?&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> arrayOfNulls(size)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意！这里的Person的目录结构必须要和下方创建的aidl文件目录结构一致</p><p>什么意思呢，就是说这里创建的Person类是直接放在java下的，那么等下创建的aidl文件也必须是在最外层</p></blockquote><p>这个类还需要实现Parcelable接口，为什么呢，因为AIDL只支持几种数据类型</p><ol><li>java基本类型</li><li>List、Map</li><li>实现了Parcelable接口</li></ol><p>所以说这里需要继承Parcelable</p><h3 id="AIDL接口"><a href="#AIDL接口" class="headerlink" title="AIDL接口"></a>AIDL接口</h3><blockquote><p>在Android Studio高版本中，通过右键创建的.aidl文件都会被Android Studio强制放到main下的aidl文件夹中</p><p>这里的aidl文件是放在最外层的，那么刚刚创建的Person文件也是需要放在java下的最外层</p></blockquote><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/image-20210826194036950.png" alt="image-20210826194036950"></p><p>我们还需要在aidl文件夹下在创建一个文件夹，名字为包名即可</p><p>之后，首先先创建一个名字为Person.aidl类，是的，这里的名字与上面创建的数据实体类的名称相同</p><blockquote><p>这里的 Person 我理解的是 Person.aidl，然后通过 Person.aidl 又找到真正的实体 Person 类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.studynode;</span><br><span class="line"></span><br><span class="line">parcelable Person;</span><br></pre></td></tr></table></figure><p>这里使用了自定义Parcelable对象，接着我们去定义个接口用来通信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IMyAidl.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.example.studynode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.studynode.Person;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyAidl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(in Person person)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">getPersonList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们定义了两个方法，一个是用来添加数据，一个是用来获取总共的数据。之后就只需点一下有右上角的小锤子(Make Project)就ok了，系统会自动的生成一个java文件</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>这里就使用Service来进行跨进程通信，所以就先创建一个Service</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AidlService</span> : <span class="type">Service</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mPersons: ArrayList&lt;Person&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mInBinder: IBinder = <span class="keyword">object</span> : IMyAidl.Stub() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addPerson</span><span class="params">(person: <span class="type">Person</span>)</span></span> &#123;</span><br><span class="line">            mPersons?.add(person)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPersonList</span><span class="params">()</span></span>: MutableList&lt;Person&gt;? &#123;</span><br><span class="line">            <span class="keyword">return</span> mPersons</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span>: IBinder &#123;</span><br><span class="line">        mPersons = ArrayList()</span><br><span class="line">        <span class="keyword">return</span> mInBinder</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码总共创建了两个东西</p><ol><li>创建了一个ArrayList，用来存放数据</li><li>为了实现来自.aidl文件生成的接口，需要继承Binder接口（例如Ibinder接口),并且实现从.aidl文件中继承法，在上面代码中，使用匿名实例实现一个叫IMyAidl（定义在IMyAidl.aidl中）的接口，实现了两个方法，addPerson和getPersonList</li></ol><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AidlActivity</span> : <span class="type">BaseSimpleActivity</span>&lt;<span class="type">ActivityAidlBinding</span>&gt;</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> binding: ActivityAidlBinding <span class="keyword">by</span> lazy &#123; ActivityAidlBinding.inflate(layoutInflater) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> iMyAidl: IMyAidl? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> adapter: AidlAdapter <span class="keyword">by</span> lazy &#123; AidlAdapter() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> serviceConnection: ServiceConnection = <span class="keyword">object</span> : ServiceConnection &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onServiceConnected</span><span class="params">(name: <span class="type">ComponentName</span>?, service: <span class="type">IBinder</span>?)</span></span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;AIDL&quot;</span>, <span class="string">&quot;onServiceConnected: 绑定Service成功&quot;</span>)</span><br><span class="line">            iMyAidl = IMyAidl.Stub.asInterface(service)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onServiceDisconnected</span><span class="params">(name: <span class="type">ComponentName</span>?)</span></span> &#123;</span><br><span class="line">            iMyAidl = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        binding.aidlList.apply &#123;</span><br><span class="line">            layoutManager =</span><br><span class="line">                LinearLayoutManager(<span class="keyword">this</span><span class="symbol">@AidlActivity</span>)</span><br><span class="line">            adapter = <span class="keyword">this</span><span class="symbol">@AidlActivity</span>.adapter</span><br><span class="line">        &#125;</span><br><span class="line">        binding.aidlButton1.setOnClickListener &#123;</span><br><span class="line">            iMyAidl?.addPerson(Person(<span class="string">&quot;Tom&quot;</span>, Random.nextInt(<span class="number">10</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">        binding.aidlButton2.setOnClickListener &#123;</span><br><span class="line">            iMyAidl?.personList?.let &#123;</span><br><span class="line">                adapter.setList(it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent().apply &#123;</span><br><span class="line">            component = ComponentName(</span><br><span class="line">                <span class="string">&quot;com.example.studynode&quot;</span>,</span><br><span class="line">                <span class="string">&quot;com.example.studynode.aidl.service.AidlService&quot;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，主要就是绑定了Service，至于IMyAidl这个类就是系统为我们刚刚写的aidl接口自动创建的类。然后我们在绑定服务中拿到了Binder并转换成了AIDL，最后通过按钮来进行通信，按下按钮就向Servlce多添加组数据，然后使用Recycler展示出来</p><blockquote><p>ComponentName：这个类主要用来定义可见一个应用程序组件，例如：Activity，Service，BroadcastReceiver或者ContentProvider。也就是说可以使用ComponentName来启动四大组件</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> IPC </tag>
            
            <tag> 跨进程通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin - 协程</title>
      <link href="2021/07/08/Kotlin-%E5%8D%8F%E7%A8%8B/"/>
      <url>2021/07/08/Kotlin-%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍Android中的协程</p><a id="more"></a><h1 id="Kotlin-协程"><a href="#Kotlin-协程" class="headerlink" title="Kotlin - 协程"></a>Kotlin - 协程</h1><blockquote><p>异步编程 之一 协程</p></blockquote><h3 id="协程的基本介绍"><a href="#协程的基本介绍" class="headerlink" title="协程的基本介绍"></a>协程的基本介绍</h3><p>协程就非常轻量级的线程，线程是由系统调度的。线程它在进行切换或造成阻塞的时候开销都很大，而协程它是有开发者来进行控制的，也是依赖于线程的，但是协程挂起的时候是不需要阻塞线程的，几乎是无代价的。所以协程也想用户状态下的线程，非常轻量级</p><p><strong>协程</strong>还有一点就是当它<code>挂起</code>的时候，它是不会阻塞线程的。它的底层实现就是异步处理阻塞任务</p><blockquote><p>挂起：挂起其实就是用 suspend来修饰一个函数。被suspend修饰的函数称为挂起函数</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>第一步肯定是添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1&quot;</span></span><br></pre></td></tr></table></figure><h4 id="GlobalScope"><a href="#GlobalScope" class="headerlink" title="GlobalScope"></a>GlobalScope</h4><p>Kotlin中GlobalScope 类提供了几个协程构造函数</p><ol><li><p><strong>launch</strong></p><h5 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h5><p>launch是CoroutineScope的扩展函数，接受3个参数，前面两个都是常规参数，最后一个是对象式函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">launch</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="function"><span class="params">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="function"><span class="params">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: Job</span><br></pre></td></tr></table></figure><p>这样的话就可以采用闭包的写法：() 里面写常规参数，{} 里面写函数式对象的实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GlobalScope.launch(Dispatchers.Unconfined) &#123;...&#125;</span><br></pre></td></tr></table></figure><ol><li><p>第一个参数CoroutineContext</p><p>网上有说可以理解为协程的上下文，但按功能来说，它就是协程的线程调度器，有4种线程模式，用来指定运行线程：</p><ul><li><p>Dispatchers.Main</p><blockquote><p>使用这个调度器在Android主线程上运行一个协程，可以用来更新UI</p></blockquote></li><li><p>Dispatchres.IO</p><blockquote><p>使用这个调度器可以在主线程之外执行磁盘或网络I/O，在线程池中执行</p></blockquote></li><li><p>Dispatchres.Default</p><blockquote><p>使用这个调度器可以在主线程之执行CPU密集型的工作，在线程池中执行</p></blockquote></li><li><p>Dispatchres.Unconfined</p><blockquote><p>直接在调用者的线程执行</p></blockquote></li></ul></li><li><p>第二个参数CoroutineStart</p><p>这个就是启动模式，通过更改启动模式可以达到你需要它的时候，再调用启动(使用LAZY)</p><ul><li><p>DEAFAULT </p><blockquote><p>默认的模式，立即执行协程体</p></blockquote></li><li><p>ATOMIC </p><blockquote><p>立即执行协程体，但在开始运行之前无法取消</p></blockquote></li><li><p>UNDISPATCHED</p><blockquote><p>立即在当前线程执行协程体，直到第一个 suspend 调用</p></blockquote></li><li><p>LAZY</p><blockquote><p>只有在需要的情况下运行</p></blockquote></li></ul></li><li><p>block</p><p>这个就是闭包的方法体，用来定义协程内部需要执行的操作</p></li></ol><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><ol><li><p>Job</p><p>协程构造函数的返回值，也可以把Job看成协程对象本身，协程的操作都在Job身上了</p><ul><li><p>Job.start</p><blockquote><p>启动协程，但除了将协程设置为Lazy外，都不用手动启动</p></blockquote></li><li><p>Job.join</p><blockquote><p>等待协程执行完毕</p></blockquote></li><li><p>Job.cancel</p><blockquote><p>取消一个协程</p></blockquote></li><li><p>Job.cancelAndJoin</p><blockquote><p>等协程执行完毕之后再取消</p></blockquote></li></ul></li></ol><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">priavte <span class="keyword">val</span> TAG = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    setContentView(R.layout.activity_main)</span><br><span class="line">    Log.e(TAG, <span class="string">&quot;主线程id：<span class="subst">$&#123;mainLooper.thread.id&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> job = GlobalScope.launch &#123;</span><br><span class="line">        delay(<span class="number">5000</span>)</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;协程执行结束 -- 线程id：<span class="subst">$&#123;Thread.currentThread().id&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    Log.e(TAG, <span class="string">&quot;主线程执行结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//Job中的方法</span></span><br><span class="line">job.isActive</span><br><span class="line">job.isCancelled</span><br><span class="line">job.isCompleted</span><br><span class="line">job.cancel()</span><br><span class="line">jon.join()</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://upload-images.jianshu.io/upload_images/1797490-e9c404941aafcb87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/398/format/webp" alt="img"></p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><p>在上面的launch中，我添加了等待5秒，但主线程还是可以继续执行。也就可以看出，launch是不会阻断主线程的</p></li><li><p><strong>async</strong></p><p><strong>async</strong>与<strong>launch</strong>的用法基本一致区别在于：async的返回值是Deferred。async可以支持并发，一般与await一同使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">&quot;async&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        GlobalScope.launch &#123;</span><br><span class="line">            <span class="keyword">val</span> toDayTime = GlobalScope.async &#123;</span><br><span class="line">                getThisTime()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> yesTerDay = GlobalScope.async &#123;</span><br><span class="line">                getYesterdayTime()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> time = toDayTime.await() + yesTerDay.await()</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;昨天时间 和 今天时间为 --&gt; <span class="variable">$time</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getThisTime</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        delay(<span class="number">3000</span>)</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;getThisTime: 这里已经执行完毕&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;3-&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getYesterdayTime</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        delay(<span class="number">5000</span>)</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;getYesterdayTime: 这里也已经执行完毕&quot;</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;7&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20210705110146134.png" alt="image-20210705110146134"></p><p>这里也可以看出async是不阻塞线程的，也就是是getThisTime()和getYestertdayTime()是同时进行的.所以获取到<code>time</code>的时间是5s，而不是8s。</p><blockquote><p>launch 没有返回值，或者说返回只是 job ，能够知道任务的状态，却不能携带返回结果。async 有返回值，也就是返回的是 Deferred ,它是继承的 job ，所有job有的，它都有，还具备了job没有的携带数据回来的能力。<br>所以， launch 可以用来运行不需要操作结果的协程（如文件删除，创建等）， async 可以用来运行异步耗时任务并且需要返回值的任务（网络请求，数据库操作，文件读写等）。</p></blockquote></li><li><p>withContext</p><p>withContext这个函数主要用来切换到指定的线程，并且再withContext闭包结束之后再切换回之前的线程</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">coroutineScope.launch(Dispatchers.Main) &#123;      <span class="comment">//  在 UI 线程开始</span></span><br><span class="line">    <span class="keyword">val</span> image = withContext(Dispatchers.IO) &#123;  <span class="comment">// 切换到 IO 线程，并在执行完成后切回 UI 线程</span></span><br><span class="line">        getImage(imageId)                      <span class="comment">// 将会运行在 IO 线程</span></span><br><span class="line">    &#125;</span><br><span class="line">    avatarIv.setImageBitmap(image)             <span class="comment">// 回到 UI 线程更新 UI</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ol><h4 id="非GlobalScope的API"><a href="#非GlobalScope的API" class="headerlink" title="非GlobalScope的API"></a>非GlobalScope的API</h4><ol><li><p><strong>runBlocking</strong></p><p>runBlocking与launch的功能基本一致，不同在于runBlocking是会阻塞线程的(和Thread.sleep()一样)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">&quot;runBlocking&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        runBlocking &#123;</span><br><span class="line">            <span class="keyword">val</span> a = await()</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;onCreate: --&gt; <span class="variable">$a</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        repeat(<span class="number">8</span>) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;主线程执行<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">await</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        delay(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;等待时间已过期&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20210705115001967.png" alt="image-20210705115001967"></p></li></ol><h3 id="协程体-挂起函数"><a href="#协程体-挂起函数" class="headerlink" title="协程体(挂起函数)"></a>协程体(挂起函数)</h3><p>协程体是一个用suspend关键字修饰的一个函数类型，也就是挂起函数。注意：挂起函数只能在协程中或其他挂起函数中使用，而且它是顺序执行的，下面将演示一下顺序执行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> TAG: String = <span class="string">&quot;launch&quot;</span></span><br><span class="line">overrid <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    GlobalScope.launch&#123;</span><br><span class="line">        <span class="keyword">val</span> name = getName()</span><br><span class="line">        <span class="keyword">val</span> userInfo = getUserInfo(name)</span><br><span class="line">        Log.e(TAG,<span class="string">&quot;userInfo --&gt; <span class="subst">$&#123;userInfo&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    repeat(<span class="number">8</span>)&#123;</span><br><span class="line">        Log.e(TAG,<span class="string">&quot;在主线程执行 --&gt; <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String&#123;</span><br><span class="line">    delay(<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Tom&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getUserInfo</span><span class="params">(name: <span class="type">String</span>)</span></span>: String&#123;</span><br><span class="line">    delay(<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;userInfo.Name --&gt; <span class="variable">$token</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20210705104310480.png" alt="image-20210705104310480"></p><h4 id="挂起与恢复"><a href="#挂起与恢复" class="headerlink" title="挂起与恢复"></a>挂起与恢复</h4><p>协程之外线程里肯定还有需要执行的代码，我们来看看前面的代码在挂起后何时才能恢复执行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getToken</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">  delay(<span class="number">1</span>)</span><br><span class="line">  Log.d(TAG, <span class="string">&quot;getToken 开始执行，时间:  <span class="subst">$&#123;System.currentTimeMillis()&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;ask&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getResponse</span><span class="params">(token: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">  delay(<span class="number">2</span>)</span><br><span class="line">  Log.d(TAG, <span class="string">&quot;getResponse 开始执行，时间:  <span class="subst">$&#123;System.currentTimeMillis()&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;response&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setText</span><span class="params">(response: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">  Log.d(TAG, <span class="string">&quot;setText 执行，时间:  <span class="subst">$&#123;System.currentTimeMillis()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GlobalScope.launch(Dispatchers.Unconfined) &#123;</span><br><span class="line">  Log.d(TAG, <span class="string">&quot;协程 开始执行，时间:  <span class="subst">$&#123;System.currentTimeMillis()&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> token = getToken()</span><br><span class="line">  <span class="keyword">val</span> response = getResponse(token)</span><br><span class="line">  setText(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">  Log.d(TAG, <span class="string">&quot;主线程打印第<span class="variable">$i</span> 次，时间:  <span class="subst">$&#123;System.currentTimeMillis()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://upload-images.jianshu.io/upload_images/1785445-d23383aef9745388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/406/format/webp" alt="img"></p><p>协程挂起后，虽然延迟的时间到了，但是还得等到线程空闲时才能继续执行，这里要注意，协程可没有竞争 CPU 时间段，协程挂起后即便可以恢复执行了也不是马上就能恢复执行。简单来说，就是协程挂起之后想要恢复，必须得等到线程空闲了才可以继续，不然继续等</p><h3 id="协程生命周期"><a href="#协程生命周期" class="headerlink" title="协程生命周期"></a>协程生命周期</h3><p>这里可以将所有有生命周期的类继承CoroutineSocpe，这样就可以让全部协程跟着生命周期结束</p><ul><li><p>如在activity里面使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MainActivity : AppCompatActivity(), CoroutineScope <span class="keyword">by</span> MainScope()&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestory()</span><br><span class="line">        cancel()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>在其他UI逻辑类中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivityFacede</span> : <span class="type">CoroutineScope &#123;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> job = Job()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext</span><br><span class="line">        <span class="keyword">get</span>() = Dispatchers.Main + job</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">destroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        job.cancel()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码都会在调用 destroy 的时候取消这个作用域中的协程运行</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回调地狱</title>
      <link href="2021/07/07/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/"/>
      <url>2021/07/07/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍一下什么是回调地狱</p><a id="more"></a><h1 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h1><blockquote><p>异步编程 之一 回调地狱</p></blockquote><p>对于回调地狱（Callback hell），想必大家都不陌生，但是在RxJava、Reactor等反应式编程框架兴起之后，对于回调地狱只是听得多，但是见得的少。所以接下来将介绍一下什么是回调地狱</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>要了解什么是回调地狱，那就得先了解一下什么是回调。简单来说回调就是：调用者在调用被调用者后，被调用者进行操作并将结果反馈给调用者。这个过程就是回调</p><p><img src="https://oscimg.oschina.net/oscnet/acb0cacf7f26f2967cf5fdd25543e5726c7.jpg"></p><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h3><h4 id="普通回调"><a href="#普通回调" class="headerlink" title="普通回调"></a>普通回调</h4><ol><li><p>回调嘛，得先创建个Callback接口，用来回调</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Callback</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个回调的接口，方便下面的实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">callback</span><span class="params">(value: <span class="type">T</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来我们就已工作中上司和下属来作为例子。创建上司</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上司肯定要有下属嘛，所以得就将下属传进来</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> subordinate: Subordinate) : Callback&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">callback</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;上司收到通知：工作<span class="subst">$&#123;value&#125;</span>已完成&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Boss安排任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">arrangeWorker</span><span class="params">(worker: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;上司开始安排任务&quot;</span>)</span><br><span class="line">        Thread&#123; <span class="comment">// 开启了个新线程来通知下属去工作</span></span><br><span class="line">            subordinate.work(worker, <span class="keyword">this</span>)</span><br><span class="line">        &#125;.start()</span><br><span class="line">        println(<span class="string">&quot;老板下班^^&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老板分配工作，员工去完成，如果<strong>完成过程是异步</strong>，则是<code>异步调用</code>，<strong>如果是同步的</strong>，则是<code>同步回调</code>，我们这里采用异步方式。</p></li><li><p>创建下属</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subordinate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">work</span><span class="params">(worker: <span class="type">String</span>, callback: <span class="type">Callback</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;下属接到指令，开始处理工作<span class="subst">$&#123;worker&#125;</span>&quot;</span>) <span class="comment">// 处理工作</span></span><br><span class="line">        callback.callback(<span class="string">&quot;<span class="subst">$&#123;worker&#125;</span>已完成&quot;</span>)<span class="comment">// 将任务完成结果反馈给上司</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下属类很简单，就只接受任务就行了(打工人冲！)</p></li><li><p>接下来就开始回调</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Boss(Subordinate()).run &#123;</span><br><span class="line">        arrangeWorker(<span class="string">&quot;扫地&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">上司开始安排任务</span><br><span class="line">上司下班^^</span><br><span class="line">下属接到指令，开始处理工作扫地</span><br><span class="line">上司收到通知：工作扫地已完成已完成</span><br></pre></td></tr></table></figure><p>上述代码可以看到异步回调是不会阻塞主线程的，上司在任务发布完之后就下班了，之后下属完成任务之后再通过另一个线程通知上司</p></li></ol><h4 id="地狱"><a href="#地狱" class="headerlink" title="地狱"></a>地狱</h4><p>既然要展示地狱，那肯定要再嵌套一层。设计如下</p><p><img src="https://oscimg.oschina.net/oscnet/cb5bb8167743c0286697d117b4e707b47cf.jpg"></p><ol><li><p>现在老板需要产品经理来设计产品并获得设计好的产品</p><p>更改一下arrangeWorker里面的内容</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> subordinate: Subordinate) : Callback&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">arrangeWorker</span><span class="params">(worker: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;老板通知产品经理进行设计&quot;</span>)</span><br><span class="line">        Thread &#123;</span><br><span class="line">            subordinate.work(worker, <span class="keyword">this</span>)</span><br><span class="line">        &#125;.start()</span><br><span class="line">        println(<span class="string">&quot;老板下班^^&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通知完产品经理，收到回调后，那就得让开发来进行开发了嘛</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> subordinate: Subordinate) : Callback&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">callback</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;老板通知：产品经理已将<span class="subst">$&#123;value&#125;</span>设计好了&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> newWork = <span class="string">&quot;<span class="variable">$value</span> 系统&quot;</span></span><br><span class="line">        println(<span class="string">&quot;产品经理设计完成，再将任务交给开发&quot;</span>)</span><br><span class="line">        Subordinate().work(newWork, <span class="keyword">object</span> : Callback&lt;String&gt; &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">callback</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">                println(<span class="string">&quot;开发：开发<span class="subst">$&#123;value&#125;</span>完毕&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">arrangeWorker</span><span class="params">(worker: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;老板通知产品经理进行设计&quot;</span>)</span><br><span class="line">        Thread &#123;</span><br><span class="line">            subordinate.work(worker, <span class="keyword">this</span>)</span><br><span class="line">        &#125;.start()</span><br><span class="line">        println(<span class="string">&quot;老板下班^^&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是再老板的回调中，再创建一个开发并开一个新的回调</p></li><li><p>运行看一下把，输入Ios</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">老板通知产品经理进行设计</span><br><span class="line">老板下班^^</span><br><span class="line">下属接到指令，开始处理工作Ios</span><br><span class="line">老板通知：产品经理已将Ios设计好了</span><br><span class="line">产品经理设计完成，再将任务交给开发</span><br><span class="line">下属接到指令，开始处理工作Ios 系统</span><br><span class="line">开发：开发Ios 系统完毕</span><br></pre></td></tr></table></figure></li></ol><p>好啦，一个简单的回调地狱就完成了，其实回调地狱就是回调嵌套回调，但是如果嵌套层数过多，仿佛掉入地狱，于是有了回调地狱的说法。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><blockquote><p>那这有啥优点嘛？</p></blockquote><ul><li>优点还是有的：回调地狱给我们带来什么？事实上，<strong>回调的代码如同管道一样</strong>，<strong>接收输入，并将处理后的内容输出至下一步</strong>。而回调地狱，则是多个管道连接，形成的一个流程，而各个子流程（管道）相互独立。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p>缺点很明显</p></blockquote><ul><li>当然缺点很明显：回调的方法虽然将子过程解耦，但是回调代码的可读性降低、复杂性大大增加。看得我头晕，真的</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Anroid </tag>
            
            <tag> Callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步操作(二)</title>
      <link href="2021/07/07/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-%E4%BA%8C/"/>
      <url>2021/07/07/%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>本篇将讲解Android夜间模式，用添加蒙版的方式来实现</p><a id="more"></a><h1 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h1><blockquote><p>异步编程 之一 异步操作+Rxjava</p></blockquote><p>讲到异步编程那就得先介绍一下Android当前的架构</p><h2 id="Android当前架构"><a href="#Android当前架构" class="headerlink" title="Android当前架构"></a>Android当前架构</h2><p>在Android操作系统启动之后，会启动一个名为<strong>Zygote</strong>的进程，<strong>Zygote</strong>是负责创建其它大部分应用程序进程的一个进程。<strong>Zygote</strong>进程启动、加载核心程序库和数据结构到内存后会创建一个Dalvik虚拟机（DVM）进程(<strong>SystemServer</strong>)，这个进程包含了大部分的系统服务(包括上面管理Activity，也就是ActivityManagerService)之后<strong>Zygote</strong>会为这个app创建一个DVM，在直接fork出一个子进程，这种架构的好处是同时启动多个App 时，多个App进程可以访问共享内存。</p><blockquote><p>简单来说就是，先创建Zygote，在通过Zygote创建SystemServer进行(系统服务进程)，最后在要创建的App创建Dalvik虚拟机</p></blockquote><blockquote><p>Zygote是Android系统创建进程的核心进程，负责启动Dalvik虚拟机，加载一些必要的系统资源和系统类，顺便启动SystemServer进行，最后在等待并处理App创建请求</p></blockquote><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><p>先来讲讲Android中最常见的异步方式</p><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><blockquote><p>AsyncTask在Kotlin中已被协程替代(可去&lt;异步编程(三)&gt;了解详情)，所以下方将会用Java来进行讲解</p></blockquote><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>AsyncTask是Android中自带的一个轻量级异步类，可以通过它轻松的实现工作线程和UI线程之间的通讯或切换</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>AsyncTask是一个抽象类，想要使用它，那么就得先创建一个类来继承它，在重写它的4个方法(一般只用重写4个方法)</p><ul><li><p>需要重写的4个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个就是要在后台做的工作,他将运行在后台工作线程上</span></span><br><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Result <span class="title">doInBackground</span><span class="params">(Params... params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时开始执行前的操作，运行在主线程上</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//doInBackground完成后调用</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实时更新，通过在doInBackground中调用publishProgress()方法</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskDome</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ProgressDialog progressDialog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_async_task_dome); </span><br><span class="line">        progressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">new</span> Download().execute(<span class="string">&quot;下载地址&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Download</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            progressDialog.show();</span><br><span class="line">            <span class="comment">//初始化进度条</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里假装在进行下载</span></span><br><span class="line">            Uri uri = Uri.parse(strings[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... integers)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里对进度条进行更新进度</span></span><br><span class="line">            progressDialog.setMessage(String.valueOf(integers[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方的代码中，我创建了一个Download类用来继承AsyncTask，并重写了它的4个方法。之后就只需要在Activity中创建一个Download对象，然后执行execute添加到队列中去</p></li></ul><h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>Rxjava是一个用来实现异步的、基于事件的第三方库(就把它理解成Android Handler 的升级版就行了)</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>我们先来了解一下Rxjava的概念</p><ul><li>RxJava的异步实现，就是通过一种扩展的观察者模式来实现的</li><li>Observable (可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable 和 Observer 通过 subscribe() 方法实现订阅关系，从而 Observable 可以在需要的时候发出事件来通知 Observer</li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ol><li><p>先创建一个Observer观察者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> : Observer&lt;String?&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(t: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;onNext --&gt; <span class="variable">$t</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(e: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;on error --&gt; <span class="variable">$e</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSubscribe</span><span class="params">(d: <span class="type">Disposable</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;onSubscribe --&gt; <span class="variable">$d</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onComplete</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;onComplete&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>再创建 Observable 被观察者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> observable: Observable&lt;String&gt; = Observable.create&#123;</span><br><span class="line">        it.onNext(<span class="string">&quot;continue!&quot;</span>)</span><br><span class="line">        it.onComplete()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>最后再进行关联</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer)</span><br></pre></td></tr></table></figure></li><li><p>当然，也可以直接使用链式调用来写</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(ObservableOnSubscribe&lt;String&gt; &#123;</span><br><span class="line">        it.onNext(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        it.onNext(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        it.onNext(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        it.onNext(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">        it.onComplete()</span><br><span class="line">    &#125;).subscribe(<span class="keyword">object</span> : Observer&lt;String?&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(t: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;onNext --&gt; <span class="variable">$t</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(e: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;on error --&gt; <span class="variable">$e</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSubscribe</span><span class="params">(d: <span class="type">Disposable</span>)</span></span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onComplete</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;perform !&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Scheduler-线程切换"><a href="#Scheduler-线程切换" class="headerlink" title="Scheduler (线程切换)"></a>Scheduler (线程切换)</h4><p>在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）</p><p>在RxJava内部已经内置了几个Scheduler，下面将会进行介绍</p><ul><li><p>Schedulers.newThread()</p><p>开启一个新线程并使用</p></li><li><p>Schedulers.io()</p><p>切换到<strong>I/O</strong>线程，进行操作</p><blockquote><p>I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程</p></blockquote></li><li><p>Schedulers.computation()</p><p>切换到计算而所使用的线程</p><blockquote><p>这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU</p></blockquote></li><li><p>AndroidSchedulers.mainThread()</p><p>切换回当前所在的主线程</p></li><li><p>subscribeOn()</p><p>说人话就是数据处理所在的线程</p></li><li><p>observeOn()</p><p>结果返回所在的线程</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜间模式</title>
      <link href="2021/07/07/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/07/07/%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>本篇将讲解Android夜间模式，用添加蒙版的方式来实现</p><a id="more"></a><h1 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h1><blockquote><p>本篇已Kotlin作为主要语言</p></blockquote><p>在Android中夜间模式算是一个必不可少、经常使用的一个功能。夜间模式的实现通常来说有两种方式，第一种是通过更换主题颜色来实现夜间模式、第二种是在所有界面上都添加一层灰色蒙版。下面将大概讲解蒙版方式</p><h3 id="主题方式"><a href="#主题方式" class="headerlink" title="主题方式"></a>主题方式</h3><p>主题方式简单来说就是将全局XML文件中的颜色都设置为主题颜色，然后再设计一套夜间模式下的主题颜色。通过更换主题来达到切换夜间模式的效果</p><h3 id="蒙版方式"><a href="#蒙版方式" class="headerlink" title="蒙版方式"></a>蒙版方式</h3><p>既然是添加蒙版了，那先得考虑一下将蒙版添加到哪里，剩下的待会再说</p><ul><li><p>蒙版添加位置</p><p>这里我们将蒙版添加到Activity窗口的根视图，也就是DecorView，下面为DecorView视图结构</p><p><img src="https://upload-images.jianshu.io/upload_images/7010367-4969918bb6d51d75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/530/format/webp" alt="img"></p><blockquote><p>而PhoneWindow是Window类的具体实现，一般可以通过该类去绘制窗口，是Activity和整个View系统交互的接口，所以没必要放在这里</p></blockquote></li></ul><p>既然位置找好了，下一步就是获取DecorView，毕竟是需要向里面添加一个蒙版，所以现在是要获取DecorView。</p><blockquote><p>DecorView是一个FrameLayout，DecorView内部又分为两部分，一部分是ActionBar，另一部分是ContentParent，即activity在setContentView对应的布局</p></blockquote><ul><li><p>获取DecorView</p><p>在Activity还在展示的时候，可以通过如下代码进行获取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getMDecorView</span><span class="params">(activity: <span class="type">Activity</span>)</span></span>: FrameLayout? &#123;</span><br><span class="line">    <span class="comment">// 为了处理在api小于17的时候isDestroyed无法使用的情况</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!activity.isFinishing &amp;&amp; !activity.isDestroyed) <span class="keyword">return</span> activity.window?.decorView <span class="keyword">as</span>? FrameLayout</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!activity.isFinishing) <span class="keyword">return</span> activity.window?.decorView <span class="keyword">as</span>? FrameLayout</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以这样写，写成扩展函数，方便后面的使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> Activity.decorView: FrameLayout?</span><br><span class="line">       <span class="keyword">get</span>() = (takeIf &#123;</span><br><span class="line">           <span class="comment">// 为了处理在api小于17的时候isDestroyed无法使用的情况</span></span><br><span class="line">           <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">               !isFinishing &amp;&amp; !isDestroyed</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               !isFinishing</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;?.window?.decorView) <span class="keyword">as</span>? FrameLayout</span><br></pre></td></tr></table></figure><blockquote><p>这里需要强转一下，getDecorView返回的类型是View (强转要用 as? 以免强转失败而崩溃)</p></blockquote></li></ul><p>接下来就是向DecorView中添加蒙版View了，但是添加的时机也是非常重要的。要是添加时机晚了，在进入新页面时，会有一个”<strong>闪一下</strong>“的过程</p><ul><li><p>添加蒙版时机</p><p>为了避免出现”<strong>闪一下</strong>“的问题，这里通过Handler.postAtFrontOfQueue()将添加蒙版View任务放入消息队列的头部，进行优先处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> handler = Handler(Looper.getMainLooper())</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置是否为夜间模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nightMode</span><span class="params">(activity: <span class="type">AppCompatActivity</span>, lightOff: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 为了避免界面展示出来后黑一下，所以将“添加蒙版”任务添加到主线程消息队列的头部，优先处理</span></span><br><span class="line">handler.postAtFrontOfQueue &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>添加蒙版View</p><p>添加的时机也解决了，剩下的自然就是添加View了。这里添加View是使用的<strong>动态构建布局</strong>，动态的进行添加和移除</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> handler = Handler(Looper.getMainLooper())</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 夜间模板统一Layout_id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> mId = <span class="string">&quot;darkMask&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> match_parent = ViewGroup.LayoutParams.MATCH_PARENT</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> wrap_content = ViewGroup.LayoutParams.WRAP_CONTENT</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> parent_id = <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置是否为夜间模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nightMode</span><span class="params">(activity: <span class="type">AppCompatActivity</span>, lightOff: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> (lightOff) &#123;</span><br><span class="line">            <span class="comment">// 为了避免界面展示出来后黑一下，所以将“添加蒙版”任务添加到主线程消息队列的头部，优先处理</span></span><br><span class="line">            handler.postAtFrontOfQueue &#123;</span><br><span class="line">                <span class="keyword">val</span> maskView = activity.View &#123;</span><br><span class="line">                    layout_id = mId <span class="comment">// 将LayoutId都指定为统一的id</span></span><br><span class="line">                    layout_width = match_parent</span><br><span class="line">                    layout_height = match_parent</span><br><span class="line">                    background_color = getColors(R.color.ui_status_dark_color)</span><br><span class="line">                &#125;</span><br><span class="line">                activity.decorView?.apply &#123;</span><br><span class="line">                    <span class="comment">// 判断View是否已经添加</span></span><br><span class="line">                    <span class="keyword">val</span> view = findViewById&lt;View&gt;(mId.toLayoutId())</span><br><span class="line">                    <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">                        addView(maskView)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若不是夜间模式，则移除View</span></span><br><span class="line">            activity.decorView?.apply &#123;</span><br><span class="line">                find&lt;View&gt;(mId)?.let &#123; removeView(it) &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>蒙版的背景这里是用的 <strong>60%</strong> 透明度的黑色背景(颜色值为：#99000000)</p></blockquote><p>这里的添加和移除都是对相同LayoutId的View进行的操作，避免出错</p></li><li><p>内联+扩展函数</p><p>上方的layout_id、layout_width、layout_height等都是使用了扩展函数，方便使用和提升可读性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> Context.<span class="title">View</span><span class="params">(<span class="keyword">init</span>: <span class="type">View</span>.() -&gt; <span class="type">Unit</span>)</span></span> =</span><br><span class="line">       View(<span class="keyword">this</span>).apply(<span class="keyword">init</span>)</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">inline</span> <span class="keyword">var</span> View.layout_id: String</span><br><span class="line">       <span class="keyword">get</span>() &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">set</span>(value) &#123;</span><br><span class="line">           id = value.toLayoutId()</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">inline</span> <span class="keyword">var</span> View.layout_width: <span class="built_in">Int</span></span><br><span class="line">       <span class="keyword">get</span>() &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">set</span>(value) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">inline</span> <span class="keyword">var</span> View.layout_height: <span class="built_in">Int</span></span><br><span class="line">       <span class="keyword">get</span>() &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">set</span>(value) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">inline</span> <span class="keyword">var</span> View.background_color: <span class="built_in">Int</span></span><br><span class="line">       <span class="keyword">get</span>() &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">set</span>(value) &#123;</span><br><span class="line">           setBackgroundColor(value)</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">inline</span> <span class="keyword">var</span> View.layout_visibility: <span class="built_in">Int</span></span><br><span class="line">       <span class="keyword">get</span>() &#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">set</span>(value) &#123;</span><br><span class="line">           visibility = value</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> String.<span class="title">toLayoutId</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">       <span class="keyword">var</span> id = java.lang.String(<span class="keyword">this</span>).bytes.sum()</span><br><span class="line">       <span class="keyword">if</span> (id == <span class="number">48</span>) id = <span class="number">0</span></span><br><span class="line">       <span class="keyword">return</span> id</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : View&gt;</span> View.<span class="title">find</span><span class="params">(id: <span class="type">String</span>)</span></span>: T? = findViewById(id.toLayoutId())</span><br></pre></td></tr></table></figure><p>基本上就完成了，剩下的可以创建一个Activity的基类，将添加蒙版方法放入其中，来进行统一管理</p><blockquote><p>至于上方的String.toLayoutId()：</p><p><code>View.setId(int id)</code>接收 int 类型的值，但 int 值没有语义，起不到标记控件的作用，所以扩展属性<code>layout_id</code>是 String 类型的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">var</span> View.layout_id: String</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span>(value) &#123;</span><br><span class="line">        id = value.toLayoutId()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#x27;将String转化成对应的Int值&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">toLayoutId</span><span class="params">()</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = java.lang.String(<span class="keyword">this</span>).bytes.sum()</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">48</span>) id = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 必须转化成 Int 才能调用<code>View.setId()</code>，采用的方法是：先将 String 转化成 byte 数组，然后对数组累加。但 Kotlin 中的 String 没有<code>getBytes()</code>，所以只能显示地构造<code>java.lang.String</code>。</p></blockquote></li></ul><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p>至于动画效果嘛，可以在添加蒙版View的时候先将透明度设置为0f，在使用属性动画使渐显示。移除的时候也可以先使用动画进行隐藏再移除</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nightAnimMode</span><span class="params">(activity: <span class="type">AppCompatActivity</span>, lightOff: <span class="type">Boolean</span>, animTime: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lightOff) &#123;</span><br><span class="line">            handler.postAtFrontOfQueue &#123;</span><br><span class="line">                <span class="keyword">val</span> maskView = activity.View &#123;</span><br><span class="line">                    layout_id = mId</span><br><span class="line">                    layout_width = match_parent</span><br><span class="line">                    layout_height = match_parent</span><br><span class="line">                    background_color = getColors(R.color.ui_status_dark_color)</span><br><span class="line">                    <span class="comment">// 先将透明度设置为0f，也就是先隐藏，后通过动画来显示</span></span><br><span class="line">                    <span class="keyword">this</span>.alpha = <span class="number">0f</span></span><br><span class="line">                &#125;</span><br><span class="line">                activity.decorView?.apply &#123;</span><br><span class="line">                    <span class="keyword">val</span> view = findViewById&lt;View&gt;(mId.toLayoutId())</span><br><span class="line">                    <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.addView(maskView).let &#123;</span><br><span class="line">                            <span class="comment">// 添加完View之后，再获取View来进行属性动画</span></span><br><span class="line">                            find&lt;View&gt;(mId)?.let &#123;</span><br><span class="line">                                <span class="keyword">val</span> animation = AlphaAnimation(<span class="number">0f</span>, <span class="number">1.0f</span>)</span><br><span class="line">                                animation.duration = animTime</span><br><span class="line">                                it.startAnimation(animation)</span><br><span class="line">                                it.alpha = <span class="number">1.0f</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            activity.decorView?.apply &#123;</span><br><span class="line">                find&lt;View&gt;(mId)?.let &#123;</span><br><span class="line">                    <span class="comment">// 先隐藏，后移除</span></span><br><span class="line">                    <span class="keyword">val</span> animation = AlphaAnimation(<span class="number">1.0f</span>, <span class="number">0f</span>)</span><br><span class="line">                    animation.duration = animTime</span><br><span class="line">                    it.startAnimation(animation)</span><br><span class="line">                    removeView(it)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android事件分发机制(二)</title>
      <link href="2021/07/07/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6-%E4%BA%8C/"/>
      <url>2021/07/07/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>Android事件分发机制理解与描述的第二篇，主要是先介绍事件分发的流程</p><a id="more"></a><h1 id="Android事件分发机制-二"><a href="#Android事件分发机制-二" class="headerlink" title="Android事件分发机制(二)"></a>Android事件分发机制(二)</h1><blockquote><p>本篇是个人对Android事件分发机制理解与描述的第二篇，主要是先介绍事件分发的流程</p></blockquote><p>下面将通过Android源码来讲解事件分发流程</p><h3 id="事件分发流程"><a href="#事件分发流程" class="headerlink" title="事件分发流程"></a>事件分发流程</h3><h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h4><p>事件最开始会由系统分发给Activity。来调用Activity.dispatchTouchEvent(MotionEvent e)</p><blockquote><p>注意，这个时候是还没有进入<code>控件</code>间的事件分发。这是因为Activity不是一个View，也不是一个ViewGroup</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Activity.dispatchTouchEvent</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123; </span><br><span class="line">        onUserInteraction(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;<span class="comment">// 分发了这个事件 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Activity.DispathcTouchEven()</code>中，我们可以看见，Activity通过<code>getWindow</code>获取<code>Window</code>抽象类，也就是获取<code>PhoneWindow</code>，在调用<code>PhoneWindow.superDispatchTouchEvent()</code>的方法继续将事件分发下去，但是PhoneWindow仍然还不是个View或ViewGroup，所以我们还要继续深入下去</p><blockquote><p>getWindow()返回的是一个Window抽象类，在Android中，唯一继承了Window的类就是PhoneWindow，所以在这里Activity就是在调用PhoneWindow.superDispatchTouchEvent(MotionEvent e)</p></blockquote><h4 id="PhoneWindow"><a href="#PhoneWindow" class="headerlink" title="PhoneWindow"></a>PhoneWindow</h4><p><code>PhoneWindow</code>是<code>Android</code>中最基本的窗口系统，每一个<code>Activity</code>都会创建<code>PhoneWindow</code>对象，是<code>Activity</code>和整个<code>View</code>系统交互的接口。但是在事件分发中，它就只是扮演一个中间角色，进行传递事件，所以这里我们不会太关心PhoneWindow</p><p>下面就先来看看<code>PhoneWindow.superDispatchTouchEvent(MotionEvent e)</code>这个方法吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PhoneWindow.java</span></span><br><span class="line"><span class="keyword">private</span> DecorView mDecor;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PhoneWindow.DecorView 内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">RootViewSurfaceTaker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>PhoneWindow.superDispatchTouchEvent(MotionEvent event)</code>的内部，是调用了一个<code>mDecor.superDispatchTouchEvent(event)</code>。这个<code>mDecor</code>其实是<code>Window</code>下面的<code>DecorView</code>，也就是说<code>PhoneWindow</code>内部是调用了<code>DecorView.superDispatchTouchEvent(MotionEvent event)</code></p><blockquote><p>这里再梳理一遍，首先系统将事件分发给到了Activity，Activity再将事件分发给PhoneWindow，PhoneWindow再将事件分发给到了DecorView。而DecorView是一个ViewGroup(一个继承与FrameLayout的ViewGroup)，所以接下来就是属于控件间的事件分发了</p></blockquote><p>所以<code>PhoneWindow</code>继续将事件传递到了<code>DecorView</code>，终于传递到<code>ViewGroup</code>上了，接下来就是属于控件间的事件分发了</p><h4 id="ViewGroup"><a href="#ViewGroup" class="headerlink" title="ViewGroup"></a>ViewGroup</h4><p>从上面就可以知道，第一个接受到事件的就是<code>DecorView</code>，而<code>DecorView</code>是继承<code>FrameLayout</code>，而<code>DecorView</code>内部也是直接调用了<code>super.dispatchTouchEvent(event)</code></p><p>所以控件间事件传递的起始方法就是<code>ViewGroup.dispatchTouchEvent(MotionEvent event)</code>，下面将讲解它是如何把事件传递给下一个控件的，是如何判断返回值标识事件是否被消费</p><ul><li><h5 id="传递规则"><a href="#传递规则" class="headerlink" title="传递规则"></a>传递规则</h5><p>因为想要将事件继续分发下去，所以再ViewGroup中肯定先要遍历一遍子View</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 允许修改默认的child获取规则, 但是一般情况下会获取</span></span><br><span class="line">    <span class="comment">// 先判断preorderedList中是否已经存有子View，有的话就直接在里面取出，没有的话就从childern[]中取</span></span><br><span class="line">    children[childIndex] <span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>) ? children[childIndex] : preorderedList.get(childIndex); </span><br><span class="line">    <span class="comment">// 省略通常不会影响流程的代码 </span></span><br><span class="line">    <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;<span class="comment">// 关键方法 </span></span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">        newTouchTarget = addTouchTarget(child, idBitsToAssign);<span class="comment">// 关键方法 </span></span><br><span class="line">        <span class="comment">// ... break; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码遍历的过程中，有一个关键判断执行了<code>ViewGroup.dispathTransformedTouchEvent()</code>这个方法。这个方法的作用就是判断传入进来的<code>child</code>是否为空，如果为空的话，就执行<code>super.dispatchTouchEvent(event)</code>，不为空的话就执行<code>child.dispatchTouchEvent(event)</code>。正常情况下都是不为空的，所以就是在这里将事件传递给了子<code>View</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span></span></span><br><span class="line"><span class="function"><span class="params">           View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">           <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">               handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               handled = child.dispatchTouchEvent(event);</span><br><span class="line">           &#125;</span><br><span class="line">...</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递给子View之后，返回True就表示子控件接收到了这个事件，注意在这个方法下面还要一个重要的方法，那就是<code>newTouchTarget = addTouchTarget(child, idBitsToAssign)</code>这个方法只会在返回为True，也就是子控件接受到了事件的时候才会执行。这个方法的主要作用就是把当前这个接收事件的子控件转换成了<code>TouchTarget</code>对象并赋值给了<code>mFirstTouchTarget</code></p><p>至于为什么要这样做，那是因为，在这个循环的外面有几层这样的判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN) || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123; </span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">        <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="comment">// 遍历代码 </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层判断是判断<code>ACTION_CANCEL</code>事件和被当前控件拦截事件。第二层判断是限制了事件只能是<code>ACTION_DOWN</code>，只有事件是<code>ACTION_DOWN</code>的时候才会继续执行，也就是说<code>ACTION_MOVE</code>等中间事件，是不会执行遍历代码的。第三层判断是只有之前能接收到事件的控件才会继续接收事件，之前不能接收到事件的控件是不会分发事件的</p><blockquote><p>简单点来说就是ViewGroup第一次会遍历所有控件并分发事件，接收到事件的View就会被转成TouchTarget记录起来。之后的中间事件(ACTION_MOVE等…)都只会传递给TouchTarget</p></blockquote><blockquote><p>而mFirstTouchTarget其实是一个链表, 会把事件分发给链表中的所有子控件, 这是针对多点触控的处理, 不是本文关注的问题, 不作分析, 只需要知道其他非<code>ACTION_DOWN</code>事件的传递不会重新遍历所有子控件, <code>ACTION_DOWN</code>是整个操作(一系列事件)的起点, 在这时候就已经确定后续事件需要传递的子控件了</p></blockquote></li></ul><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>分析到这里我们已经知道事件分发机制是怎样在控件间传递事件的了。</p><p>父控件遍历子控件, 询问所有子控件是否接收<code>ACTION_DOWN</code>事件, 然后保存接收事件的子控件到链表, 确定后续事件的分发对象, 当其他事件传递给父控件时直接传递事件给链表中的子控件. 当没有子控件接收<code>ACTION_DOWN</code>时执行<code>View.dispatchTouchEvent</code>，下一篇将专门分析<code>View</code>类</p><h3 id="拦截"><a href="#拦截" class="headerlink" title="拦截"></a>拦截</h3><h4 id="Activity处拦截"><a href="#Activity处拦截" class="headerlink" title="Activity处拦截"></a>Activity处拦截</h4><p>因为Activity.dispatchTouchEvent(MotionEvent e)是整个事件分发的起点站，所以主要重写这个方法，不调用<code>PhoneWindow.superDispatchTouchEvent(MotionEvent ev)</code>就可以使得整个Activity内的控件收不到任何事件</p><h4 id="ViewGroup处拦截"><a href="#ViewGroup处拦截" class="headerlink" title="ViewGroup处拦截"></a>ViewGroup处拦截</h4><p>可以通过<code>ViewGroup.onInterceptTouchEvent</code>来拦截特定的事件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 事件分发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android事件分发机制(一)</title>
      <link href="2021/07/07/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6-%E4%B8%80/"/>
      <url>2021/07/07/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>Android事件分发机制理解与描述的第一篇，主要是先介绍事件分发机制的概念</p><a id="more"></a><h1 id="Android事件分发机制-一"><a href="#Android事件分发机制-一" class="headerlink" title="Android事件分发机制(一)"></a>Android事件分发机制(一)</h1><blockquote><p>本篇是个人对Android事件分发机制理解与描述的第一篇，主要是先介绍事件分发机制的概念</p></blockquote><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>任何对手机屏幕的操作都离不开事件分发机制，清楚事件分发机制可以更好的去实现复杂交互</p><blockquote><p>事件分发机制用来解决的问题都是在Android控件之间传递用户对屏幕的操作，如滑动等</p></blockquote><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>在Android中，系统不会将用户操作这一整个<strong>操作</strong>都传递下来，而是会分成多个<strong>事件</strong>一个一个下发</p><blockquote><p>系统会把用户的操作分解成一系列的事件, 然后逐个传递这些事件. 事件可以看作是用户操作过程的节点, 每次分发只会分发一个事件.</p></blockquote><p>比如说，用户滑动了一下屏幕，那么系统将会传递-手指接触屏幕 –&gt; 移动手指(或者多个) –&gt; 手指离开屏幕. Android事件分发机制所传递的就是这些分解之后的事件(手指接触屏幕, 移动手指, 手指离开屏幕).</p><p>在Android这些操作都是用<code>MotionEvent</code>类来代表。大部分事件分发机制中涉及的方法里面都包含一个<code>MotionEvent</code>实例，下面将介绍一下<code>MotionEvent</code>有那些类型</p><ul><li><code>ACTION_DOWN</code>：代表着手指首次接触屏幕，是所有操作的第一步，也就是说在传递事件的过程中，所以事件分发的第一个事件总是<code>ACTION_DOWN</code></li><li><code>ACTION_MOVE</code>：代表着手指在屏幕上移动，主要是用来区分点击还是滑动</li><li><code>ACTION_UP</code>：代表着手指从屏幕上移开，是所有操作的最后一步，也就是是在事件传递中，所以事件序列里面最后一个事件分发的总是<code>ACTION_UP</code></li><li><code>ACTION_CANCEL</code>：代表着事件传递被中断，也就是说事件被消费了，消费概念将在下面介绍</li><li><code>ACTION_POINTER_DOWN</code>：代表着又有新的手指接触屏幕</li><li><code>ACTION_POINTER_UP</code>：代表又有别的手指离开屏幕</li></ul><h3 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h3><p>在Android中事件是层层传递的，先传给最上方的控件，在由最上方的控件决定要不要使用掉这个事件(也就是销毁掉事件，自己来处理)来是否继续传递事件。消费的意思是指被控件消耗掉了。</p><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>事件分发机制的目的是在控件间传递事件, 那么分发的对象自然是控件了</p><blockquote><p>控件即是分发者也是分发对象.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 事件分发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>介绍MVP,MVVM框架模式</title>
      <link href="2021/04/26/%E4%BB%8B%E7%BB%8DMVP-MVVM%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/04/26/%E4%BB%8B%E7%BB%8DMVP-MVVM%E6%A1%86%E6%9E%B6%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>介绍MVP和MVVM的优劣，以及使用场景</p><a id="more"></a><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>简单来说就是数据驱动页面</p><p>MVVM是由3部分组成（Model，View，ViewModel）</p><ul><li><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>使用MVVM可以使开发者不用专注于更新视图，只需要去专注实现逻辑</li></ul></li><li><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>由于View与ViewModel的绑定，使得追踪异常变得十分不方便</li><li>数据双向绑定不利于代码的重用，每一个不同的View都需要一个不同的ViewModel</li></ul></li><li><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>在页面复杂、逻辑较多、数据频繁更新的场景，就可以使用MVVM，Activity/Fragment只用将数据展示到控件上去</li></ul></li></ul><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP本质上就是为了解耦而产生的，分为3部分（Model(管理数据)，View(展示数据)，Presenter(业务逻辑)）</p><ul><li><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>将模型与视图分离，提高了维护性</li><li>容易测试，将业务逻辑从Activity/Fragment中抽取出来。可以方便的进行单元测试</li></ul></li><li><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>由于对视图的渲染都放在Presenter中，这会导致视图频繁的与Presenter进行交互，一旦视图发现了错误，需要更改，那么更它连着的Presenter也需要进行更改</li></ul></li><li><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>在数据单一，逻辑简单的场景中，使用MVP更好</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类型介绍</title>
      <link href="2021/04/26/%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>2021/04/26/%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍一些常用类型于它的包装类的创建于使用</p><a id="more"></a><h1 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><blockquote><p>本篇将记录那些只知道用但不明白具体的类型</p></blockquote><h4 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h4><ul><li><p>LiveData是与数据实体类(POJO类)是一样的，它们都是负责数据存储</p></li><li><p>LiveData也是一个观察者模式的数据实体类，可以与注册它的观察者回调数据是否更新</p></li><li><p>LiveData还能绑定Activity / Fragment，只在它们生命周期处于活跃状态时才触发回调</p></li><li><p>代码展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _photoListLive = MutableLiveData&lt;String&gt;()</span><br><span class="line"><span class="keyword">val</span> photoListLive: LiveData&lt;String&gt;</span><br><span class="line">    <span class="keyword">get</span>() = _photoListLive</span><br></pre></td></tr></table></figure><p>LiveData一般都是与MutableLiveData一同使用</p></li><li><p>LiveData在实体类里可以通知指定某个字段的数据更新.（也就是只要发生有点变化，都会进行回调）</p></li></ul><h4 id="MutableLiveData"><a href="#MutableLiveData" class="headerlink" title="MutableLiveData"></a>MutableLiveData</h4><ul><li>MutableLiveData的父类是LiveData</li><li>MutableLiveData则是完全是整个实体类或者数据类型变化后才通知，不会细节到某个字段</li></ul><h4 id="Mutable-List"><a href="#Mutable-List" class="headerlink" title="Mutable List"></a>Mutable List</h4><ul><li><p>在Kotlin中MutableList属于可变类型</p></li><li><p>MutableList在本质上就是将不可变的List变为可变，随便增加了 插入、删除、替换等方法</p></li><li><p>创建MutableList</p><p>mutableListOf()</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空的可变list</span></span><br><span class="line"><span class="keyword">val</span> numNull = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br></pre></td></tr></table></figure><p>mutableListOf(vararg elements: T)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建多个元素的可变list</span></span><br><span class="line"><span class="keyword">val</span> numMutable = mutableListOf(<span class="string">&quot;Alfred&quot;</span>, <span class="number">29</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;180cm&quot;</span>, <span class="string">&quot;70kg&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>除此之外，还有add(),addAll(),remove(移除指定元素),removeAt(移除指定位置元素),removeAll(elements: Collection<E>)(删除集合),clear(清除所有元素),set(替换指定位置元素)</p></li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ul><li><p>在Kotlin中List是属于不可变类型</p></li><li><p>创建方法</p><p>listOf()用于创建没有元素的空List</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空List</span></span><br><span class="line"><span class="keyword">val</span> numbersNull = listOf&lt;<span class="built_in">Int</span>&gt;()</span><br></pre></td></tr></table></figure><p>listOf(element: T)创建只有一个元素的List</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建只有一个元素的List</span></span><br><span class="line"><span class="keyword">val</span> numbersOne = listOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>listOf(vararg elements: T)创建拥有多个元素的List</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建多个元素的List</span></span><br><span class="line"><span class="keyword">val</span> numbersMuch = listOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>因为List是不可变类型，所以是不能对List进行增删改的操作的</p></li><li><p>List是继承至Collection接口，它们几乎上只实现了isEmpty()、size属性、get()、contains()等方法。</p></li></ul><h4 id="Array-List"><a href="#Array-List" class="headerlink" title="Array List"></a>Array List</h4><ul><li><p>简单来说就是List接口的可调整大小的数组实现，实现所有可选列表操作，并允许所有元素，包括 null</p></li><li><p>ArrayList的方法中没有锁，所以不是线程安全的</p></li><li><p>其内部实现是一个数组结构，我们可以根据索引找到具体的内容，也是有序的</p></li><li><p>创建方法</p><p>ArrayList可以创建List，也可以创建自己</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list : List&lt;String&gt; = arrayListOf()</span><br></pre></td></tr></table></figure><p>List是不可以使用List来创建自己，只能用上面的方法来创建。当使用ArrayList来创建List时，此时它是一个List对象了，有些ArrayList有但是List没有的属性和方法，它就不能再用了。 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list : ArrayList&lt;String&gt; = arrayListOf()</span><br></pre></td></tr></table></figure><p>而这样创建一对象则保留了ArrayList的所有属性。 </p></li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HashSet实现了Collection的set接口</li><li>HashSet是不允许集合中有重复的值，当准备使用HashSet时，首先要确保对象已经重写了<strong>equals</strong>()和<strong>hashCode</strong>()方法，这样才能比较对象的值是否相等</li><li>add(o : Objecy)方法，用来向Set中添加元素，当元素重复时会返回false，成功则会返回True</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>HashMap实现了Collection的Map接口，Map接口对键值对进行映射（也就是是存储键值对）</li><li>Map中也是不允许出现重复的值</li><li>虽然HashMap是非线程安全的，但是Collection提供的方法能保证HashMap synchronized（也就是多个线程访问时，能保证只有一个线程更改Map）</li><li>put(Key : Object ,value : Object )用来将元素添加到map中</li></ul><h4 id="ArrayMap"><a href="#ArrayMap" class="headerlink" title="ArrayMap"></a>ArrayMap</h4><ul><li><h4 id="ArraySet"><a href="#ArraySet" class="headerlink" title="ArraySet"></a>ArraySet</h4></li></ul><p>-</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HTTP的一些介绍</title>
      <link href="2021/04/26/%E5%85%B3%E4%BA%8EHTTP%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%8B%E7%BB%8D/"/>
      <url>2021/04/26/%E5%85%B3%E4%BA%8EHTTP%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍并分析Http请求</p><a id="more"></a><h1 id="关于HTTP的一些介绍"><a href="#关于HTTP的一些介绍" class="headerlink" title="关于HTTP的一些介绍"></a>关于HTTP的一些介绍</h1><blockquote><p>理论</p></blockquote><h2 id="HTTP的介绍"><a href="#HTTP的介绍" class="headerlink" title="HTTP的介绍"></a>HTTP的介绍</h2><p>在Android中，绝大多数的应用网络通信都是基于Http协议的，Http协议处于应用层，应用层协议就是为了来规范传输格式</p><h2 id="HTTP工作流程"><a href="#HTTP工作流程" class="headerlink" title="HTTP工作流程"></a>HTTP工作流程</h2><ol><li><p>客户端连接到服务器</p><p>客户端发起一个TCP请求到服务器，经过3次握手与服务器建立TCP连接</p></li><li><p>发送数据</p><p>按照Http协议规定的格式来组装数据，通过TCP连接向服务器发送报文</p></li><li><p>服务器接收请求报文并处理</p><p>服务器同过TCP连接接收到客户端发送的请求报文，按照规定格式解读报文，根据解读来生产对应的响应报文</p></li><li><p>服务器将生成的响应报文发送给客户端</p><p>服务器通过TCP连接将响应报文发送给客户端</p></li><li><p>关闭TCP连接</p><p>在服务器将报文发给客户端之后，会将connection模式设置为close，则是服务器主动关闭连接，客户端被动关闭。如果connection模式设置为keepalive，则TCP连接不会马上关闭，还可以继续发送请求</p></li><li><p>客户端处理响应报文</p><p>按照规则进行解析</p></li></ol><h2 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h2><h4 id="请求报文-请求数据"><a href="#请求报文-请求数据" class="headerlink" title="请求报文(请求数据)"></a>请求报文(请求数据)</h4><ul><li><p>请求报文由<strong>请求行</strong>、<strong>请求头部</strong>、<strong>空行</strong>、<strong>请求数据</strong>四部分组成</p></li><li><p>请求数据(这里以百度搜索’<em>白色</em>‘进行示范)</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210426095329.png"></p><blockquote><p><strong>Request URL</strong> ：请求地址</p><p><strong>Request Method</strong>：请求模式</p><p><strong>Status Code</strong>：请求状态码</p><p><strong>Remote Address</strong>：远程主机IP地址</p></blockquote><p>请求格式如下图</p><p><img src="https://easyreadfs.nosdn.127.net/image_edc89a772041476cb6f7d0c8e65819e9"></p></li><li><p>请求参数</p><p>请求参数不在GET中使用，而是在POST中使用，它表示向服务器传递附加的参数，格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;seeType&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;source&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;userId&quot;</span>:<span class="string">&quot;30&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul><li><p>请求行是由*<strong>请求方式**<em>、</em></strong>URL地址*<strong>、**<em>协议名+版本号</em></strong>组成</p><blockquote><p>POST(请求方式) /lotto/android/v1.0/order-group/queryOrderGroupPersonInfo(URL地址) HTTP/1.1(协议版本)</p></blockquote></li><li><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><p>HTTP请求的方式总共有8种，分别是GET、POST、HEAD、PUT、DELETE、TRANCE、CONNECTON、OPTIONS。下面介绍常用的2种</p><ul><li><p><strong>GET</strong></p><p>获取Request URL下所以资源(也就是不带参数)</p></li><li><p><strong>POST</strong></p><p>在Request URL所表示的资源后附加参数，以便于向服务器发送请求数据(也就是可以传递参数来获取指定的资源)</p></li></ul></li><li><h5 id="URL地址"><a href="#URL地址" class="headerlink" title="URL地址"></a>URL地址</h5><p>为请求对应的URL地址，它和报文头中的Host属性组成完整的请求URL地址</p></li><li><h5 id="使用协议名称-版本号"><a href="#使用协议名称-版本号" class="headerlink" title="使用协议名称+版本号"></a>使用协议名称+版本号</h5><p>也就是字面意思，使用的协议和它当前的版本</p></li></ul><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>在请求行之后会有0或多个请求头部</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210426103319.png"></p><blockquote><p><strong>accept-ranges</strong>：表明其支持部分的请求的标志物，此字段表示可用于定义范围的单位</p><p><strong>age</strong>：age的值一般是近于0的，像是这样Age:0，这样只能在原服务器获取，否则它通常是根据代理的当前日期和**<em>Date**</em>HTTP响应中包含的通用头部之间的差异来计算的。</p></blockquote><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="2021/04/15/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>2021/04/15/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="付鑫博"><a href="#付鑫博" class="headerlink" title="付鑫博"></a>付鑫博</h2><p>电话: 18126157220 丨邮箱: <a href="mailto:&#x61;&#x36;&#49;&#x39;&#x31;&#57;&#x39;&#48;&#57;&#49;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x61;&#x36;&#49;&#x39;&#x31;&#57;&#x39;&#48;&#57;&#49;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a> 丨现居城市: 深圳 </p><p>个人网站: <a href="https://brokes6.github.io/">https://brokes6.github.io/</a></p><p>求职意向: Android工程师</p><h3 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h3><hr><p>Android开发：Java（熟练），Kotlin（熟练） </p><p>其他：HTML+CSS，Vue，SQL</p><p>软件：office办公软件，Axure RP，PS</p><h3 id="在校经历"><a href="#在校经历" class="headerlink" title="在校经历"></a>在校经历</h3><hr><blockquote><p>2017年09月 - 至今 (未毕业)</p></blockquote><p><strong>深圳鹏城技师学校</strong>   -  移动互联网 - 文商学院</p><ol><li>学院内移动App比赛 第二名 （项目地址: <a href="https://github.com/brokes6/Campus-Forum">https://github.com/brokes6/Campus-Forum</a> ）</li><li>为企业（华融证券）做过 阅读类定制软件（项目地址: <a href="https://github.com/brokes6/Reading">https://github.com/brokes6/Reading</a> ）</li><li>学院内开发比赛 第一名</li><li>学院内移动App比赛 第一名 （项目地址: <a href="https://github.com/brokes6/D-BiliBili">https://github.com/brokes6/D-BiliBili</a> ）</li></ol><h3 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h3><hr><blockquote><p>2020年04月 - 2020年06月</p></blockquote><p><strong>云音乐</strong>(<a href="https://github.com/brokes6/MusicPlayer">brokes6/MusicPlayer: MusicPlayerDome音乐软件（已使用网易云音乐API） (github.com)</a>)</p><ul><li>整个项目分为了前台显示和后台服务，使效率更高。前台显示用于显示各种UI，后台服务用于管理、控制音乐</li><li>使用了自定义View来实现播放界面中的粒子效果，可随背景颜色来动态改变</li></ul><blockquote><p>2020年10月 - 2020年12月</p></blockquote><p><strong>DaliDali</strong> B站(<a href="https://github.com/brokes6/D-BiliBili">brokes6/D-BiliBili: ❤ 仿B站Android软件,数据来源于网络爬虫 (github.com)</a>)</p><ul><li>采用了MVVM设计模式，低耦合、可重用性</li><li>视频播放采用了GSYVideoPlayer+DanmakuFlameMaster（弹幕库）</li><li>网络请求采用了RxJava+Retrofit2，保存数据采用了Room+LiveDate</li><li>大部分View都采取了分块加载，提升效率</li></ul><blockquote><p>2021年4月1 - 至今</p></blockquote><p><strong>AnyRandom</strong>(<a href="https://github.com/brokes6/AnyRandom">brokes6/AnyRandom: 随机选择，完全本地（除了加载图片以外），UI精美👍 (github.com)</a>)</p><ul><li>使用了Kotlin+ViewModel+Room制作的本地随机选择软件</li><li>使用了JetPack的库来进行开发</li></ul><h3 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h3><hr><p>在校个人经验丰富，个人做过几个热门类型的项目（高仿的B站，网易云音乐等），熟悉使用JetPack中的库。有过给上市公司做 定制软件的项目经验</p><p><em>感谢您花时间阅读我的简历，期待能有机会和您共事。</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中使用ViewModel的数据共享</title>
      <link href="2021/04/15/Kotlin%E4%B8%AD%E4%BD%BF%E7%94%A8ViewModel%E7%9A%84%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
      <url>2021/04/15/Kotlin%E4%B8%AD%E4%BD%BF%E7%94%A8ViewModel%E7%9A%84%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>本篇将讲述对于使用ViewModel来进行Fragment之间的数据共享，使用的技术为ViewModel，dataBinding</p><a id="more"></a><h1 id="Kotlin中使用ViewModel的数据共享"><a href="#Kotlin中使用ViewModel的数据共享" class="headerlink" title="Kotlin中使用ViewModel的数据共享"></a>Kotlin中使用ViewModel的数据共享</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p>本篇将讲述对于使用ViewModel来进行Fragment之间的数据共享，使用的技术为ViewModel，dataBinding</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>对于ViewModel是属于Androidx包下的JetPack组件，所以只需要项目使用了Androidx，就可直接使用，无需引入额外依赖包</p><h3 id="代码教程"><a href="#代码教程" class="headerlink" title="代码教程"></a>代码教程</h3><p>在进行编码之前想要做一些准备工作，给项目开启dataBinding，在项目级的build.gradle中，defaultConfig闭包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig&#123;</span><br><span class="line">    ...</span><br><span class="line">    dataBinding.enabled = <span class="keyword">true</span> </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就开启了dataBinding了</p><ol><li><p>创建ViewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> number: MutableLiveData&lt;<span class="built_in">Int</span>&gt; = MutableLiveData(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">()</span></span>: MutableLiveData&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        number.value = number.value?.plus(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        number.value = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个继承ViewModel的类，在这个类中创建一个MutableLiveData的变量，并给他设置获取和设置值的方法</p></li><li><p>在Activity中获取ViewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MyViewModel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        viewModel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(MyViewModel::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取ViewModel是通过<strong>ViewModelProvider</strong>(this).get(刚刚创建的ViewModel::class.java)</p><blockquote><p>这里原本可以使用<strong>ViewModelProviders</strong>.of(Activity).get(刚刚创建的ViewModel::class.java)，但是ViewModelProviders已经被淘汰了</p></blockquote></li><li><p>接下来就是创建2个Fragment，并在Fragment中获取Activity的ViewModel</p><ol><li><p>BlankFragment</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210104194138.png" alt="image-20210104194137046"></p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlankFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="comment">//这里创建了一个变量，将它的值设置为ActivityViewModel，括号里面只需要输入ViewModel类型即可</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel <span class="keyword">by</span> activityViewModels&lt;MyViewModel&gt;()</span><br><span class="line">    <span class="comment">//这个技就是当前项目的dataBinding（lateinit 代表等下进行初始化）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: FragmentBlankBinding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View &#123;</span><br><span class="line">        <span class="comment">//在这里进行dataBinding的初始化</span></span><br><span class="line">        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_blank, container, <span class="literal">false</span>)</span><br><span class="line">        initView()</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//将获取完的ViewModel传给dataBinding（是因为xml文件设置了属性）</span></span><br><span class="line">        binding.<span class="keyword">data</span> = viewModel</span><br><span class="line">        <span class="comment">//设置统一的生命周期管理为父类Activity</span></span><br><span class="line">        binding.lifecycleOwner = activity</span><br><span class="line">        <span class="comment">//点击按钮进行切换Fragment，是通过Navigation进行切换</span></span><br><span class="line">        binding.button.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> controller: NavController = Navigation.findNavController(it)</span><br><span class="line">            controller.navigate(R.id.action_blankFragment_to_detailFragment)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下面的？.let&#123;&#125;代表当前对象不为空的时候才会执行&#123;&#125;内的内容</span></span><br><span class="line">        viewModel.number.value?.let &#123; binding.seekBar.progress = it &#125;</span><br><span class="line">        binding.seekBar.setOnSeekBarChangeListener(<span class="keyword">object</span> : SeekBar.OnSeekBarChangeListener &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onProgressChanged</span><span class="params">(p0: <span class="type">SeekBar</span>?, p1: <span class="type">Int</span>, p2: <span class="type">Boolean</span>)</span></span> &#123;<span class="comment">//如果插件的值变了</span></span><br><span class="line">                viewModel.number.value = p1</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartTrackingTouch</span><span class="params">(p0: <span class="type">SeekBar</span>?)</span></span> &#123;<span class="comment">//刚开始触摸的时候</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStopTrackingTouch</span><span class="params">(p0: <span class="type">SeekBar</span>?)</span></span> &#123;<span class="comment">//结束触摸</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;data&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.laboratory.navviewmodel.MyViewModel&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frameLayout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/Title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;String.valueOf(data.get())&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.222&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/seekBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.347&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#858A8A&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;进入&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用ConstraintLayout是为了方便进行在Design模式下进行摆放控件，上面说的所需的内容是variable中定义的，控件中就可以使用**@{定义的名称.调用方法}**</p><ol start="2"><li><p>DetailFragment</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210104194213.png" alt="image-20210104194213106"></p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding : FragmentDetailBinding</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel <span class="keyword">by</span> activityViewModels&lt;MyViewModel&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View &#123;</span><br><span class="line">        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_detail,container,<span class="literal">false</span>)</span><br><span class="line">        initView()</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        binding.<span class="keyword">data</span> = viewModel</span><br><span class="line">        binding.lifecycleOwner = activity</span><br><span class="line">        binding.button.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> controller : NavController = Navigation.findNavController(it)</span><br><span class="line">            controller.navigate(R.id.action_detailFragment_to_blankFragment)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面的Fragment功能差不多，多了两个按钮，进行<strong>增加</strong>和<strong>删除</strong></p><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;data&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.laboratory.navviewmodel.MyViewModel&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">&quot;.DetailFragment&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;String.valueOf(data.number)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.192&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/add&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;+&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;()-&gt;data.add(1)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;()-&gt;data.add(-1)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/add&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.391&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;返回&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.535&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用了dataBinding中，连点击事件都可以在xml中设置,只需要想 <strong>onClick=”@{()-&gt;对象.方法}”</strong> 这样去使用</p></li></ol><p>这样全局都是使用统一的ViewModel来获取数据，也就可以进行数据共享</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
            <tag> ViewModel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment懒加载</title>
      <link href="2021/04/15/Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>2021/04/15/Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>本篇将讲述Fragment懒加载的使用</p><a id="more"></a><h1 id="Fragment懒加载"><a href="#Fragment懒加载" class="headerlink" title="Fragment懒加载"></a>Fragment懒加载</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p><strong>介绍</strong>：懒加载就顾名思义，也就是当前Fragment处于可见的状态时，才会去进行加载，这种情况很适合Fragment嵌套Fragment，下面介绍原因</p><ul><li>Activity嵌套Fragment：</li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201228152428.png" alt="image-20201228152427313"></p><blockquote><p>这样当Activity进行创建完Fragment时，这3个Fragment都会运行，执行他们的生命周期。</p></blockquote><ul><li>Activity嵌套Fragment嵌套Fragment：</li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201228152444.png" alt="image-20201228152443555"></p><blockquote><p>这种情况下，但Fragment_1进行添加并创建Fragment_a,Fragment_b,Fragment_c时，Fragment_b中又会继续创建Fragment_d，Fragment_e，Fragment_f，所以这样会在很多不可见的Fragment中浪费内存和网络。</p></blockquote><blockquote><p>因此我们想要进行Fragment懒加载，只让处于显示状态的Fragment进行加载。</p></blockquote><ul><li>Activity嵌套ViewPager嵌套Fragment</li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201228153210.png" alt="image-20201228153209898"></p><blockquote><p>观察上图，我们能发现 ViePager 初始化时，默认会调用其内部 Fragment 的 setUserVisibleHint 方法，因为其预缓存 Fragment 个数为 <code>1</code> 的原因，所以只有 Fragment_1 与 Fragment_2 的生命周期函数被调用。</p></blockquote><h3 id="ViewPager-Fragment模式下的懒加载"><a href="#ViewPager-Fragment模式下的懒加载" class="headerlink" title="ViewPager+Fragment模式下的懒加载"></a>ViewPager+Fragment模式下的懒加载</h3><blockquote><p>在Andoirdx中，之前的setUserVisibleHint 已经无法使用，现在只需要给适配器传递BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT即可，这样，Fragment在重复创建时，则会调用onResume方法</p></blockquote><ol><li><p>创建ViewPager的适配器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewPagerAdapter</span></span>(</span><br><span class="line">    fm: FragmentManager,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> titles: MutableList&lt;String&gt;,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fragments: MutableList&lt;Fragment&gt;</span><br><span class="line">) : FragmentPagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        fragments.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Fragment &#123;</span><br><span class="line">        <span class="keyword">return</span> fragments[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPageTitle</span><span class="params">(position: <span class="type">Int</span>)</span></span>: CharSequence? &#123;</span><br><span class="line">        <span class="keyword">return</span> titles[position]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入3个参数，一个是Fragment管理器，Fragment集合，Fragment标题，然后将behavior值设置为”BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT”</p><blockquote><p>使用了 <code>BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT</code> 后，只有当前可见的 Fragment 才能调用 onResume 方法。</p></blockquote></li><li><p>之后还需要创建一个继承Fragment的类来进行懒加载</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行懒加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isLoaded = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mView: View? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="literal">null</span>) &#123;</span><br><span class="line">            mView = initView(inflater, container, savedInstanceState)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setUserVisibleHint</span><span class="params">(isVisibleToUser: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser)</span><br><span class="line">        <span class="keyword">this</span>.isVisibleUser = isVisibleToUser</span><br><span class="line">        lazyLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        <span class="comment">//增加了Fragment是否可见的判断</span></span><br><span class="line">        <span class="keyword">if</span> (!isLoaded &amp;&amp; !isHidden) &#123;</span><br><span class="line">            initData()</span><br><span class="line">            isLoaded = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在Fragment销毁View的时候，重置状态</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        isLoaded = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只有处于可见状态下的Fragment才能触发onResume方法，才可以进行加载数据</p></li></ol><h3 id="ViewPager2-Fragment模式下的懒加载"><a href="#ViewPager2-Fragment模式下的懒加载" class="headerlink" title="ViewPager2+Fragment模式下的懒加载"></a>ViewPager2+Fragment模式下的懒加载</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Glide各种问题的解决方案集合（不断更新）</title>
      <link href="2021/04/15/%E5%85%B3%E4%BA%8EGlide%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E9%9B%86%E5%90%88%EF%BC%88%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>2021/04/15/%E5%85%B3%E4%BA%8EGlide%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E9%9B%86%E5%90%88%EF%BC%88%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>本篇将讲述使用Glide时遇到的各种问题与解决</p><a id="more"></a><h1 id="关于Glide各种问题的解决方案集合（不断更新）"><a href="#关于Glide各种问题的解决方案集合（不断更新）" class="headerlink" title="关于Glide各种问题的解决方案集合（不断更新）"></a>关于Glide各种问题的解决方案集合（不断更新）</h1><blockquote><p>本篇已Java为主要语言</p></blockquote><h3 id="Glide使用"><a href="#Glide使用" class="headerlink" title="Glide使用"></a>Glide使用</h3><ol><li><p><a href="https://github.com/bumptech/glide">添加依赖</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.github.bumptech.glide:glide:4.11.0&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.github.bumptech.glide:compiler:4.11.0&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="关于GlideModule的问题"><a href="#关于GlideModule的问题" class="headerlink" title="关于GlideModule的问题"></a>关于GlideModule的问题</h3><ol><li><p>在项目中创建一个<strong>class</strong>文件</p></li><li><p>继承AppGlideModule</p></li><li><p>添加注解@GlideModule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>里面并不需要填写内容</p></li></ol><h3 id="替换Glide的请求方式"><a href="#替换Glide的请求方式" class="headerlink" title="替换Glide的请求方式"></a>替换Glide的请求方式</h3><ol><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&quot;com.github.bumptech.glide:okhttp3-integration:4.11.0&quot;</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:okhttp:4.7.2&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在项目中创建一个<strong>class</strong>文件</p></li><li><p>继承AppGlideModule</p></li><li><p>添加注解@GlideModule</p></li><li><p>重写*<strong>registerComponents**<em>和</em></strong>isManifestParsingEnabled***方法</p></li><li><p>在**<em>registerComponents**</em>方法中替换为OkHttp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, <span class="meta">@NotNull</span> Glide glide, Registry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Glide 底层默认使用 HttpConnection 进行网络请求,这里替换为 Okhttp</span></span><br><span class="line">        registry.replace(GlideUrl.class, InputStream.class, <span class="keyword">new</span> OkHttpUrlLoader.Factory(ProgressManager.getInstance().with(<span class="keyword">new</span> OkHttpClient.Builder()).build()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isManifestParsingEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Error </tag>
            
            <tag> Android </tag>
            
            <tag> Glide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio错误统计</title>
      <link href="2021/04/15/AndroidStudio%E9%94%99%E8%AF%AF%E7%BB%9F%E8%AE%A1/"/>
      <url>2021/04/15/AndroidStudio%E9%94%99%E8%AF%AF%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>本篇将描述个人在使用Android Studio时遇到的奇奇怪怪的错误</p><a id="more"></a><h1 id="AndroidStudio错误统计"><a href="#AndroidStudio错误统计" class="headerlink" title="AndroidStudio错误统计"></a>AndroidStudio错误统计</h1><h3 id="AndroidStudio-Canary"><a href="#AndroidStudio-Canary" class="headerlink" title="AndroidStudio Canary"></a>AndroidStudio Canary</h3><ol><li><p>在项目级中的build.gradle中添加项目依赖库，会报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.google.com&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://jitpack.io&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>大概是因为在项目级的gradle中添加的gradle版本过高，取消了allprojects{}引用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">&quot;1.4.31&quot;</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">//这里的gradle版本过高</span></span><br><span class="line">        classpath <span class="string">&quot;com.android.tools.build:gradle:7.0.0&quot;</span></span><br><span class="line">        classpath <span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="variable">$kotlin_version</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无法使用</span></span><br><span class="line"><span class="comment">//allprojects &#123;</span></span><br><span class="line"><span class="comment">//    repositories &#123;</span></span><br><span class="line"><span class="comment">//        google()</span></span><br><span class="line"><span class="comment">//        jcenter()</span></span><br><span class="line"><span class="comment">//        maven &#123; url &quot;https://jitpack.io&quot; &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>AndroidStudio Canary 可与 AndroidStuid共存</p><ul><li>最好两个都下载，稳定版用来正常开发项目，测试版用来体验新功能</li></ul></li><li><p>ViewPager子页面中开启一个新的Activity，在返回会导致Fragment页面空白</p><blockquote><p>应该是因为View初始化不在onCreateView中，会导致重复初始化View，导致出错</p></blockquote><ul><li><p>把Fragment开启懒加载，把View初始化放在onCreateView中，数据加载放在懒加载中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFirstLoad = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mView: View? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">createView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="literal">null</span>) &#123;</span><br><span class="line">            mView = createView(inflater, container, savedInstanceState)</span><br><span class="line">            initView()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        <span class="keyword">if</span> (isFirstLoad) &#123;</span><br><span class="line">            initData()</span><br><span class="line">            isFirstLoad = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        isFirstLoad = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>采用RecyclerView+GSYVideoPlayer来实现抖音效果时，无法控制和销毁视频</p><ul><li></li></ul></li><li><p>在kolitn中使用Room。在创建数据库实体类(appDataBase)的时候，导入相应的实体类时，应使用**::class**</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = [xxx::class], version = 1)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>多个Fragment使用Fragment中ViewModel(相同的ViewModel)快捷创建的ViewModel并不是同一个</p><p>这样创建的viewModel是重新创建了一个，并不是使用之前创建的viewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> viewModel <span class="keyword">by</span> viewModels&lt;PhotoDetailViewModel&gt;()</span><br></pre></td></tr></table></figure><p>必须要这样创建才可以获取相同的viewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel : PhotoDetailViewModel</span><br><span class="line"> viewModel = ViewModelProvider(activity <span class="keyword">as</span> PhotoDetailActivity).<span class="keyword">get</span>(PhotoDetailViewModel::<span class="keyword">class</span>.java)</span><br></pre></td></tr></table></figure></li></ol><p>7.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Error </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Android的各个View的介绍</title>
      <link href="2021/04/15/%E5%85%B3%E4%BA%8EAndroid%E7%9A%84%E5%90%84%E4%B8%AAView%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>2021/04/15/%E5%85%B3%E4%BA%8EAndroid%E7%9A%84%E5%90%84%E4%B8%AAView%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>本篇将介绍Android一些冷门View的使用</p><a id="more"></a><h1 id="关于Android的各个View的介绍"><a href="#关于Android的各个View的介绍" class="headerlink" title="关于Android的各个View的介绍"></a>关于Android的各个View的介绍</h1><blockquote><p>本篇已Kotlin为主要语言</p><p>介绍的功能皆为最新功能</p></blockquote><ol><li><p><strong><em>Toolbar</em></strong></p><ul><li><p>设置标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:title&#x3D;&quot;这里是标题&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置标题前的图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:navigationIcon&#x3D;&quot;@drawable&#x2F;ic_baseline_arrow_back&quot;</span><br></pre></td></tr></table></figure><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210407182013.png"></p></li><li><p>是否选择在当前的布局当时是否以“视差”的方式来跟随滚动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_collapseMode&#x3D;&quot;pin&quot;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是让这个View的滚动的速度比其他正常滚动的View速度稍微慢一点</p></blockquote><h5 id="关于CollapsingToolbarLayout与Toolbar联动使用"><a href="#关于CollapsingToolbarLayout与Toolbar联动使用" class="headerlink" title="关于CollapsingToolbarLayout与Toolbar联动使用"></a>关于CollapsingToolbarLayout与Toolbar联动使用</h5><ul><li><p>设置上滑到Toolbar高度时，Toolbar的背景以及过度颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:contentScrim&#x3D;”?attr&#x2F;colorPrimary”</span><br></pre></td></tr></table></figure><blockquote><p>当上滑到toolbar 高度期间直到达到toolbar高度时，给toolbar设置的背景色，以及过渡颜色。<em>当然，这里不仅仅可以设置颜色，也可以设置图片。</em> 如果不设置该属性，标题栏会过渡为以之前的图片为背景</p></blockquote></li><li><p>设置Toolbar Title位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:expandedTitleGravity&#x3D;”center_horizontal”</span><br></pre></td></tr></table></figure></li><li><p>设置Toolbar Title距离开始位置的边距</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:expandedTitleMarginStart&#x3D;”50dp”</span><br></pre></td></tr></table></figure></li><li></li></ul></li><li><p>设置Toolbar文字颜色 </p></li></ul></li><li><p><strong>Activity跳转动画</strong></p><ul><li><p>overridePendingTransition()</p><blockquote><p>这个方法用来覆盖即将到来的跳转动画，也就是说使用这个方法可以替换原本的跳转动画</p></blockquote></li><li><p>overridePendingTransition()的调用时机 </p><p>这个方法需要在startActivity()或者finish()之后立即调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(activity, MainActivity::<span class="keyword">class</span>.java)</span><br><span class="line">        activity.startActivity(intent)</span><br><span class="line">        activity.overridePendingTransition(</span><br><span class="line">            R.anim.anim_slide_enter_bottom,</span><br><span class="line">            R.anim.anim_no_anim</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><blockquote><p>overridePendingTransition()需要传入两个参数，第一个为进入动画，第二个为退出动画</p><p>这些资源都需要在anim文件夹中创建</p></blockquote></li></ul></li><li><p><strong>ObjectAnimator</strong></p><ul><li><p>ObjectAnimator派生自ValueAnimator,所以ValueAnimator能用的方法，ObjectAnimator都能用, ObjectAnimator 是ValueAnimator的子类。</p></li><li><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> objectAnimator: ObjectAnimator <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        ObjectAnimator.ofFloat(binding.ivCover, ANIMATION_PROPERTY_NAME, <span class="number">0f</span>, <span class="number">360f</span>).apply &#123;</span><br><span class="line">            interpolator = LinearInterpolator()</span><br><span class="line">            duration = DURATION_CD<span class="comment">//设置动画时间</span></span><br><span class="line">            repeatCount = ANIMATION_REPEAT_COUNTS</span><br><span class="line">            start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ObjectAnimator.ofFloat</strong>接收4个参数</p><p>第一个：进行动画的View</p><p>第二个：需要进行动画的属性</p><p>第三个：起始值</p><p>第四个：结束值</p></blockquote></li><li><p><em>ObjectAnimator的函数</em></p><ol><li>改变旋转度数 rotation、rotationX、rotationY<ul><li>rotation:表示围绕 Z 旋转,rotation 表示旋转度数</li><li>rotationX:表示围绕X旋转,rotationX表示旋转度数</li><li>rotationY:表示微软Y旋转,rotationY表示旋转度数</li></ul></li><li>移动 translationX、translationY<ul><li>float translationX:表示在X轴上移动的距离，以当前控件为原点，向右为正方向，参数 translationX 表示移动的距离</li><li>float translationY:表示在Y轴上移动的距离，以当前控件为原点，向下位正方向，参数 translationY 表示移动的距离</li></ul></li><li>缩放 scaleX、scaleY<ul><li>float scaleX:在X轴上缩放，scaleX表示缩放倍数</li><li>float scaleY:在Y轴上缩放，scaleY表示缩放倍数</li></ul></li><li>改变透明度 alpha<ul><li>float alpha:控制View的透明度</li></ul></li></ol></li><li><p><em>自定义ObjectAnimator的属性</em></p><ul><li><p>只需要确保View需要改变属性有公开的 <strong>set’()</strong> / <strong>get()</strong> 方法即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>(  <span class="comment">//圆的半径</span></span><br><span class="line">    <span class="keyword">var</span> radius: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>接下来只需要给它创建一个set/get方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPointView</span></span>(context: Context?, attrs: AttributeSet?) : View(context, attrs) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mCircle: Circle? = Circle(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCircle != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> paint = Paint()</span><br><span class="line">            paint.setAntiAlias(<span class="literal">true</span>)</span><br><span class="line">            paint.setColor(Color.RED)</span><br><span class="line">            paint.setStyle(Paint.Style.FILL)</span><br><span class="line">            canvas.drawCircle(<span class="number">400</span>, <span class="number">500</span>, mCircle.getRadius(), paint)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set函数</span></span><br><span class="line">    <span class="comment">//get函数</span></span><br><span class="line">    <span class="keyword">var</span> circleRadius: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="number">800</span></span><br><span class="line">        <span class="keyword">set</span>(radius) &#123;</span><br><span class="line">            mCircle.setRadius(radius)</span><br><span class="line">            invalidate()<span class="comment">//invalidate()请求重绘View树，也就是刷新View</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在Activity中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animator = ObjectAnimator.ofInt(view, <span class="string">&quot;circleRadius&quot;</span>, <span class="number">40</span>, <span class="number">400</span>)</span><br><span class="line">        animator.interpolator = BounceInterpolator()</span><br><span class="line">        animator.duration = <span class="number">2000</span></span><br><span class="line">        animator.start()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>DataBingding与ViewBinding</strong></p><ul><li><p>dataBinding</p><ol><li><p>在Model的build.gradle中开启dataBinding</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildFeatures&#123;</span><br><span class="line">        dataBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Android Stuio 4.0以上时，只能使用<strong>buildFeatures</strong>来进行管理</p></blockquote></li><li><p>在Xml中开启</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210414100322.png"></p><blockquote><p>将光标移到第一行第一位，按下键盘”ALT+ENTER”选择第一个创建binding layout即可</p></blockquote></li><li><p>在Activity中引入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="comment">//先申明为延迟初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">//使用DataBindingUtil来进行载入布局</span></span><br><span class="line">    binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binding.randomText.text = <span class="string">&quot;当前随机参数为:<span class="subst">$&#123;it?.get(<span class="number">0</span>)?.randomName&#125;</span>&quot;</span></span><br><span class="line">binding.randomCountLast.text = <span class="string">&quot;随机次数为:<span class="subst">$&#123;it?.get(<span class="number">0</span>)?.randomNum&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>直接使用<em>binding.xxx</em>来引用View</p></li></ol></li><li><p>viewBinding</p><ol><li><p>在Model的build.gradle中开启dataBinding</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">        ...</span><br><span class="line">        buildFeatures&#123;</span><br><span class="line">        viewBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>开启之后，系统将会自动的生成绑定类</p></li><li><p>在Activity中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="comment">//先申明为延迟初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">//将不需要指明Layout文件</span></span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的与dataBinding一致</p></li></ol></li></ul></li></ol><p>5.</p>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin的一些语法和数据结构</title>
      <link href="2021/04/15/Kotlin%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95/"/>
      <url>2021/04/15/Kotlin%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本篇将讲述Kotlin的一些语法糖和Lambda的使用</p><a id="more"></a><h1 id="Kotlin的一些语法和数据结构"><a href="#Kotlin的一些语法和数据结构" class="headerlink" title="Kotlin的一些语法和数据结构"></a>Kotlin的一些语法和数据结构</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><em>数组</em></h2><ul><li><p>数组</p><ul><li><p>创建指定大小的空数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dp = IntArray(n)</span><br></pre></td></tr></table></figure></li><li><p>创建数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dp = arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//相当于 int[1,2,3]</span></span><br></pre></td></tr></table></figure></li><li><p>创建指定长度的空数组（相当于java中的new int[n]）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> nullArray = arrayofNulls&lt;<span class="built_in">Int</span>&gt;(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></li><li><h3 id="数组特点"><a href="#数组特点" class="headerlink" title="数组特点"></a>数组特点</h3><ul><li>一个数组只能由同种数据类型组成</li><li>数组一旦初始化，长度就固定</li><li>数组中元素的地址是连续的</li><li>数组本身是没有增删改查的方法</li></ul></li></ul></li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><ul><li><p>链表通常有单链表和双向链表</p></li><li><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li><p>单链表是链表中的一种，它的方向是单向的，对链表的访问要从头部(head)开始，然后依次通过next去访问下一个结点</p></li><li><p>单链表的数据结构是分为两部分，第一个是元素，第二个是指针。元素用来存储任意数据类型，指针则是指向下一个结点的引用</p></li><li><p>创建单链表使用的结点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>(<span class="keyword">var</span> value : <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> next : Node? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建单链表</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedNode</span></span>&#123;</span><br><span class="line">    <span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">var</span> head : Node? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">//尾结点</span></span><br><span class="line">    <span class="keyword">var</span> last : Node?= <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ul><li><p>双向链表也是链表中的一种，它与单链表不同的是，它的每个结点有两个指针。第一个指针是指向它的前驱结点(也就是指向它的上一个)，第二个则是指向它的后继结点(也就是指向它的下一个)。所以双向链表可以很方便的去访问它的前驱结点和后继结点</p></li><li><p>双向链表的数据结构是由3部分组成，第一部分为prev指针(前驱指针)，第二部分为元素，第三部分为next指针(后继指针)。prev指针是指向上一个结点的引用，元素则可以为任意数据类型，next指针则是指向下一个结点的引用</p></li><li><p>创建双向链表使用的结点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BNode</span></span>(<span class="keyword">var</span> value : <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> next : BNode? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> prev : BNode? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建双向链表</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BothwayNode</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> head : BNode? = <span class="literal">null</span></span><br><span class="line">   <span class="keyword">var</span> last : BNode? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h3><ul><li><p>单向循环链表，它只是在单链表的基础上使得最后一个结点(尾结点)的指针不在指向空，而是指向头部。使其成为一个循环</p></li><li><p>单向循环链表的数据结构和单链表是一致的</p><p><img src="https://upload-images.jianshu.io/upload_images/3992846-dbca0b4719ed6603?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p></li></ul></li><li><h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><ul><li><p>双向循环链表，它也只是在双链表的基础上使得最后一个结点的后继指针(next)指向头节点，头结点的前驱指针指(prev)向最后一个结点</p></li><li><p>双向循环链表的数据结构也是与双向链表一致</p><p><img src="https://upload-images.jianshu.io/upload_images/3992846-305f533866fcc79b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp"></p></li></ul></li><li><h3 id="链表的基础操作"><a href="#链表的基础操作" class="headerlink" title="链表的基础操作"></a>链表的基础操作</h3><ul><li><p>单链表插入元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head : Node? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> last : Node? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(value : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> node = Node(value)<span class="comment">//先创建结点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;<span class="comment">//两种情况，第一种为单链表为空</span></span><br><span class="line">          head = node<span class="comment">//则将元素传入，并当前元素即是头也是尾</span></span><br><span class="line">            last = node</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last!!.next = node<span class="comment">//如果不为空，则将尾指针指向它，并将尾指针向后移</span></span><br><span class="line">            last = node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单链表删除元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> head : Node? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> last : Node? = <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(value : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (head==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">            <span class="keyword">if</span>(head!!.value == value)&#123;<span class="comment">//如果头就是要删除的元素</span></span><br><span class="line">              head = head!!.next<span class="comment">//将头向后移即可</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> iterator = head<span class="comment">//创建一个用来遍历的结点</span></span><br><span class="line">            <span class="keyword">while</span>(iterator!!.next!=<span class="literal">null</span>)&#123;<span class="comment">//从头到尾循环</span></span><br><span class="line">                <span class="keyword">if</span>(iterator.next!!.value == value)&#123;<span class="comment">//当下一个结点就是要被删除的元素时，退出</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//每次都向后移</span></span><br><span class="line">              iterator = iterator.next</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//当退出循环就代表下一个元素是要被删除，则将指针指向下一个</span></span><br><span class="line">            iterator.next = iterator.next!!.next</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表添加元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BothwayNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head : BNode? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> last : BNode? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(value : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> node = BNode(value)</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;<span class="comment">//这里都与单链表相似</span></span><br><span class="line">            head = node</span><br><span class="line">            last = node</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//因为双向链表是有前驱和后继指针的</span></span><br><span class="line">            <span class="comment">//所以需要将last(尾指针)指向它，在将插入元素的前驱指向last，最后在将last(尾指针)后移</span></span><br><span class="line">            last!!.next = node</span><br><span class="line">            node.prev = last</span><br><span class="line">            last = node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表删除元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BothwayNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head : BNode? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> last : BNode? = <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(value : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head!!.value == value)&#123;</span><br><span class="line">            <span class="comment">//当要删除的元素为头时，将头后移</span></span><br><span class="line">            head = head!!.next</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> iterator = head</span><br><span class="line">        <span class="keyword">while</span> (iterator!!.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (iterator.next!!.value == value)&#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            iterator = iterator.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iterator.next!!.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断要删除的元素是否为最后一个</span></span><br><span class="line">            <span class="comment">//将要删除元素的后一个的前驱指向当前元素</span></span><br><span class="line">            iterator.next!!.next!!.prev = iterator</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//为最后一个，则只需要将前驱设置为空即可</span></span><br><span class="line">            iterator.next!!.prev = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//完成了前驱，还需要将后继继续指向后一位</span></span><br><span class="line">        iterator.next = iterator.next!!.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="For"><a href="#For" class="headerlink" title="For"></a><em>For</em></h2><ul><li><p>对一个数字进行循环</p><ul><li><p>循环到那个数字（不包括）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span> until n)<span class="comment">//n就是输入的数字</span></span><br></pre></td></tr></table></figure></li><li><p>循环到那个数字（包括）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>..n)<span class="comment">//n就是输入的数字</span></span><br></pre></td></tr></table></figure></li><li></li></ul></li><li></li></ul><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a><em>Lambda</em></h2><ul><li><p>内联扩展函数</p><ul><li><p><strong>let</strong> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.let&#123;</span><br><span class="line">    <span class="comment">//默认是it来代表，可以通过it来访问其公有的属性和方法</span></span><br><span class="line">it.todo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景</p><blockquote><p><strong>场景一:</strong> 最常用的场景就是使用let函数处理需要针对一个可null的对象统一做判空处理。</p><p><strong>场景二:</strong> 然后就是需要去明确一个变量所处特定的作用域范围内可以使用 </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>?.let &#123;</span><br><span class="line">   it.todo()</span><br><span class="line">   it.todo1()</span><br><span class="line">   it.todo2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>with</strong></p><p>是将某对象作为函数的参数，在函数块内可以通过 this 指代该对象。返回值为函数块的最后一行或指定return表达式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with(<span class="keyword">object</span>)&#123;</span><br><span class="line">   <span class="comment">//todo</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">   <span class="keyword">val</span> item = getItem(position)?: <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">   with(item)&#123;</span><br><span class="line">      holder.tvNewsTitle.text = titleEn<span class="comment">//这里省略了this.(原本为this.titleEn)</span></span><br><span class="line">  holder.tvNewsSummary.text = summary</span><br><span class="line">  holder.tvExtraInf.text = <span class="string">&quot;难度：<span class="variable">$gradeInfo</span> | 单词数：<span class="variable">$length</span> | 读后感: <span class="variable">$numReviews</span>&quot;</span></span><br><span class="line">       ...   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以直接调用with(object)的公有属性</p></blockquote></li><li><p><strong>run</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.run&#123;</span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>run可以说是let和with的结合体，它既可以方便调用，又以最后一行为返回值(或指定的return值)</p></blockquote><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">  getItem(position)?.run&#123;</span><br><span class="line">      holder.tvNewsTitle.text = titleEn</span><br><span class="line">  holder.tvNewsSummary.text = summary</span><br><span class="line">       ...   </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里是对上面的with进行改变</p></blockquote></li><li><p><strong>apply</strong> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.apply&#123;</span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>apply</strong>和<strong>run</strong>很像，<strong>run</strong>是返回最后一行或者指定返回结果。而<strong>apply</strong>则是对本身进行修改，返回自己</p></blockquote></li><li><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user.apply&#123;</span><br><span class="line">    <span class="comment">//这些name都是user中的公有属性</span></span><br><span class="line">    name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>also</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.also&#123;</span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>also</strong>和<strong>let</strong>很像,<strong>also</strong>是返回它本身，<strong>let</strong>是返回最后一行</p></blockquote><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> adapter = DetailAdapter().also &#123;</span><br><span class="line">            binding.userRandomList.layoutManager = LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.HORIZONTAL, <span class="literal">false</span>)</span><br><span class="line">            binding.userRandomList.adapter = it</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li></li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a><em>高阶函数</em></h2><h2 id="顶层函数"><a href="#顶层函数" class="headerlink" title="顶层函数"></a>顶层函数</h2><p>​    在Kotlin中，如果将一个函数写在文件源代码的最上方（也就是不属于任何一个类），那么这个函数就是顶层函数</p><ul><li><p>代码展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.laboratory.anyrandom.util</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toast</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    runOnMainThread &#123;</span><br><span class="line">        Toast.makeText(App.context, msg, Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">runOnMainThread</span><span class="params">(runnable: <span class="type">Runnable</span>)</span></span> &#123;</span><br><span class="line">    Handler(Looper.getMainLooper()).post(runnable)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<strong>toast</strong>和<strong>runOnMainThread</strong>就是顶层函数</p></li><li><p>使用</p><blockquote><p>在Kotlin中，顶层函数属于包内成员，包内可以直接使用，包外只需要import该顶层函数，即可使用。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toast(<span class="string">&quot;我是顶层函数&quot;</span>)</span><br></pre></td></tr></table></figure><p>在同一个包下可以直接访问</p></li></ul><h2 id="顶层属性"><a href="#顶层属性" class="headerlink" title="顶层属性"></a>顶层属性</h2><p>​    既然有顶层方法，应该也有顶层属性。和顶层函数一样，属性也可以放在文件的顶层，不附属与任何一个类。这种属性叫顶层属性。</p><ul><li><p>代码展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.laboratory.anyrandom.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> topAttributes :<span class="built_in">Int</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>和顶层函数相同，想要在Java中进行访问，那么就必须要在路径上方写上(<strong><em>@file:JvmName(“代表名字”)</em></strong>)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">&quot;TopUtils&quot;</span>)</span><br><span class="line"><span class="keyword">package</span> com.laboratory.anyrandom.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> topAttributes :<span class="built_in">Int</span> = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>这样在Java中也可以直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TopUtils.getTopAttributes();</span><br></pre></td></tr></table></figure><p>当然在Java是通过访问器进行访问的(也就是Get() / Set()方法)</p></li></ul><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><p>​    Kotlin可以在无需继承的情况下去扩展一个类，调用则像是内部函数一样调用</p><ul><li><p>代码展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是中文字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Char</span>.<span class="title">isChinese</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> unicodeBlock = Character.UnicodeBlock.of(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS</span><br><span class="line">        || unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</span><br><span class="line">    ) <span class="comment">// 中日韩象形文字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明一个扩展函数，想要一个被扩展的目标。以上面代码为例，这是对Char的扩展，扩展的方法名为isChinese，返回值为Boolean类型</p></blockquote></li><li><p>扩展函数只能对Public对象进行扩展，对于Private的成员是无法访问的</p></li><li><p>扩展函数可以与顶层函数一样，与顶层函数写在同个位置</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">&quot;TopUtils&quot;</span>)</span><br><span class="line"><span class="keyword">package</span> com.laboratory.anyrandom.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Handler</span><br><span class="line"><span class="keyword">import</span> android.os.Looper</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> com.laboratory.anyrandom.App</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶层函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toast</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    runOnMainThread &#123;</span><br><span class="line">        Toast.makeText(App.context, msg, Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">runOnMainThread</span><span class="params">(runnable: <span class="type">Runnable</span>)</span></span> &#123;</span><br><span class="line">    Handler(Looper.getMainLooper()).post(runnable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是中文字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Char</span>.<span class="title">isChinese</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> unicodeBlock = Character.UnicodeBlock.of(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS</span><br><span class="line">        || unicodeBlock == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</span><br><span class="line">    ) <span class="comment">// 中日韩象形文字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="Lazy"></a>Lazy</h2><ul><li><p>lateinit var: lateinit只用于可变变量(var xxx)</p></li><li><p>by lazy: lazy只用于不可变变量(val xxx)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">    println(<span class="string">&quot;computed!&quot;</span>)</span><br><span class="line">    <span class="string">&quot;Hello&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//第一次调用</span></span><br><span class="line">  computed！</span><br><span class="line">  Hello</span><br><span class="line"><span class="comment">//第二次</span></span><br><span class="line">  Hello</span><br></pre></td></tr></table></figure><p>第一次调用 <code>get()</code> 会执行已传递给 <code>lazy()</code> 的 lambda 表达式并记录结果， 后续调用 <code>get()</code> 只是返回记录的结果。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android面试题笔记</title>
      <link href="2021/02/18/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/18/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Android面试题记录</p><a id="more"></a><h1 id="Android面试题笔记"><a href="#Android面试题笔记" class="headerlink" title="Android面试题笔记"></a>Android面试题笔记</h1><blockquote><p>面试题的笔记与自己的看法</p></blockquote><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li><p>数组</p><ul><li><p>是由同一种数据类型组成</p></li><li><p>存储在连续的内存中</p></li><li><p>可以使用索引来查找数组中的元素地址</p></li><li><p>通常有一维数组（也是最常用的，也是最简单的数据结构），多维数组</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>插入</td><td>O(n)</td></tr><tr><td>删除</td><td>O(n)</td></tr></tbody></table></li></ul></li></ol><ol start="2"><li><p>链表</p><ul><li><p>链表整体看起来是个树型，而不是数组</p></li><li><p>每一个节点都包括一个数组和一个指针</p></li><li><p>节点中的数据类型可以为任意类型 </p></li><li><p>指针就是指向下一节点的引用</p></li><li><p>每个链表都包含一个头节点和一个尾节点</p></li><li><p>头节点就是链表中的第一个节点。尾节点就是链表中最后一个节点</p></li><li><p>头节点和尾节点并不相连，尾节点的指针下一个是结尾（也就是指向空），并不是一个循环数据结构</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>插入</td><td>O(1)</td></tr><tr><td>删除</td><td>O(1)</td></tr></tbody></table></li></ul></li><li><p>双向链表</p><ul><li><p>一个双向链表首先是一个链表</p></li><li><p>一个双向链表中有一个前驱指针和一个后继指针</p></li><li><p>前驱指针是指向前驱结点（也就是前一个节点）</p></li><li><p>后继指针是指向后继结点（也就是后一个结点）</p></li><li><p>在双向链表中也有一个头结点，头结点是指向第一个节点，最后一个结点指向空</p></li><li><p>如果最后一个结点指向第一个结点，那么这就变成了双向循环链表</p></li><li><p>双向循环链表可以很容易从每个结点查找到它的前驱节点和后继节点</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>插入</td><td>O(1)</td></tr><tr><td>删除</td><td>O(1)</td></tr></tbody></table></li></ul></li><li><p>栈</p><ul><li><p>是一个有着【后进先出】特性的数据结构</p></li><li><p>也就是最后进栈的元素也是第一个出栈的元素</p></li><li><p>想要得到栈中第一个元素（也就是最下面的元素），就必须要把后面（上面）所有的元素都先出栈，才可以取出第一个元素</p></li><li><p>向栈中添加一个元素的操作被称作Push(入栈)</p></li><li><p>从栈中取出一个元素的操作被称为Pop(出栈)</p></li><li><p>查看且不删除栈中最后一个入栈的元素（也就是最上方的元素）的操作被称为Top</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>入栈(Push)</td><td>O(1)</td></tr><tr><td>出栈(Pop)</td><td>O(1)</td></tr><tr><td>查看栈顶(Top)</td><td>O(1)</td></tr></tbody></table></li></ul></li><li><p>队列</p><ul><li></li></ul></li><li></li><li><p>贪婪算法</p><ul><li>贪婪算法也就是在求解一个问题的时候，做出当前最好的解决，而不是全局最好的解决</li><li>这种算法的实现都是在某一方面上局部最优解</li><li>贪婪算法也是不可回退的</li><li>贪婪算法在最优子结构问题中尤为有效，最优子结构也就是局部最优能决定全局最优（问题能分成多个小问题，每个小问题的最优解决能递推到最终问题的最优解）</li><li>当一个问题可以通过贪婪算法解决时，那么贪婪算法一般是解决这个问题的最好解决办法</li></ul></li><li></li></ol><h3 id="Java核心"><a href="#Java核心" class="headerlink" title="Java核心"></a>Java核心</h3><ol><li><p>基本数据类型</p><ul><li><p>byte（数据类型为8位，有符号，以而进程补码的整数，默认值是”0”）</p></li><li><p>short（数据类型位16位，有符号，以二进程补码的整数，默认值是”0”）</p></li><li><p>int（数据类型为32位，有符号，以二进程补码表示的整数，默认值是”0”）</p></li><li><p>long（数据类型为64位，有符号，以二进程补码的整数，默认值是”0L”(L是不区分大小写，为了书写规范，最好写成大写)）</p></li><li><p>float（数据类型为单精度，32位的浮点数，默认值是”0f”）</p></li><li><p>double（数据类型为双精度，64位的浮点数，默认值是”0d”）</p></li><li><p>boolean（数据类型为表示一位的信息，默认值只有两种”true”,”false”）</p></li><li><p>char（数据类型为一个单一的16位Unicode字符，可以存储任意字符）</p><blockquote><p>Unicode是全球统一的字符编码</p></blockquote></li></ul></li><li><p>抽象类的概念</p><ul><li>在面向对象的概念中，所有的对象都是用类来描述，但是并不是所有的类都是来描述对象的，当一个类没有足够多的信息来描绘一个对象时，这个类就是一个抽象类</li></ul></li><li><p>抽象的概念</p><ul><li></li></ul></li><li><p>继承</p><ul><li>继承可以使子类别具有父类别的各种属性和方法，而不需要去在重复编写相同代码。子类在继承父类的同时，也可以去重新定义某些属性，并重写某些方法，来覆盖父类别的原有属性和方法，使获取和父类别不同的功能。当遇到需要多重继承的时候，可以使用实现接口来实现多继承相似的效果</li></ul></li><li><p>封装</p><ul><li>从字面意思上来讲就是包装的意思，是指利用抽象数据类型，将数据和有关数据操作都封装起来，使它变成一个不可分割的独立体。用户不知道对象内部的细节，但是可以通过该对象提供的接口来进行访问对象。好处是：减少耦合性，方便未来修改</li></ul></li><li><p>多态</p><ul><li>多态就是指一个行为有多个不同的表现形式或形态的能力。多态就是一个接口，使用不同的实例而执行不同的操作（比如说定义了一个接口，它有两个不同的实例对象，使用不同的实例化就可以使用不同的效果）</li></ul></li><li><p>面向对象的三个基本元素和五个原则</p><ol><li>元素<ul><li>继承</li><li>多态</li><li>封装</li></ul></li><li>原则<ul><li>单一职责</li><li>开闭原则</li><li>里氏替换</li><li>依赖倒置</li><li>接口隔离</li></ul></li></ol></li><li><p>什么是线程，什么是进程？</p><ol><li>进程<ul><li>进程就是程序一次运行的过程，是系统运行程序的基本单位，因此进程是动态的。在java中，当我们运行main函数，其实也就是开启了一个JVM进程</li></ul></li><li>线程<ul><li>线程于进程类似，是一个比进程更小的执行单位，一个进程在执行过程中可以开启多个线程。当运行main函数时，main函数所在的线程就是进程中的一个线程，也就是主线程</li></ul></li></ol></li><li><p>JDK &amp; JVM &amp; JRE分别是什么以及它们的区别？</p><ol><li><p>JDK</p><ul><li>JDK是整个JAVA开发的核心，是面向开发者使用的SDK，它提供了JAVA的开发环境和运行环境</li></ul></li><li><p>JRE</p><ul><li>JRE就是运行时环境（它主要包含两个部分，JVM的标准实现，JAVA的一些基本类库）</li></ul></li><li><p>JVM</p><ul><li>JVM是JAVA虚拟机，也就是因为它，所以JAVA才拥有跨平台性</li></ul></li><li><p>区别</p><ul><li><p>它们三者的关系为：JDK包含JRE包含JVM</p><p><img src="https://i.loli.net/2021/02/16/QnCLmVgM7TbdjD2.png" alt="image-20210216113540235"></p></li></ul></li></ol></li><li><p>什么是面向过程 &amp; 什么是面向对象 &amp; 区别？</p><ol><li><p>面向对象</p><ul><li>面向对象是一种对<strong>现实世界理解和抽象</strong>的方法</li></ul></li><li><p>面向过程</p></li></ol></li></ol><ul><li>是一种 <strong>以过程为中心</strong> 的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。每个过程有一个阶段性的目标，依次完成这些过程，才能得到结果</li></ul><ol start="11"><li><p>给我说说Java面向对象的特征</p><ol><li>特点<ul><li>对象具有属性和行为</li><li>对象具有变化和形态</li><li>对象具有唯一性</li><li>对象都是某个类别的实例</li><li>一切皆为对象，真实世界中的所有事物都可以视为对象</li></ul></li><li>三大基本特征<ul><li>继承</li><li>多态</li><li>封装</li></ul></li></ol></li><li><p>什么是重载 &amp; 什么是重写 &amp; 区别</p><ol><li><p>重载</p><ul><li>重载就是指在同一个类中，方法名相同，而参数不同，返回类型可以相同，也可以不相同</li></ul></li><li><p>重写</p><ul><li>重写是指在方法名相同时，参数也相同，返回类型也相同，但方法内部实现操作不同（一般表示子类与父类之间的关系）</li></ul></li><li><p>区别</p><table><thead><tr><th>区别点</th><th>重载方法</th><th>重写方法</th></tr></thead><tbody><tr><td>参数列表</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>返回类型</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>访问修饰符</td><td>不能比父类更严格</td><td>一定不能修改</td></tr><tr><td>方法名</td><td>一致</td><td>一致</td></tr><tr><td>异常</td><td>可以修改</td><td>可以减少或删除，一定不能抛出新的或者更</td></tr><tr><td>访问</td><td>可以修改</td><td>一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table></li></ol></li><li><p>谈谈你对this和super的认识</p><ol><li>this<ul><li>this就是指当前方法的调用者（也就是指当前使用的对象）</li></ul></li><li>super<ul><li>super只是编译期中的一个指示符（也就是被看作是调用父类中被重写的方法，但实际上调用者还是子类对象）</li></ul></li></ol></li><li><p>接口和抽象类的区别</p><ol><li>接口<ul><li>接口是公开的，不能有私有的变量和方法，接口中的所有方法都<strong>没有方法体</strong>，通过关键字<strong>interface</strong>实现。接口也可以被看做抽象类的变体，接口中所有的方法都是抽象的，可以通过接口来实现多重继承</li></ul></li><li>抽象类<ul><li>抽象类可以拥有私有的方法和变量，通过<strong>abstract</strong>来声明一个类是一个抽象类，被声明为抽象方法<strong>不能包含方法体</strong>。抽象类的子类为父类中<strong>所有抽象方法的具体实现</strong>，否则也是抽象类</li></ul></li><li>相同点<ul><li>都不能被实例化</li><li>接口的实现类或者抽象类的子类都只有实现了<strong>接口或者抽象类中的方法</strong>后才能实例化</li></ul></li><li>不同点<ul><li>接口只能定义，不能有方法的实现。抽象类可以定义也可以实现方法</li><li>实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但只能继承一个抽象类</li><li>接口强调特定功能的实现，抽象类强调所属关系</li></ul></li></ol></li><li><p>给我说说权限修饰符特性</p><ol><li>public 公开的</li><li>private 类内部使用，外部没有访问权</li><li>protected 继承权限，子类继承父类后，子类有权限访问父类，在不同的包下都可以访问</li><li>default 默认访问权限，在同个包下都可以访问</li></ol></li><li><p>给我谈谈Java中的内部类</p><blockquote><p>在Java中允许在类的内部在创建一个类，这个定义在类内部的类就被称作内部类，包含内部类的类就被称作外部类。内部类可以方便的访问外部类私有属性和方法</p></blockquote><ol><li><p>静态内部类</p><ul><li><p>定义方式为 static class。静态内部类可以直接访问外部类的静态属性和方法，但是不可以访问外部类的实例属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticOutter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer outterNum = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outStatic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run out static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStaticInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用外部类的静态方法&quot;</span>);</span><br><span class="line">            outStatic();</span><br><span class="line">            System.out.println(<span class="string">&quot;调用外部类的静态属性&quot;</span>);</span><br><span class="line">            System.out.println(outterNum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>成员内部类</p><ul><li><p>定义方式为 class。成员内部类除了可以访问外部类的静态属性和方法，还可以访问实例属性和方法，但不可以定义静态变量和静态方法。这里可以吧成员内部类看作一个比较特殊的<strong>实例方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer outterNum = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行外部方法......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;outterNum:&quot;</span>+outterNum);</span><br><span class="line">            System.out.println(<span class="string">&quot;运行outter的方法&quot;</span>);</span><br><span class="line">            outterMethod();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法内部类</p><ul><li><p>定义方式为 class。方法内部类就是在一个方法中定义的一个类，方法内部类只能在定义的方法中使用。方法内部类可以直接调用定义方法的参数和方法内部的属性，也可以调用外部类中的静态属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodOutter</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Integer outter = <span class="number">10</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Integer param)</span></span>&#123;</span><br><span class="line">         String local = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">MethodInner</span></span>&#123;</span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;MethodOutter outter:&quot;</span>+outter);</span><br><span class="line">                 System.out.println(<span class="string">&quot;param:&quot;</span>+param);</span><br><span class="line">                 System.out.println(<span class="string">&quot;local:&quot;</span>+local);</span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">         MethodInner inner = <span class="keyword">new</span> MethodInner();</span><br><span class="line">         inner.innerMethod();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         MethodOutter out = <span class="keyword">new</span> MethodOutter();</span><br><span class="line">         out.testMethod(<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名内部类</p><ul><li><p>匿名内部类只能使用一次，它没有名字，没有构造方法，但它可以根据参数调用父类的构造方法。和方法内部类一样，匿名内部类可以访问外部类的属性和方法，也可以访问局部变量和参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestInteface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String param)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TestInteface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">                System.out.println(param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>什么是拆箱 &amp; 装箱，能给我举栗子吗？</p><ol><li><p>Java中基础数据类型与它们的包装类进行运算时，编译器会自动帮我们进行转换，转换过程对程序员是透明的，这就是装箱和拆箱，装箱和拆箱可以让我们的代码更简洁易懂</p></li><li><p>在那些情况下会进行操作</p><ul><li>进行‘=’赋值操作（装箱或拆箱）</li><li>进行’ + , - , * , / ‘混合运算（拆箱）</li><li>进行’ &gt; , &lt; , ==’比较运算（拆箱）</li><li>进行’equals’进行比较（装箱）</li></ul></li><li><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutoBox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Float&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1.0f</span>);</span><br><span class="line">    <span class="keyword">float</span> firstElement = list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二行中，创建了一个存放Float类型的List，然后往里添加1.0f(float基础类型)，在将结果返回给float（这里List取出的结果是为Float）</p><p>所以结果很明显了，以float和Float为例，装箱就是调用Float的<strong>valueOf</strong>方法new一个Float并赋值，拆箱就是调用Float对象的<strong>floatValue</strong>方法并赋值返回给float。其他基础类型都是大同小异的，具体可以查看源码。</p></li></ol></li><li><p>static关键字的作用？</p><p>在Java中主要有3种使用情况</p><ol><li><p>static成员变量</p><blockquote><p>（Java类提供了两种类型的变量：用static关键字修饰的静态变量和不用static关键字修饰的实例变量）</p></blockquote><ul><li>静态变量属于类，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间，因此就可以被使用了。对静态变量的引用有两种方式，分别是“类.静态变量”和”对象.静态变量”</li><li>实例变量属于对象，只有对象被创建后，实例变量才会被分配内存空间，才能被使用，它在内存中存在多个复制，只有用“对象.实例变量”的方式来引用</li></ul></li><li><p>static成员方法</p><blockquote><p>Java中提供了static方法和非static方法</p></blockquote><ul><li>static方法是类的方法，不需要创建对象就可以被调用</li><li>而非static方法是对象的方法，只有对象被创建出来后才可以被使用（static方法中不能使用this和super关键字，不能调用非static方法）</li></ul></li><li><p>static代码块</p><ul><li>static代码块在类中是独立于成员变量和成员函数的代码块的。注意： 这些static代码块只会被执行一次</li></ul></li></ol></li><li><p>final关键字的作用</p><ul><li></li></ul></li><li><p>说说Java异常体系主要用来干什么的 &amp; 异常体系？</p><ul><li></li></ul></li><li><p>Error和Exception的区别？</p><ul><li></li></ul></li><li><p>说说运行时异常和非运行时异常的区别？</p><ul><li></li></ul></li><li><p>如何自定义一个异常？</p><ul><li></li></ul></li><li><p>5个常见的运行时异常</p><ul><li></li></ul></li><li><p>软引用和弱引用的区别？</p><ul><li>软引用关联的对象只有在内存不足时才会被回收，而被弱引用关联的对象在JVM进行垃圾回收时总会被回收。（也就是说 弱引用在每次进行垃圾回收的时候都会被回收，软引用只会在内存不足的时候回收）</li></ul></li><li><p>Socket的定义</p><ul><li>即套接字，<strong>是应用层 与 <code>TCP/IP</code> 协议族通信的中间软件抽象层，表现为一个封装了 TCP / IP协议族 的编程接口（API）</strong></li></ul></li><li><p>给我说说线程的生命周期</p></li><li><p>线程死锁的原因 &amp; 举个栗子 &amp; 如何避免死锁</p></li><li><p>如何停止掉一个线程？</p></li><li><p>wait()和sleep()的区别？</p></li><li><p>Java中创建线程的2种方式 &amp; 区别？</p></li><li><p><code>StringBuffer</code> 和<code>StringBuilder</code> 的区别在哪里?</p><p>StringBuffer和StringBuilder和String基本都是一样的，都是用来存放字符串的。</p><ul><li>string：但string是不可变的，任何对string的改变都会重新创建新的string，而StringBuffer和StringBuilder是可变的的</li><li>StringBuffer：区别在StringBuffer支持并发操作，是线性安全的，适合在多线程中使用。</li><li>StringBuilder：不支持并发操作，线性不安全的，所以不合适在多线程中使用，但StringBuilder在单线程中性能比StringBuffer更高</li></ul></li><li></li></ol><h3 id="Android核心"><a href="#Android核心" class="headerlink" title="Android核心"></a>Android核心</h3><ol><li><p>Activity生命周期（具体可以去Activity的讲解里查看）</p><ul><li>onCreate(在活动第一次启动时，触发该方法)</li><li>onStart(该方法表示活动将被展现给用户)</li><li>onResume（该方法表示活动准备好与用户进行交互）</li><li>onPause（该方法表示活动因为其他原因，被其他Activity，全屏的Dialog覆盖）</li><li>onStop（该方法表示活动不在想要展示给用户，如果内存不足则会进行回收）</li><li>onRestart （该方法表示活动从停止状态再次想要展示给用户）</li><li>onDestory（该方法表示活动被销毁，可能会有一定延迟才会被回收）</li></ul></li><li><p>Android四大组件</p><ul><li>活动 Activity（是所有程序的根本）</li><li>服务 Service（Android组件中的一种，不可以自己运行，只能后台运行，可以与其他组件进行交互）</li><li>广播 BroadcastReceiver（是一种在应用程序之间传递信息的一种机制，也可以在应用内部进行传递信息）</li><li>内容提供者 Content Provider（Android提供第三方应用数据访问的机制）</li></ul></li><li><p>Service与IntentService的区别</p><ul><li>Android中的Service是用于后台服务的，它不是一个独立的进程，也不是一个独立的线程，它是依赖与程序的主线程，也就是说它是运行来主线程上的，不推荐在Service中编写耗时操作</li><li>但是如果必须要在Service中编写耗时操作，那么就需要使用IntentService</li><li>IntentService是继承Service的，它包含了Service的全部特性，生命周期</li><li>IntentService与Service不同的是，在IntentService进行onCreate的时候，内部开启了一个线程，可以去执行耗时操作</li></ul></li><li><p>Android 应用的结构</p><ul><li></li></ul></li><li><p>Android 应用中保存数据</p><ul><li>sharedPreference（用xml来保存应用中的数据，本地）</li><li>SQL（将应用数据保存到应用本地数据库中，应用本地）</li><li>File（将应用数据保存到创建的txt文件中，本地）</li></ul></li><li><p>在 Android 应用中执行耗时操作</p><ul><li>使用Thread执行耗时操作（也就是在子线程中进行耗时操作，在将结果通过Handler传回主线程）</li><li>使用AsyncTask执行耗时操作（也就是在子线程中进行耗时操作，可通过<strong>onProgressUpdate</strong>方法来修改UI）</li></ul></li><li><p>两个 Fragment 之间进行通信</p><ul><li>使用接口来进行两个Fragment之间的通信，通过宿主Activity中转一下</li><li>使用广播</li></ul></li><li><p>Android 的通知系统</p><ul><li></li></ul></li><li><p>Android启动模式</p><ul><li>standard（那里调用就去那里，可多次堆叠，可以创建多个相同的Activity）</li><li>singleTop（可多次实例化，但不可堆叠，当栈顶为相同的Activity则会调用onNewIntent()方法）</li><li>singleTask（当已被实例化，再次创建则会将自己以上的所有Activity全部销毁，在调用onNewIntent()，如没被实例化，那将会创建新的Task并实例化后在入栈）</li><li>singleInstance（存在于单独的栈中，在这个栈中，只有也仅有它一个）</li></ul></li><li><p>什么是Fragment</p><ul><li>Fragment相当于是Activity中的模块，它有着自己的布局，生命周期，单独处理自己的输入输出</li></ul></li><li><p>Fragment 的生命周期</p><ul><li>onAttch（当Fragment与Activity发生关联时调用）</li><li>onCreate（创建Fragment时回调，如果想要保存Fragment基本组件，则在这里初始化）</li><li>onCreateView（首次绘制页面时调用，在此可以创建View。这里不能进行耗时操作）</li><li>onActivityCreated（在onCreate方法完成后返回，这里可以进行与Activity交互UI操作，不能在此之前与Activity进行交互）</li><li>onStart（启动Fragment时回调，此时Fragment可见，只是没有显示在前台，不能和用户进行交互）</li><li>onResume（Fragment在前台处于可见状态时返回，可以与用户交互）</li><li>onPause（Fragment处于暂停状态时返回，处于可见状态，但不能和用户交互）</li><li>onStop（停止Fragment时回调，处于完全不可见）</li><li>onDestoryView（销毁有关Fragment的视图，但还未与Activity解除绑定）</li><li>onDestory（销毁Fragment时回调）</li><li>onDetach（与Activity的关联被取消时调用）</li></ul></li><li><p>Android 的 Dialog</p></li></ol><pre><code>- </code></pre><ol start="13"><li><p>Android 的 View </p><ul><li></li></ul></li><li><p>Fragment 和 Activity 有什么区别？它们之间又有什么关系？</p><ul><li></li></ul></li><li><p>解释一下 Android 中的 Intent </p><ul><li></li></ul></li><li><p>onSaveInstanceState方法会在什么时候被执行？</p><ul><li>按下Home键时，因为系统不知道你在按下Home键之后要运行多少个程序，自然也不知道当前的Activity会不会销毁，所以系统则会调用onSaveInstanceState来保存那些非永久性的数据</li><li>关闭屏幕</li><li>从当前Activity开启另一个Activity</li><li>屏幕方向发生变化时</li></ul><blockquote><p>onSaveInstanceState() 这个方法是用来保存UI状态的，可以使用它来保存当前UI和你所想保存的东西</p></blockquote></li><li><p>简述View Touch事件传递机制。</p><ol><li>过程<ul><li>dispatchTouchEvent -&gt; onInterceptTouchEvent（该方法只在ViewGroup中有） -&gt; onTouchEvent</li></ul></li><li>dispatchTouchEvent （进行事件分发，返回值是Boolean）</li><li>onInterceptTouchEvent （进行事件拦截，该方法只在ViewGroup中有，View中是没此方法，一旦拦截，则执行ViewGroup的onTouchEvent，在ViewGroup中处理事件，而不会接着分发给View，且只调用一次，所以后面的事件都会交给ViewGroup来处理）</li><li>onTouchEvent（进行事件处理）</li></ol></li><li><p>为什么在子线程中执行 new Handler() 会抛出异常?</p><ul><li>是因为在创建Handler时，会先获取当前线程的Looper，如果Looper为空，则会异常</li></ul></li><li><p>invalidate()和postInvalidate()的区别？</p><ul><li>invalidate和postInvalidate都是用来刷新View的，但是invalidate是用于主线程刷新，如果在子线程则需要配合Handler。而postInvalidate可以在子线程中直接调用</li></ul><blockquote><p>invalidate() 请求重绘View树，即draw()过程，即用来刷新View的（谁调用他，谁就刷新）</p></blockquote></li><li><p>res目录和assets目录的区别？</p><ul><li>res/raw中的文件是会被映射到R.java中的，可以直接使用资源ID，不可以有目录结构</li><li>assets中的文件是不会映射到R.java中的，如果需要使用则需要AssetsManager类来进行访问，可以创建子文件夹</li></ul></li><li><p>onTouch()、onTouchEvent()和onClick()关系？</p><ul><li>优先度 onTouch -&gt; onTouchEvent -&gt; onClick</li><li>因此onTouchListener的onTouch会先触发，如果onTouch返回为false才会接着触发onTouchEvent</li><li>onClick内部是通过onTouchEvent来实现的</li></ul></li><li><p>为什么子线程不能更新UI？</p><ul><li>只有创建视图层次结构的原始线程才能更新这个视图，也就是说只有主线程才有权力去更新UI</li><li>假如允许多线程更新<code>UI</code>，但是访问<code>UI</code>是没有加锁的，一旦多线程抢占了资源，那么界面将会乱套更新了</li><li>其实还是可以在子线程中更新UI的，前提是它要拥有自己的ViewRoot，ViewRoot是在onResume中的addView()创建的。一般来说在onCreate中通过子线程更新UI是可行的，但不推荐，因为Android UI操作并不是线程安全</li></ul></li><li><p>在 onCreate中 runOnUiTherad -&gt; onHandler(Looper.getMainLooper()).post -&gt; Thread(runOnUiTherad) -&gt; View.post</p><blockquote><p>runOnUiTherad （调用此方法就可以在主线程中执行）</p><p>onHandler(Looper.getMainLooper())（创建Handler时传递了主线程的Looper，这样onHandler就会在主线程中运行）</p><p>View.post（View.post() 的内部也是调用了 Handler）</p></blockquote></li><li><p>SharedPreference的apply和commit的区别?</p><ul><li>apply（首先apply是没有返回结果的，其次apply是将修改的数据提交给内存，然后在异步提交给硬盘）</li><li>commit（commit是会返回一个Boolean，表明是否修改成功。commit是将数据同步提交给硬盘）</li></ul></li><li><p>ScrollView下嵌套一个ListView通常会出现什么问题？如何解决？</p><ul><li>问题：当ScrollView嵌套ListView时，ListView的高度设置为wrap_content时会产生，一般情况下ListView只显示的第一个Item。</li><li>解决<ol><li>手动设置ListView高度，只需要在给ListView设置完Adapter之后在实际测量高度并赋值</li><li>停止使用ScrollView嵌套ListView，改用ListView多Item</li><li>自定义可适应ScrollView的ListView，也就是重写ListView中的onMeasure方法</li></ol></li></ul></li><li><p>什么是OOM？检测OOM的机制是什么？如何避免？</p><ul><li>OOM是内存泄漏</li><li><strong>WeakReference</strong>与<strong>ReferenceQueue</strong>联合使用，在弱引用关联的对象被回收后，会将引用添加到<strong>ReferenceQueue</strong>；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。</li><li>如何避免内存泄露：<ol><li>使用缓存技术，比如Recache、DiskLruCache、对象重复并且频繁调用可以考虑对象池</li><li>对于引用生命周期不一样的对象，可以用软引用或弱引用SoftReferner WeakReferner</li><li>对于资源对象 使用finally 强制关闭</li><li>内存压力过大就要统一的管理内存</li></ol></li></ul></li><li><p>广播的两种注册形式</p><ul><li><p>静态注册（在AndroidManifest中进行注册）在AndroidManifest中进行注册后，不管改应用程序是否处于活动状态，都会进行监听。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=<span class="string">&quot;.IncomingSMSReceiver&quot;</span>&gt;  </span><br><span class="line">    &lt;intent-filter&gt;  </span><br><span class="line">         &lt;action android:name=<span class="string">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span>/&gt;  </span><br><span class="line">    &lt;/intent-filter&gt;  </span><br><span class="line">&lt;/receiver&gt;  </span><br></pre></td></tr></table></figure></li><li><p>动态注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(<span class="string">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span>);  </span><br><span class="line">IncomingSMSReceiver receiver = <span class="keyword">new</span> IncomingSMSReceiver();  </span><br><span class="line">registerReceiver(receiver, filter);  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何设计开发一个图片轮播组件？简述要点或写代码。</p><ol><li><p>整个组件采用ViewPager</p></li><li><p>适配器继承自PagerAdapter</p></li><li><p>重写getCount()，isViewFromObject(View arg0, Object arg1)，destroyItem(ViewGroup container, int position, Object object)，instantiateItem(ViewGroup container, int position)四个方法。</p><blockquote><p>getCount（获取当前界面个数）</p><p>isViewFromObject（判断是否由对象生成页面）</p><p>destroyItem（回收Item）</p><p>instantiateItem（加载Item）</p></blockquote></li><li><p>getCount代表返回的条目，要实现无限轮播，这里就要给出一个很大的值，我们可以采Integer.MAX_VALUE。其他的和普通ViewPager开发一样，在isViewFromObject返回arg0 == arg1，在destroyItem中摧毁滑出的View,container.removeView((View) object),在instantiateItem中添加对应的item,记得添加item,container.addView(child)。里面的postion都要做取余处理，避免数组越界。</p></li><li><p>最后，可以使用一个handler实现自动轮播，重写onTouchEvent来对自动轮播控制。</p></li></ol></li><li><p>Kotlin中协程和线程的区别？</p><ol><li>线程<ul><li>线程的目的是为了提高CPU的资源使用率，使多个任务可以并行运行，是服务于机器的。线程的调度是系统来完成的，一般是抢占式的，根据优先级来分配</li></ul></li><li>协程<ul><li>协程的目的是为了让多个任务之间更好的协作，是服务于人的。协程为了确保代码逻辑是顺序，所以调度是由开发者来定制的</li></ul></li></ol></li><li><p>从架构图看，android分为几个层?</p><ul><li>5层<ol><li>:Linux Kernel(Linux内核)</li><li>Hardware Abstraction Layer(硬件抽象层)</li><li>Libraries(系统运行库或者是c/c++ 核心库)</li><li>Application Framework(开发框架包 )</li><li>Applications(核心应用程序)</li></ol></li></ul><p><img src="https://uploadfiles.nowcoder.com/images/20170308/8698685_1488963422551_58DC97016985EB4A658556EF1A13A275" alt="img"></p></li><li><p>VideoView</p><ul><li>不可以控制大小（这里的大小就是指View的大小，给他设置高宽是不会生效的）</li><li>VideoView实际的尺寸可能并不是这个尺寸设置的大小. VideoView在测量自身的尺寸时会依据视频的真实尺寸来调整自己的大小。</li></ul></li><li><p>使用SimpleAdapter作为 ListView的适配器，行布局中支持下列哪些组件？</p><ul><li>实现Checkable接口的View</li><li>TextView</li><li>ImageView</li></ul></li><li><p>如何在任意位置关掉应用所有Activity &amp; 如何在任意位置关掉指定的Activity？</p></li><li><p>Activity任务栈是什么？在项目中有用到它吗？说给我听听</p></li><li><p>什么情况下Activity不走onDestory?</p><ul><li>System.exit(0)（使用此方法来退出应用时，是不会触发onDestory）</li><li>栈里面的第一个没有销毁的activity会执行onDestroy方法，其他的不会执行（从MainActivity跳转到activity-A（或者继续从activity-A再跳转到activity-B），这时候，从后台强杀，只会执行mainActivity的onDestroy方法，activity-A（以及activity-B）的onDestroy方法都不会执行）</li></ul></li><li><p>什么情况下Activity会单独执行onPause?</p><ul><li>当Activity被一个透明的Dialog或者别的东西覆盖时，此时它依然与窗口管理器依然保持连接，系统继续维护其内部状态，所以它仍然可见，但它已经失去了焦点故不可与用户交互，所以被覆盖的Activity并不会执行onStop()方法，只会执行onPause</li></ul></li><li><p>隐式 Intent 和 显式 Intent</p><ul><li>使用显式Intent时，我们需要指定启动那一个Activity</li><li>使用隐式Intent时，只用告诉系统想做什么，系统会自动的找到符合的Activity来启动</li></ul></li><li><p>什么是 Loader ？</p></li><li><p>什么是 NDK ，为什么它是有用的？</p></li><li><p>如何理解严格模式（StrictMode）</p></li><li><p>什么是 Lint ？它的用途是什么？</p></li><li><p>ListView 和 RecyclerView 有什么区别？</p></li><li><p>如何理解上下文（Context）。怎么使用它？</p></li><li><p>为什么 Bundle 被用来传递数据，为什么不能使用简单的 HashMap 数据结构？</p><blockquote><p>Bundle本质上也是用ArrayMap来进行存储，所以也就是问为什么要用ArrayMap来进行存储。</p></blockquote><ul><li>ArrayMap：适合小数据存储，在数据量较大的时候，性能将退化。</li><li>HashMap ：内部是使用数组+链表的结果，在数据量大的时候性能不错，但在数据小的时候，它的Entry Array比ArrayMap占更多的空间</li></ul><p>在Android中，多数传递都是较小的数据，所以使用Bundle （ArrayMap）更好。而且如果使用Intent来传递数据，Bundle的Parcelable序列化比HashMap 的Serializable性能更好</p></li><li><p>如何理解 Android 的 Dialog ？</p><ul><li>要在Activity中创建一个Dialog，可以在onCreate中调用showDialog(id)，之后会回调onCreateDialog(int id,Bundle rags)这里返回的id就是showDiolog中传入的id，用来表示Dialog，之后就来在onCreateDialog中创建你自己的Dialog。最后还会调用onPrepareDialog()，之后就创建完毕。下次在调用（当前Activity不销毁）showDialog就不会允许onCreatesDialog，只会调用onPrepareDoalog</li></ul></li><li><p>什么是 ViewGroup ，它与 View 的区别在哪里？</p></li><li><p>谈谈 Serializable 接口和 Parcelable 接口的区别。在 Android 中最好使用哪种接口？</p></li><li><p>当 Bitmap 占用较多内存时，你是怎么处理的？</p></li><li><p>AsyncTask 的生命周期和(它所属的) Activity 的生命周期有什么关系？这种关系可能会导致什么样的问题？ 如何避免这些问题发生？ </p></li><li><p>什么是 NDK ，为什么它是有用的？</p></li><li><p>如何理解严格模式（StrictMode）</p></li><li><p>什么是 SurfaceView ？</p></li><li><p>你知道什么是视图树(View Tree)吗？怎样优化它的深度？</p></li><li><p>阐述一下 Android 中的 HashMap , ArrayMap 和 SparseArray</p></li><li><p>阐述一下 Looper, Handler 和 HandlerThread</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collapsing与Navigation</title>
      <link href="2020/12/24/Collapsing%E4%B8%8ENavigation/"/>
      <url>2020/12/24/Collapsing%E4%B8%8ENavigation/</url>
      
        <content type="html"><![CDATA[<p>介绍Collapsing与Navigation的使用</p><a id="more"></a><h1 id="Collapsing与Navigation"><a href="#Collapsing与Navigation" class="headerlink" title="Collapsing与Navigation"></a>Collapsing与Navigation</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p>关于Navigation的部分，上篇有，这里就不作多介绍了</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ol><li><p>将activity_main中的 “ConstraintLayout”抽取出来，方便操作：左键选中区域，单机右键选择Refactor，在选择 Layout进行抽取，这里我命名为（layout_constraiont）</p></li><li><p>在原本的ConstraintLayout的布局中添加层级</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/appbar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;192dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/collTpplabar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|exitUntilCollapsed&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:toolbarId</span>=<span class="string">&quot;@+id/toolbar&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 这里的lCollapsingToolbarLayout也就是可滑动的Toolbar，在滑动过程中进行变化的就是它 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">&quot;pin&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里的layout_collapseMode设置为pin 是为了将Tooblar进行固定住，不让他上滑移出屏幕 --&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.core.widget.NestedScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">app:layout_behavior</span>=<span class="string">&quot;com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- NestedScrollView只允许有一个子类，尽量减少嵌套RecyclerView，原因可查看(CoordinatorLayout嵌套RecyclerView)文章 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:showIn</span>=<span class="string">&quot;@layout/activity_main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/navigation&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.core.widget.NestedScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>层级如下:</p><ul><li>CoordinatorLayout<ul><li>AppBarLayout<em>（AppBarLayout要与CoordinatorLayout一同使用）</em><ul><li>CollapsingToolbarLayout<em>（可滑动Toolbar）</em></li><li>Toolbar <em>（最终固定的Toolbar）</em></li></ul></li><li>NestedScrollView<em>（滑动布局）</em><ul><li>ConstraintLayout<em>（约束布局）</em><ul><li>fragment</li></ul></li></ul></li></ul></li></ul></li><li><p>因为需要将顶部通知栏进行覆盖，所以将原本的ActionBar取消掉，也就是将当前theme主题设置为 NoActionBar 即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.NoActionBar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">              <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>既然取消了ActionBar，那么需要自己设置一个ActionBar，在第二部中，我们创建了Toolbar，所以我们将它设置为ActionBar</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">setContentView(R.layout.activity_main)</span><br><span class="line">setSupportActionBar(toolbar)</span><br></pre></td></tr></table></figure><p>别的代码不需要改动</p></li><li><p>在各个Fragment中需要进行设置CollapsingToolbarLayout.title的值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        requireActivity().collTpplabar.title = getString(R.string.text_fragment)</span><br><span class="line">        <span class="comment">//直接使用requireActivity()来访问到Activity的CollapsingToolbarLayout，并为它设置Title</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_text, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就完成效果了</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DrawerLayout的使用</title>
      <link href="2020/12/24/DrawerLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/24/DrawerLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>介绍Android中的DrawerLayout的使用</p><a id="more"></a><h1 id="DrawerLayout的使用"><a href="#DrawerLayout的使用" class="headerlink" title="DrawerLayout的使用"></a>DrawerLayout的使用</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p>DrawerLayout也就是侧边栏</p><h3 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h3><ul><li>DrawerLayout     –侧边栏的父容器<ul><li>Fragment    –容器</li></ul></li><li>NavigationView   –侧边栏</li></ul><h3 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h3><ol><li><p>首先创建3个Fragment</p><p>ListFragment：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_list, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextFragment：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_text, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PagerFragment：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PagerFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_pager, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击 New 创建空白Framgnet即可</p><p><img src="C:\Users\fuxinbo\AppData\Roaming\Typora\typora-user-images\image-20201223112423832.png" alt="image-20201223112423832"></p></li><li><p>接下来在res文件中创建一个名为”navigation”的文件夹，在文件夹下创建navigation的xml文件</p><p><img src="C:\Users\fuxinbo\AppData\Roaming\Typora\typora-user-images\image-20201223112937398.png" alt="image-20201223112937398"></p></li><li><p>在navigation中编写3个Fragment，并将刚刚创建的3个Fragment传入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@id/textFragment&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.laboratory.drawerdome.TextFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/text_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.laboratory.drawerdome.ListFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/list_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_list&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/pagerFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.laboratory.drawerdome.PagerFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/pager_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_pager&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>继续在res下创建名为”menu”的文件夹，在文件夹下创建menu的xml</p></li><li><p>在menu中编写3个item，item的名字要与navigation中的fragment相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_baseline_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/text_fragment&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_baseline_two&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/list_fragment&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/pagerFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_baseline_three&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/pager_fragment&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接下来就是在activity_main中进行设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:openDrawer</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/navigation&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">&quot;@layout/navigation_header&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/menu&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将menu设置给NavigationView，fragment设置侧边栏NavigationView</p><blockquote><p>android:layout_gravity=”start”   意思为设置侧边栏是从左到右，一定要写</p><p>DrawerLayout的openDrawer，是设置显示效果</p></blockquote></li><li><p>最后在Activity中设置</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="comment">//drawerLayout与导航栏的中继器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> appBerConfiguration: AppBarConfiguration</span><br><span class="line">    <span class="comment">//导航栏控制器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> navController: NavController</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//获取Fragment容器</span></span><br><span class="line">        navController = findNavController(R.id.fragment)</span><br><span class="line">        <span class="comment">//将drawerLayout和获取到导航栏图表相连</span></span><br><span class="line">        appBerConfiguration = AppBarConfiguration(navController.graph, drawerLayout)</span><br><span class="line">        <span class="comment">//设置将由appBerConfiguration来控制navController</span></span><br><span class="line">        setupActionBarWithNavController(navController, appBerConfiguration)</span><br><span class="line">        <span class="comment">//给Navigation设置控制器</span></span><br><span class="line">        navigation.setupWithNavController(navController)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将顶部栏与navigation进行连接</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> navController.navigateUp(appBerConfiguration) || <span class="keyword">super</span>.onSupportNavigateUp()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上效果就完成了</p>]]></content>
      
      
      
        <tags>
            
            <tag> View </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo与Typora 上传图片</title>
      <link href="2020/12/24/PicGo%E4%B8%8ETypora-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>2020/12/24/PicGo%E4%B8%8ETypora-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>关于PicGo的配置与使用</p><a id="more"></a><h1 id="PicGo的设置与Typora上传图片"><a href="#PicGo的设置与Typora上传图片" class="headerlink" title="PicGo的设置与Typora上传图片"></a>PicGo的设置与Typora上传图片</h1><blockquote><p>需要花钱的哈</p></blockquote><p><strong>首先需要进行下面两个操作</strong></p><ol><li>阿里OSS存储的购买（为了方便，这里以阿里为例子）</li><li>PicGo的下载与设置</li></ol><h3 id="阿里OSS"><a href="#阿里OSS" class="headerlink" title="阿里OSS"></a>阿里OSS</h3><ol><li><p><a href="https://www.aliyun.com/">打开阿里云</a></p></li><li><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224151334.png"></p><p>选择对象存储OSS</p></li><li><p>点击则扣套餐进行购买（40G，1年，8.7元很香）</p></li><li><p>购买完成后，打开控制台，在左边栏中选择Bucket列表</p></li><li><p>点击创建Bucket</p><ul><li><p>地区选择离你最近的地方，版本控制器看需求来开，一般来说是不须要开启的（不会花额外的钱，但是会占用你的空间）</p></li><li><p>读写权限改为公共读（不然别人访问不了你的图片）</p></li><li><p>别的都是并不开通</p></li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224151726.png" alt="image-20201224151723354"></p></li><li><p>接下来创建AccessKey，点击Access Key</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224152803.png" alt="image-20201224152801998"></p></li><li><p>点击创建Access Key，将创建好的Access Key保存到本地</p></li><li><p><a href="http://gosspublic.alicdn.com/oss-browser/1.9.4/oss-browser-win32-x64.zip">下载安装OSS Browser客户端</a>（OSS Browser是阿里云官方的客户端工具，可以使用拥有OSS权限的用户登录，从而免去登录官网控制台的麻烦。）</p></li><li><p>下载安装好之后打开，用刚刚创建好的Access Key来进行登录,Endpoint选择公共云，之后就可以在里面看见上传的图片，文件之类的</p></li></ol><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>PicGo是一个支持多种图床的客户端图片上传工具，可以实现快速上传图片到指定图床，并将链接保存到剪贴板。</p><ol><li><p><a href="https://github.com/Molunerfinn/PicGo/releases">下载PicGo</a></p></li><li><p>下载安装好之后，点击图床设置，选择阿里云</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224153500.png" alt="image-20201224153459239"></p></li><li><p>选择PicGo设置，修改快捷键，设置你喜欢的快捷键</p></li><li><p>其余设置如下</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224153701.png" alt="image-20201224153700790"></p></li></ol><h3 id="Typora上传图片"><a href="#Typora上传图片" class="headerlink" title="Typora上传图片"></a>Typora上传图片</h3><ol><li><p>打开Typora的设置</p></li><li><p>进行如下的设置</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224153821.png" alt="image-20201224153820513"></p></li></ol><h3 id="使用教学"><a href="#使用教学" class="headerlink" title="使用教学"></a>使用教学</h3><p>Win10的截图快捷键为（win+shift+s）进行选择截图，截完图片之后，粘贴进Typora，选择上传图片 即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> Money </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WorkManager后台任务</title>
      <link href="2020/12/24/WorkManager%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
      <url>2020/12/24/WorkManager%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>介绍JetPack中的WorkManager</p><a id="more"></a><h1 id="关于WorkManager的使用"><a href="#关于WorkManager的使用" class="headerlink" title="关于WorkManager的使用"></a>关于WorkManager的使用</h1><blockquote><p>本篇以Kotlin为主要语言</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>WorkManager</strong>是一个后台执行任务管理，即使在应用退出，也可以继续执行被创建的任务。还可以为<strong>WorkManager</strong>添加触发条件。当然还有特殊情况，当应用被彻底杀死的时候，任务是不会触发的，会等到下次应用开启，然后触发任务</p><ol><li><p>添加依赖</p><ul><li><p>打开当前项目的ProjecySturcture</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145449.png" alt="image-20201224145447147"></p></li><li><p>在Dependencies.app中点击 + 来添加依赖，之后在Library Dependency中搜索androidx.work</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145615.png" alt="image-20201223092135741"></p></li><li><p>选择ktx结尾的，点击ok，等待下载完成</p></li></ul></li><li><p>接下来创建一个类MyWorker 继承 Worker</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;work&quot;</span>, <span class="string">&quot;doWork: <span class="variable">$data</span> 任务开始&quot;</span> )</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>)</span><br><span class="line">        Log.e(<span class="string">&quot;work&quot;</span>, <span class="string">&quot;doWork: <span class="variable">$data</span> 任务结束&quot;</span> )</span><br><span class="line">        <span class="keyword">return</span> Result.success()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承Worker 是需要传入参数，所以需要创建构造方法。这里为了方便观察，于是打印日志</p></li><li><p>然后再Activity中创建全局变量 workMananger，并且创建workRequest且传入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> workManager = WorkManager.getInstance(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//这里在XML中创建了一个Button，为其设置点击事件</span></span><br><span class="line">        button.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> wrokRequest = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">            .build()</span><br><span class="line">            workManager.enqueue(wrokRequest)</span><br><span class="line">            <span class="comment">//将创建好的workRequest传递给workManager</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，关于workManager的简单使用就完成了</p></li></ol><h3 id="WorkManager的触发条件与传递数据、串接"><a href="#WorkManager的触发条件与传递数据、串接" class="headerlink" title="WorkManager的触发条件与传递数据、串接"></a>WorkManager的触发条件与传递数据、串接</h3><h5 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> constraints = Constraints.Builder()</span><br><span class="line">           .setRequiredNetworkType(NetworkType.CONNECTED)</span><br><span class="line">           .build()</span><br><span class="line"><span class="keyword">val</span> wrokRequest = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">           .setConstraints(constraints)</span><br><span class="line">           .build()</span><br></pre></td></tr></table></figure><p>创建一个constraints，并且给他设置触发条件为连接网络时触发，然后传递给workRequest</p><h5 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h5><p>可以将数据传递进Worker，Worker也可以把数据传递出来</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> wrokRequest = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">            .setConstraints(constraints)</span><br><span class="line">            .setInputData(workDataOf(INTPUT_WORK_KEY to <span class="keyword">data</span>))</span><br><span class="line">            .build()</span><br></pre></td></tr></table></figure><p>传递数据是通过setInputData，接受一个workData参数，workData是一个键值对，最后在Worker中接受数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = inputData.getString(<span class="string">&quot;Key&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.success(workDataOf(OUT_WORK_KEY to <span class="string">&quot;任务已结束&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过inputData 来接受数据，并且可以通过return Success来传递出去数据，在Activity/Fragment中通过LiveData观察来获取数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workManage.getWorkInfoByIdLiveData(workRequestA.id).observe(<span class="keyword">this</span>, Observer &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;任务完成，返回数据为<span class="subst">$&#123;it.outputData&#125;</span>&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h5 id="串接"><a href="#串接" class="headerlink" title="串接"></a>串接</h5><p>首先，我们先将创建触发条件与创建workRequest的内容提取出来（快捷键为:ctrl+alt+m）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createWork</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span>: OneTimeWorkRequest &#123;</span><br><span class="line">        <span class="keyword">val</span> constraints = Constraints.Builder()</span><br><span class="line">            .setRequiredNetworkType(NetworkType.CONNECTED)</span><br><span class="line">            .build()</span><br><span class="line">        <span class="keyword">return</span> OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">            .setConstraints(constraints)</span><br><span class="line">            .setInputData(workDataOf(INTPUT_WORK_KEY to <span class="keyword">data</span>))</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并且给这个方法传入一个参数，用来进行与Worker之间传递数据,然后使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> WORK_A_DATA = <span class="string">&quot;A ni shi han han&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> WORK_B_DATA = <span class="string">&quot;B ni shi han han&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> workRequestA = createWork(WORK_A_DATA)</span><br><span class="line"><span class="keyword">val</span> workRequestB = createWork(WORK_B_DATA)</span><br><span class="line">    workManager.beginWith(workRequestA)</span><br><span class="line">        .then(workRequestB)</span><br><span class="line">        .enqueue()</span><br></pre></td></tr></table></figure><p>beginWith() 是传入第一个workRequest，剩下的通过then来传递，最后别忘了调用enqueue()</p>]]></content>
      
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Room在项目中的使用</title>
      <link href="2020/12/24/Room%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/24/Room%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>介绍JetPack中的Room</p><a id="more"></a><h1 id="Room在项目中的使用"><a href="#Room在项目中的使用" class="headerlink" title="Room在项目中的使用"></a>Room在项目中的使用</h1><blockquote><p>本篇已Java为主要语言</p></blockquote><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&quot;androidx.room:room-runtime:2.2.5&quot;</span></span><br><span class="line">annotationProcessor  <span class="string">&quot;androidx.room:room-compiler:2.2.5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>接下来我就以保存历史为例,先介绍一下各个注释的意思</p><table><thead><tr><th>注释名称</th><th>意思</th></tr></thead><tbody><tr><td>@Entity</td><td>代表数据库中某个表的实体类。</td></tr><tr><td>@Ignore</td><td>代表无用的构造方法</td></tr><tr><td>@PrimaryKey()</td><td>代表主键的意思，是必须要有的</td></tr><tr><td>@Database</td><td>包含数据库持有者，并作为与应用持久关联数据的底层连接的主要访问点</td></tr></tbody></table><ol><li><p>创建 HistoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistoryBean</span><span class="params">(<span class="keyword">int</span> id, String name, String address, String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentId = id;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentName = name;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentAddress = address;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrimaryKey()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> EquipmentId;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentName;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentAddress;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentPersonnel;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEquipmentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentId</span><span class="params">(<span class="keyword">int</span> equipmentId)</span> </span>&#123;</span><br><span class="line">        EquipmentId = equipmentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentName</span><span class="params">(String equipmentName)</span> </span>&#123;</span><br><span class="line">        EquipmentName = equipmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentAddress</span><span class="params">(String equipmentAddress)</span> </span>&#123;</span><br><span class="line">        EquipmentAddress = equipmentAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentPersonnel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentPersonnel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentPersonnel</span><span class="params">(String equipmentPersonnel)</span> </span>&#123;</span><br><span class="line">        EquipmentPersonnel = equipmentPersonnel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentState</span><span class="params">(String equipmentState)</span> </span>&#123;</span><br><span class="line">        EquipmentState = equipmentState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建一个数据库管理类 （AppDatabase）继承 RoomDatabase</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = &#123;HistoryBean.class&#125;, version = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> HistoryDao <span class="title">historyDao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在创建一个数据库操作接口 （HistoryDao）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HistoryDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> historyBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAll</span><span class="params">(HistoryBean historyBean)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;DELETE FROM historybean&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据（传入不一样的数据，将会自动将不一样的数据替换旧数据）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> historyBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUsers</span><span class="params">(HistoryBean historyBean)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT * FROM HistoryBean&quot;)</span></span><br><span class="line">    LiveData&lt;List&lt;HistoryBean&gt;&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>接下来就是在Activity/Fragment中使用，因为在主线程中是不允许进行数据库操作的，会阻塞线程，所以必须要在子线程中来操作数据库。下面的代码就是使用AsyncTask来进行子线程操作</p><p>那么下面将创建一个数据库操作类，用来方便进行数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoOperation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppDatabase db;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DaoOperation instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里将DaoOpertaion设置为单例模式，因为会在各种地方使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DaoOperation <span class="title">getDatabase</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (AppDatabase.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    db = MyApplication.getDatabase(context);</span><br><span class="line">                    instance = <span class="keyword">new</span> DaoOperation();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是对外开放接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> insertHistory(historyBean).execute(historyBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dellHistory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> dellHistory().execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> upHistory(historyBean).execute(historyBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下是内部实现过程</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入历史</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">insertHistory</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">HistoryBean</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HistoryBean historyBean;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">insertHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.historyBean = historyBean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(HistoryBean... historyBeans)</span> </span>&#123;</span><br><span class="line">            db.historyDao().insertAll(historyBean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除全部历史</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">dellHistory</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">dellHistory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">            db.historyDao().deleteAll();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改历史（基本用不上）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">upHistory</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">HistoryBean</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HistoryBean historyBean;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">upHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.historyBean = historyBean;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(HistoryBean... historyBeans)</span> </span>&#123;</span><br><span class="line">            db.historyDao().updateUsers(historyBean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于AsyncTast的使用，其他篇幅就已经讲过了，这里就并进行讲解了 <a href="%E5%85%B3%E4%BA%8EAndroid%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C.md">关于Android多线程操作</a></p></li><li><p>最后在Activty/Fragment中使用（展示经常使用的插入和删除）</p><p><code>插入</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaoOperation.getDatabase(<span class="keyword">this</span>).insertHistory(<span class="keyword">new</span> HistoryBean(id,name, address,state));</span><br></pre></td></tr></table></figure><p><code>删除</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaoOperation.getDatabase(<span class="keyword">this</span>).dellHistory();</span><br></pre></td></tr></table></figure></li><li><p>展示不一样的数据库查询（下面的代码HistoryModel是因为我当前项目使用的Mvvm的设计模式，我将所以数据操作都放在Model中了）</p><p>因为上面设置查询的结果为LiveData，也就是可观察</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HistoryModel mHistoryModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(HistoryModel.class);</span><br><span class="line">        mHistoryModel.getHistory(<span class="keyword">this</span>).observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;List&lt;HistoryBean&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(List&lt;HistoryBean&gt; historyBeans)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//这里我是将查询到的数据传入设配器中</span></span><br><span class="line">                adapter.loadMore(historyBeans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>关于使用LiveData的好处有多，比如</p><ul><li>会观察当前引用类的生命周期，只会在生命周期内进行操作</li><li>不会造成内存泄漏</li><li>一旦数据发送变化，将立马通知</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SmallestWidth 限定符</title>
      <link href="2020/12/17/SmallestWidth-%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
      <url>2020/12/17/SmallestWidth-%E9%99%90%E5%AE%9A%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>介绍Android屏幕适配的方法</p><a id="more"></a><h1 id="SmallestWidth-限定符"><a href="#SmallestWidth-限定符" class="headerlink" title="SmallestWidth 限定符"></a>SmallestWidth 限定符</h1><blockquote><p>本篇不限语言</p></blockquote><h3 id="介绍smallestWidth-限定符"><a href="#介绍smallestWidth-限定符" class="headerlink" title="介绍smallestWidth 限定符"></a>介绍smallestWidth 限定符</h3><ol><li>优点<ul><li>使用这种方式只需要少量 dimens.xml 文件即可达到适配，而且根本不用考虑虚拟按键的问题。如果只适配手机，dimens.xml 文件所占的体积只有 100 多 KB，即使加上平板和 TV，也就 500 多 KB，完全可以接收。</li></ul></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>打开AndroidStudio</li><li>进入Settings</li><li>选择Plugins</li><li>在插件商店里面 搜索 “ScreenMatch” 点击安装 最后点击“ok”，重启AndroidStudio即可</li><li>在项目的默认 values 文件夹中需要一份 dimens.xml 文件<ul><li><a href="https://github.com/wildma/ScreenAdaptation/blob/master/app/src/main/res/values/dimens.xml">这里提供使用</a></li></ul></li><li>执行生成<ul><li>插件安装好后，在项目的任意目录或文件上右键，选择 ScreenMatch 选项（如下图）</li><li><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145630.webp" alt="img"></li></ul></li><li>选择对那个module进行适配（一般来说就是选择app即可）</li><li>res目录下会生成对应宽度dpi的文件（如下图）<ul><li><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145638.webp" alt="img"></li></ul></li><li>在xml文件中写布局的时候，单位就使用dp_xxx即可完成适配（如下）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/dp_50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/dp_50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 屏幕适配 </tag>
            
            <tag> NoLimits </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andorid的多线程操作/UI</title>
      <link href="2020/12/17/Andorid%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C-UI/"/>
      <url>2020/12/17/Andorid%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C-UI/</url>
      
        <content type="html"><![CDATA[<p>介绍在Android中任何开启多线程</p><a id="more"></a><h1 id="Andorid的多线程操作-UI"><a href="#Andorid的多线程操作-UI" class="headerlink" title="Andorid的多线程操作/UI"></a>Andorid的多线程操作/UI</h1><blockquote><p>本篇已Java为主要语言</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ol><li>Thread</li><li>AsyncTask</li></ol><h3 id="Thread的使用"><a href="#Thread的使用" class="headerlink" title="Thread的使用"></a>Thread的使用</h3><h5 id="Thread子线程运行"><a href="#Thread子线程运行" class="headerlink" title="Thread子线程运行"></a>Thread子线程运行</h5><ol><li>创建一个类，继承Thread，并且重写run方法（如下）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span>()</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在run方法中写耗时操作即可</p><ol start="2"><li>使用： MyThread.start(); </li><li>更改写法，继承Runnable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Runnable</span>()</span>&#123;</span><br><span class="line"><span class="meta">@Overrid</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改了写法，使用方法也需要改变,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h5 id="Thread子线程通知UI更改"><a href="#Thread子线程通知UI更改" class="headerlink" title="Thread子线程通知UI更改"></a>Thread子线程通知UI更改</h5><ol><li>首先在子线程中是不运行进行UI操作，想要进行UI操作，只能在主线程中进行操作。</li><li>那么，在子线程中想要更改UI，就只能通过Handler来进行UI操作</li></ol><ul><li>先介绍一下Handler<ol><li><strong>Message</strong> :消息体，可携带一些信息，在不同线程之间进行传递数据</li><li><strong>Handler</strong> :消息 发送/处理 者，可通过Handler.sendMessage()来发送数据，也可以在handlerMesage中处理数据</li><li><strong>MessageQueue</strong> :消息队列，里面存放等待处理的消息</li><li><strong>Looper</strong> : MessageQueue的管家 用来开启一个无限循环，不停的查看MessageQueue中是否还有信息，如果存在，则取出给Handler进行处理。</li></ol></li></ul><ol start="3"><li>代码展示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">            textView.setText((String) msg.obj);</span><br><span class="line">            <span class="comment">//在handleMessage中是属于主线程</span></span><br><span class="line">            <span class="comment">//就可以从Message中取出传递的消息，赋值到TextView上去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.title);</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//在子线程中想要更改UI，那么就只能通知Handler来更改UI</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">            message.obj = <span class="string">&quot;这是一个消息&quot;</span>;</span><br><span class="line">            handler.sendMessage(message);</span><br><span class="line">            <span class="comment">//这里向Handler传递了一个Message，Message里包含了一段文字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><ol><li>介绍：相比    Thread来说，AsyncTask将方便很多，不需要复杂的通知Handler进行UI操作，全部都可以在AsyncTask中完成</li><li>使用起来也很简单，创建一个类继承AsyncTask并传递3个参数即可，下面将介绍AsyncTask的3个需要重写的方法<ul><li><strong>onPreExecute</strong>:此方法处于主线程，可进行一些UI初始化操作，比如说初始化进度条</li><li><strong>doInBackground</strong>:此方法处于子线程，用于进行一些耗时操作</li><li><strong>onProgressUpdate</strong>:此方法处于主线程，可进行UI操作，并且如果设置了返回值，将会不停的在doInBackground运行时返回结果</li></ul></li><li>下面将以下载功能并且更新进度条为例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskDome</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ProgressDialog progressDialog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_async_task_dome); </span><br><span class="line">        progressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">new</span> Download().execute(<span class="string">&quot;下载地址&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Download</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            progressDialog.show();</span><br><span class="line">            <span class="comment">//初始化进度条</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里假装在进行下载</span></span><br><span class="line">            Uri uri = Uri.parse(strings[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... integers)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里对进度条进行更新进度</span></span><br><span class="line">            progressDialog.setMessage(String.valueOf(integers[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子就完成了在子线程中更新UI</p>]]></content>
      
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Room数据库的使用</title>
      <link href="2020/11/21/Room%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/11/21/Room%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Room数据库的补充</p><a id="more"></a><h2 id="关于Android官方的Room数据库框架的使用"><a href="#关于Android官方的Room数据库框架的使用" class="headerlink" title="关于Android官方的Room数据库框架的使用"></a>关于Android官方的Room数据库框架的使用</h2><h6 id="关于Room"><a href="#关于Room" class="headerlink" title="关于Room"></a>关于Room</h6><p> Room是一个对象关系映射(ORM)库。Room抽象了SQLite的使用，可以在充分利用SQLite的同时访问流畅的数据库。<br> Room由三个重要的组件组成：Database、Entity、DAO</p><ul><li>Database：包含数据库持有者，并作为与应用持久关联数据的底层连接的主要访问点。而且Database对应的类必须满足下面几个条件：<br> 1. 必须是abstract类而且的extends RoomDatabase。<ol start="2"><li>必须在类头的注释中包含与数据库关联的实体列表(Entity对应的类)。</li><li>包含一个具有0个参数的抽象方法，并返回用@Dao注解的类。</li><li>在运行时，你可以通过Room.databaseBuilder() 或者 Room.inMemoryDatabaseBuilder()获取Database实例。</li></ol></li><li>Entity：代表数据库中某个表的实体类。</li><li>DAO：包含用于访问数据库的方法。</li></ul><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def room_version &#x3D; &quot;2.2.5&quot;</span><br><span class="line">implementation &quot;androidx.room:room-runtime:$room_version&quot;</span><br><span class="line">annotationProcessor &quot;androidx.room:room-compiler:$room_version&quot;</span><br></pre></td></tr></table></figure><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ol><li>首先创建一个Bean类，用来做为数据库的表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@Entity(indices &#x3D; &#123;@Index(&quot;BookName&quot;)&#125;)</span><br><span class="line">public class BookBean &#123;</span><br><span class="line"></span><br><span class="line">    public BookBean()&#123; &#125;</span><br><span class="line"></span><br><span class="line">    public BookBean(String name,String autohor,Data data)&#123;</span><br><span class="line">        this.BookName &#x3D; name;</span><br><span class="line">        this.BookAuthor &#x3D; autohor;</span><br><span class="line">        this.data &#x3D; data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PrimaryKey(autoGenerate &#x3D; true)</span><br><span class="line">    private int BookId;</span><br><span class="line"></span><br><span class="line">    private String BookName;</span><br><span class="line">    private String BookAuthor;</span><br><span class="line">    private static Data data;</span><br><span class="line"></span><br><span class="line">    public int getBookId() &#123;</span><br><span class="line">        return BookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookId(int bookId) &#123;</span><br><span class="line">        BookId &#x3D; bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBookName() &#123;</span><br><span class="line">        return BookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookName(String bookName) &#123;</span><br><span class="line">        BookName &#x3D; bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBookAuthor() &#123;</span><br><span class="line">        return BookAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookAuthor(String bookAuthor) &#123;</span><br><span class="line">        BookAuthor &#x3D; bookAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Data&#123;</span><br><span class="line">        private String userName;</span><br><span class="line">        private int userId;</span><br><span class="line"></span><br><span class="line">        public String getUserName() &#123;</span><br><span class="line">            return userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUserName(String userName) &#123;</span><br><span class="line">            this.userName &#x3D; userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getUserId() &#123;</span><br><span class="line">            return userId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUserId(int userId) &#123;</span><br><span class="line">            this.userId &#x3D; userId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Entityd的注释代表数据库中某个表的实体类。默认情况下Room会把Entity里面所有的字段对应到表上的每一列。如果需要制定某个字段不作为表中的一列需要添加@Ignore注解。</li><li>@Index(“BookName”)代表设置数据库中的索引</li><li>@PrimaryKey的注释代表数据库中的主键</li><li>@PrimaryKey的（autoGenerate = true）表示主键自增</li></ul></li><li>接下来就是创建数据库管理类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Database(entities &#x3D; &#123;BookBean.class&#125;, version &#x3D; 1)</span><br><span class="line">public abstract class AppDatabase extends RoomDatabase &#123;</span><br><span class="line">    public abstract BookDao userDao();</span><br><span class="line"></span><br><span class="line">    static final Migration MIGRATION_1_2 &#x3D; new Migration(1, 2) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void migrate(SupportSQLiteDatabase database) &#123;</span><br><span class="line">           database.execSQL(&quot;ALTER TABLE bookBean ADD COLUMN  index_name&#39;BookName&#39; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Database表示当前类为数据库管理类</li><li>entities = {BookBean.class}表示数据库相关的所有Entity实体类，他们会转化成数据库里面的表。</li><li>version = 1表示当前数据库的版本（每当数据库更新时，版本号也要对应增加）</li><li>public abstract BookDao userDao() 这个则是对应数据库的操作类</li><li>static final Migration MIGRATION_1_2 = new Migration(1, 2) 这个是指当数据库升级时，从版本1升级到版本2的升级过程</li></ul></li><li>之后就是创建数据库的操作类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface BookDao &#123;</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT * FROM bookbean&quot;)</span><br><span class="line">    Flowable&lt;List&lt;BookBean&gt;&gt; getAll();</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT * FROM bookbean WHERE BookId IN (:userIds)&quot;)</span><br><span class="line">    List&lt;BookBean&gt; loadAllByIds(int[] userIds);</span><br><span class="line"></span><br><span class="line">    @Query(&quot;update bookbean set bookauthor &#x3D; :value&quot;)</span><br><span class="line">    void setBookAuthor(boolean value);</span><br><span class="line"></span><br><span class="line">    @Insert</span><br><span class="line">    Completable insertAll(BookBean... users);</span><br><span class="line"></span><br><span class="line">    @Delete</span><br><span class="line">    Completable delete(BookBean user);</span><br><span class="line"></span><br><span class="line">    @Update</span><br><span class="line">    Completable updateUsers(BookBean... users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Dao 表示这个组件代表了作为DAO的类或者接口。DAO是Room的主要组件，负责定义访问数据库的方法。Room使用过程中一般使用抽象DAO类来定义数据库的CRUD操作。DAO可以是一个接口也可以是一个抽象类。如果它是一个抽象类，它可以有一个构造函数，它将RoomDatabase作为其唯一参数。Room在编译时创建每个DAO实。</li><li>@Query对应数据库的查询，后接查询语句</li><li>@Insert对应数据库的插入</li><li>@Delete对应数据库的删除</li><li>@Update对应数据库的更新，每次更新都会将没有涉及到的值进行重置</li><li>Completable返回值是为了和RxJava一起使用，如果不使用RxJava则写成void或者对应类型</li><li>Flowable也是一样，不过这个返回类型是支持背压</li></ul></li><li>在Activity/Fragment中使用<ol><li>首先为了防止重复创建数据库，我们创建一个类继承Application<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyApplication extends Application &#123;</span><br><span class="line">    private static AppDatabase db;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        db &#x3D; Room.databaseBuilder(getApplicationContext(),</span><br><span class="line">                AppDatabase.class, &quot;database-name&quot;)</span><br><span class="line">                &#x2F;&#x2F;.addMigrations(MIGRATION_1_2)</span><br><span class="line">                .build();</span><br><span class="line">        &#x2F;&#x2F;.allowMainThreadQueries()&#x2F;&#x2F;允许在主线程中查询</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static AppDatabase getDatabase()&#123;</span><br><span class="line">        return db;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在需要的Activity/Fragment中获取数据库实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">   private ActivityMainBinding binding;</span><br><span class="line">   private AppDatabase db;</span><br><span class="line">   </span><br><span class="line">    @Override</span><br><span class="line">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       binding &#x3D; DataBindingUtil.setContentView(this, R.layout.activity_main);</span><br><span class="line">       db &#x3D; MyApplication.getDatabase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="RxJava-Room"><a href="#RxJava-Room" class="headerlink" title="RxJava+Room"></a>RxJava+Room</h5>一般来说对数据库进行操作是不运行在主线程中执行的，因为当进行大量数据库操作时，可能会堵塞主线程，所以可以配合RxJava来使用</li></ol></li></ol><h5 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; RxJava support for Room</span><br><span class="line">   implementation &quot;androidx.room:room-rxjava2:2.2.5&quot;</span><br><span class="line"></span><br><span class="line">   implementation &#39;io.reactivex.rxjava2:rxjava:2.0.6&#39;</span><br><span class="line">   implementation &#39;io.reactivex.rxjava2:rxandroid:2.0.1&#39;</span><br></pre></td></tr></table></figure><h5 id="使用RxJava来进行数据库操作"><a href="#使用RxJava来进行数据库操作" class="headerlink" title="使用RxJava来进行数据库操作"></a>使用RxJava来进行数据库操作</h5><ul><li>增<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Completable completable &#x3D; db.userDao().insertAll(new BookBean(&quot;HTML(&quot; + i + &quot;)&quot;, &quot;jjj&quot;, data));</span><br><span class="line">                  completable.subscribeOn(Schedulers.io())</span><br><span class="line">                          .subscribe(new CompletableObserver() &#123;</span><br><span class="line">                              @Override</span><br><span class="line">                              public void onSubscribe(Disposable d) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                              @Override</span><br><span class="line">                              public void onComplete() &#123;</span><br><span class="line">                                  Log.e(&quot;why&quot;, &quot;onClick: 插入成功&quot;);</span><br><span class="line">                              &#125;</span><br><span class="line"></span><br><span class="line">                              @Override</span><br><span class="line">                              public void onError(Throwable e) &#123;</span><br><span class="line">                                  Log.e(&quot;why&quot;, &quot;onClick: 插入失败&quot; + e);</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;);</span><br></pre></td></tr></table></figure>上述操作是往数据库中添加了”一本”书的信息</li><li>删<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Completable comparable &#x3D; db.userDao().delete(bean);</span><br><span class="line">                   comparable.subscribeOn(Schedulers.io())</span><br><span class="line">                           .subscribe(new CompletableObserver() &#123;</span><br><span class="line">                               @Override</span><br><span class="line">                               public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onComplete() &#123;</span><br><span class="line">                                   Log.e(&quot;why&quot;, &quot;onClick: 删除数据成功&quot;);</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onError(Throwable e) &#123;</span><br><span class="line">                                   Log.e(&quot;why&quot;, &quot;onClick: 删除数据失败&quot; + e);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br></pre></td></tr></table></figure>上述操作是往数据库中删除了”全部”书的信息</li><li>改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for (BookBean bean : bookBean) &#123;</span><br><span class="line">                    bean.setBookName(&quot;JAVA&quot;);</span><br><span class="line">                    Completable completable &#x3D; db.userDao().updateUsers(bean);</span><br><span class="line">                    completable.subscribeOn(Schedulers.io())</span><br><span class="line">                            .subscribe(new CompletableObserver() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                @Override</span><br><span class="line">                                public void onComplete() &#123;</span><br><span class="line">                                    Log.e(&quot;why&quot;, &quot;onClick: 更新数据成功&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                @Override</span><br><span class="line">                                public void onError(Throwable e) &#123;</span><br><span class="line">                                    Log.e(&quot;why&quot;, &quot;onClick: 更新数据失败&quot; + e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>上述操作是将查询到的数据循环改变BookName的值，在通过数据库操作来更新”全部”数据</li><li>查<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.userDao().getAll()</span><br><span class="line">                       .subscribeOn(Schedulers.io())</span><br><span class="line">                       .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                       .subscribe(new Consumer&lt;List&lt;BookBean&gt;&gt;() &#123;</span><br><span class="line">                           @Override</span><br><span class="line">                           public void accept(List&lt;BookBean&gt; bookBeans) throws Exception &#123;</span><br><span class="line">                               bookBean &#x3D; bookBeans;</span><br><span class="line">                               for (BookBean bean : bookBeans) &#123;</span><br><span class="line">                                   Log.e(&quot;why&quot;, &quot;onClick: 查询成功,数据为&quot; + bean.toString());</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br></pre></td></tr></table></figure>上述操作是将查询到的数据”全部”保存起来</li></ul><blockquote><p>以上就是全部内容</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广播通知强制下线</title>
      <link href="2020/10/21/%E5%B9%BF%E6%92%AD%E9%80%9A%E7%9F%A5%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF/"/>
      <url>2020/10/21/%E5%B9%BF%E6%92%AD%E9%80%9A%E7%9F%A5%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>Android广播的使用</p><a id="more"></a><h2 id="关于使用广播通知强制下线的功能"><a href="#关于使用广播通知强制下线的功能" class="headerlink" title="关于使用广播通知强制下线的功能"></a>关于使用广播通知强制下线的功能</h2><h5 id="关于在那里创建广播接收器"><a href="#关于在那里创建广播接收器" class="headerlink" title="关于在那里创建广播接收器"></a>关于在那里创建广播接收器</h5><p>例子：一个账号已经登录，在另一个手机上再一次登录这个账号，这时候就需要提醒用户“账号有在别处登录，请重新登录”，强制下线，跳转到登录界面。</p><ul><li>个人认为应该在Base类中创建广播接收器，并销毁，这样就可以在任何地方响应广播</li><li>广播类型应该为动态添加</li></ul><p>下面我将在BaseActivity中创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private JudgeLoginReceiver judgeLoginReceiver;</span><br><span class="line">public static String signInAction &#x3D; &quot;LOGIN.DilDil.ACTION&quot;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">   protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       onCreateView(savedInstanceState);</span><br><span class="line">   ...</span><br><span class="line">       initBroadcastReceiver();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   private void initBroadcastReceiver() &#123;</span><br><span class="line">       if (judgeLoginReceiver !&#x3D; null) &#123;</span><br><span class="line">           IntentFilter intentFilter &#x3D; new IntentFilter();</span><br><span class="line">           intentFilter.addAction(signInAction);</span><br><span class="line">           registerReceiver(judgeLoginReceiver, intentFilter);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           judgeLoginReceiver &#x3D; new JudgeLoginReceiver();</span><br><span class="line">           IntentFilter intentFilter &#x3D; new IntentFilter();</span><br><span class="line">           intentFilter.addAction(signInAction);</span><br><span class="line">           registerReceiver(judgeLoginReceiver, intentFilter);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    @Override</span><br><span class="line">   protected void onDestroy() &#123;</span><br><span class="line">       if (judgeLoginReceiver !&#x3D; null) &#123;</span><br><span class="line">           unregisterReceiver(judgeLoginReceiver);</span><br><span class="line">       &#125;</span><br><span class="line">       super.onDestroy();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我首先创建了要响应的Action（signInAction），之后在onCreate中初始化广播。<br>在initBroadcastReceiver中，为了防止反复创建，于是判断是否已经存在，没有就创建，有就直接注册。别忘了要在onDestroy取消注册</p><h5 id="接下来还需要创建一个类来继承BroadcastReceiver"><a href="#接下来还需要创建一个类来继承BroadcastReceiver" class="headerlink" title="接下来还需要创建一个类来继承BroadcastReceiver"></a>接下来还需要创建一个类来继承BroadcastReceiver</h5><p>那么创建一个名为JudgeLoginReceiver的类来继承BroadcastReceiver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private static class JudgeLoginReceiver extends BroadcastReceiver &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            new MaterialDialog.Builder(context)</span><br><span class="line">                    .title(R.string.loginWarning)</span><br><span class="line">                    .content(R.string.thisAccountHasSigned)</span><br><span class="line">                    .positiveText(R.string.determine)</span><br><span class="line">                    .cancelable(false)</span><br><span class="line">                    .onPositive(new MaterialDialog.SingleButtonCallback() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) &#123;</span><br><span class="line">                            ApiService apiService &#x3D; ApiEngine.getInstance().getApiService();</span><br><span class="line">                            apiService.Logout()</span><br><span class="line">                                    .subscribeOn(Schedulers.io())</span><br><span class="line">                                    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                                    .subscribe(new Observer&lt;LogoutBean&gt;() &#123;</span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onSubscribe(@io.reactivex.annotations.NonNull Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onNext(@io.reactivex.annotations.NonNull LogoutBean logoutBean) &#123;</span><br><span class="line">                                            SharePreferenceUtil.getInstance(context).remove(&quot;cookie&quot;);</span><br><span class="line">                                            ActivityUtils.startActivity(LoginActivity.class);</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onError(@io.reactivex.annotations.NonNull Throwable e) &#123;</span><br><span class="line">                                            XToastUtils.error(R.string.networkError);</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onComplete() &#123;</span><br><span class="line"></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继承BroadcastReceiver之后需要重写onReceive方法，这个方法是用来处理接收到广播之后的行为。<br>我在onReceive中创建了一个提示框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title 是提示框的标题</span><br><span class="line">content 是内容</span><br><span class="line">positiveText 是确定按钮的文字</span><br><span class="line">cancelable 是指是否可以点击外面退出</span><br><span class="line">onPositive 是指确实按钮的点击监听</span><br><span class="line">不写取消按钮就默认没有取消按钮</span><br></pre></td></tr></table></figure><p>接下来，我在点击事件中获取Api接口，调用了退出登录的方法，并处理结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于DanmakuVideoPlayer的使用</title>
      <link href="2020/10/10/%E5%85%B3%E4%BA%8EDanmakuVideoPlayer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/10/10/%E5%85%B3%E4%BA%8EDanmakuVideoPlayer%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>第三方视频播放库的使用</p><a id="more"></a><h2 id="关于DanmakuVideoPlayer的使用"><a href="#关于DanmakuVideoPlayer的使用" class="headerlink" title="关于DanmakuVideoPlayer的使用"></a>关于DanmakuVideoPlayer的使用</h2><h5 id="介绍DanmakuVideoPlayer"><a href="#介绍DanmakuVideoPlayer" class="headerlink" title="介绍DanmakuVideoPlayer"></a>介绍DanmakuVideoPlayer</h5><ul><li><p>基于IJKPlayer（兼容系统MediaPlayer与EXOPlayer2），实现了多功能的视频播放器<br>（包括弹幕）</p><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5></li><li><p>A、直接引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;完整版引入</span><br><span class="line">implementation &#39;com.shuyu:GSYVideoPlayer:7.1.6&#39;</span><br></pre></td></tr></table></figure></li><li><p>B、添加java和你想要的so支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-java:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;是否需要ExoPlayer模式</span><br><span class="line">implementation &#39;com.shuyu:GSYVideoPlayer-exo2:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据你的需求ijk模式的so</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-armv5:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-armv7a:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-arm64:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-x64:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-x86:7.1.6&#39;</span><br></pre></td></tr></table></figure></li><li><p>支持其他格式协议的（mpeg，rtsp, concat、crypto协议）<br>A、B普通版本支持263/264/265等，对于mpeg编码会有声音无画面情况。 C 引入的so支持mpeg编码和其他补充协议，但是so包相对变大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-java:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;是否需要ExoPlayer模式</span><br><span class="line">implementation &#39;com.shuyu:GSYVideoPlayer-exo2:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更多ijk的编码支持</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-ex_so:7.1.6&#39;</span><br></pre></td></tr></table></figure></li></ul><h5 id="activity-fragment中使用"><a href="#activity-fragment中使用" class="headerlink" title="activity/fragment中使用"></a>activity/fragment中使用</h5><ul><li>创建一个播放器类，继承StandardGSYVideoPlayer，并且创建播放器的布局。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class DanmakuVideoPlayer extends StandardGSYVideoPlayer &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>布局文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:background&#x3D;&quot;@android:color&#x2F;black&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;surface_container&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;thumbImage&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:scaleType&#x3D;&quot;centerCrop&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;弹幕控件（可直接使用）</span><br><span class="line">    &lt;master.flame.danmaku.ui.widget.DanmakuView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;danmaku_view&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_above&#x3D;&quot;@+id&#x2F;layout_bottom&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;thumb&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_alignParentStart&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentLeft&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentTop&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentEnd&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentRight&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class="line">        android:background&#x3D;&quot;#000000&quot;</span><br><span class="line">        android:scaleType&#x3D;&quot;fitCenter&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;底部区域（底部区域有分成两层，一层进度条，一层播放控制）</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;layout_bottom&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;seekbar&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;35dp&quot;</span><br><span class="line">            android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">            android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">            android:paddingRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Video_SeekBar_play&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:src&#x3D;&quot;@mipmap&#x2F;play&quot;</span><br><span class="line">                android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;SeekBar</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;progress&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">                android:layout_weight&#x3D;&quot;1.0&quot;</span><br><span class="line">                android:background&#x3D;&quot;@null&quot;</span><br><span class="line">                android:max&#x3D;&quot;100&quot;</span><br><span class="line">                android:maxHeight&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:minHeight&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:paddingTop&#x3D;&quot;8dp&quot;</span><br><span class="line">                android:paddingBottom&#x3D;&quot;8dp&quot;</span><br><span class="line">                android:progressDrawable&#x3D;&quot;@drawable&#x2F;seekbar_color&quot;</span><br><span class="line">                android:thumb&#x3D;&quot;@mipmap&#x2F;seekbar_img&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;fullscreen&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                android:scaleType&#x3D;&quot;center&quot;</span><br><span class="line">                android:src&#x3D;&quot;@drawable&#x2F;crop_free_24&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;Bottom_controller&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;25dp&quot;</span><br><span class="line">            android:layout_gravity&#x3D;&quot;center&quot;</span><br><span class="line">            android:layout_marginBottom&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">            android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">            android:paddingRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Video_play&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_8&quot;</span><br><span class="line">                android:src&#x3D;&quot;@mipmap&#x2F;play&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:src&#x3D;&quot;@drawable&#x2F;skip_next_24&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;current&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:text&#x3D;&quot;00:00&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:text&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;total&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:text&#x3D;&quot;00:00&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;definition_off&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;50dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">                android:src&#x3D;&quot;@mipmap&#x2F;definition&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.gcssloop.widget.RCRelativeLayout</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Re_video_cover&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">                app:round_corner&#x3D;&quot;5dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:alpha&#x3D;&quot;0.3&quot;</span><br><span class="line">                    android:src&#x3D;&quot;#fff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:id&#x3D;&quot;@+id&#x2F;send_danmaku&quot;</span><br><span class="line">                    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">                    android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_20&quot;</span><br><span class="line">                    android:gravity&#x3D;&quot;center|left&quot;</span><br><span class="line">                    android:paddingLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                    android:text&#x3D;&quot;@string&#x2F;BulletScreenTips&quot;</span><br><span class="line">                    android:textColor&#x3D;&quot;#b1b0b5&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;com.gcssloop.widget.RCRelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Double_speed&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;50dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;20dp&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">                android:text&#x3D;&quot;@string&#x2F;DoubleSpeed&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;definition&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;50dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;20dp&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ProgressBar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;bottom_progressbar&quot;</span><br><span class="line">        style&#x3D;&quot;?android:attr&#x2F;progressBarStyleHorizontal&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;1.5dp&quot;</span><br><span class="line">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class="line">        android:max&#x3D;&quot;100&quot;</span><br><span class="line">        android:progressDrawable&#x3D;&quot;@drawable&#x2F;video_progress&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;back_tiny&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;24dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;24dp&quot;</span><br><span class="line">        android:layout_marginLeft&#x3D;&quot;6dp&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;6dp&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;顶部区域(相应的控件只能写在名为layout_top的父布局下面)</span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;layout_top&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:background&#x3D;&quot;@drawable&#x2F;video_title_bg&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center_vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;first_floor&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;@dimen&#x2F;dp_48&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;back&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;48dp&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;48dp&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">            android:scaleType&#x3D;&quot;centerInside&quot;</span><br><span class="line">            android:src&#x3D;&quot;@drawable&#x2F;video_back&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;title&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">            android:layout_toRightOf&#x3D;&quot;@+id&#x2F;back&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">            android:textColor&#x3D;&quot;@android:color&#x2F;white&quot;</span><br><span class="line">            android:textSize&#x3D;&quot;18sp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;LinearLayout</span><br><span class="line">                    android:id&#x3D;&quot;@+id&#x2F;Sanlians&quot;</span><br><span class="line">                    android:layout_marginEnd&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                    android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">                    android:layout_alignParentEnd&#x3D;&quot;true&quot;</span><br><span class="line">                    android:gravity&#x3D;&quot;right|center_vertical&quot;</span><br><span class="line">                    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                    android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_like&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@mipmap&#x2F;like_while&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_coin&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@mipmap&#x2F;coin_while&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_forward&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@mipmap&#x2F;forward_while&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_more&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_20&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@drawable&#x2F;more_vert_24&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">        &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;UPImage&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;@dimen&#x2F;dp_120&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;@dimen&#x2F;dp_30&quot;</span><br><span class="line">            android:layout_below&#x3D;&quot;@+id&#x2F;first_floor&quot;</span><br><span class="line">            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_20&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:alpha&#x3D;&quot;0.5&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:background&#x3D;&quot;@drawable&#x2F;file_background_circular_grey&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.android.liuzhuang.rcimageview.CircleImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;up_img&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_30&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_30&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;up_name&quot;</span><br><span class="line">                android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">                android:paddingRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:text&#x3D;&quot;UP主名称&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;5dp&quot;</span><br><span class="line">                android:layout_toRightOf&#x3D;&quot;@+id&#x2F;up_img&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;@color&#x2F;White&quot;</span><br><span class="line">                android:textSize&#x3D;&quot;16sp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;moe.codeest.enviews.ENDownloadView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;loading&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;28dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;28dp&quot;</span><br><span class="line">        android:layout_centerHorizontal&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;invisible&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;moe.codeest.enviews.ENPlayView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;start&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;60dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;60dp&quot;</span><br><span class="line">        android:layout_centerHorizontal&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_vertical&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;small_close&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:paddingLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">        android:paddingTop&#x3D;&quot;10dp&quot;</span><br><span class="line">        android:scaleType&#x3D;&quot;centerInside&quot;</span><br><span class="line">        android:src&#x3D;&quot;@drawable&#x2F;video_small_close&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;lock_screen&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:layout_alignParentRight&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_marginRight&#x3D;&quot;50dp&quot;</span><br><span class="line">        android:scaleType&#x3D;&quot;centerInside&quot;</span><br><span class="line">        android:src&#x3D;&quot;@drawable&#x2F;unlock&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;小图预览</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;preview_layout&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;@dimen&#x2F;seek_bar_image&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;100dp&quot;</span><br><span class="line">        android:layout_above&#x3D;&quot;@+id&#x2F;layout_bottom&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;preview_image&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:background&#x3D;&quot;#000000&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure>次布局包括 顶部、播放/暂停按钮、底部、弹幕、画面。对应的区域控件只能写在对应的区域，<br>否则后期无法控制隐藏与显示。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XUI的BaseRecyclerAdapter</title>
      <link href="2020/10/09/XUI%E7%9A%84BaseRecyclerAdapter/"/>
      <url>2020/10/09/XUI%E7%9A%84BaseRecyclerAdapter/</url>
      
        <content type="html"><![CDATA[<p>第三方UI库的使用</p><a id="more"></a><h2 id="关于XUI的BaseRecyclerAdapter的使用"><a href="#关于XUI的BaseRecyclerAdapter的使用" class="headerlink" title="关于XUI的BaseRecyclerAdapter的使用"></a>关于XUI的BaseRecyclerAdapter的使用</h2><h6 id="正常使用："><a href="#正常使用：" class="headerlink" title="正常使用："></a>正常使用：</h6><ul><li>创建一个适配器来继承BaseRecyclerAdapter，想要传入参数（也就是适配器数据）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class RecommendedVideoAdapter extends BaseRecyclerAdapter&lt;RecommendVideoBean.BeanData&gt;</span><br></pre></td></tr></table></figure></li><li>创建构造方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public RecommendedVideoAdapter(Context context,VideoChoiceDialog videoChoiceDialog) &#123;</span><br><span class="line">    this.videoChoiceDialog &#x3D; videoChoiceDialog;</span><br><span class="line">    mContext &#x3D; context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 将上下文对象传入进来，方便之后的使用</li><li>在bindData中写处理数据的操作  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Override</span><br><span class="line">protected void bindData(@NonNull RecyclerViewHolder holder, int position, RecommendVideoBean.BeanData item) &#123;</span><br><span class="line">    cover &#x3D; holder.findViewById(R.id.Re_cover);</span><br><span class="line">    play_volume &#x3D; holder.findViewById(R.id.Re_play_volume);</span><br><span class="line">    barrage_volume &#x3D; holder.findViewById(R.id.Re_barrage_volume);</span><br><span class="line">    Re_video &#x3D; holder.findViewById(R.id.Re_video_cover);</span><br><span class="line">    title &#x3D; holder.findViewById(R.id.Re_title);</span><br><span class="line">    more &#x3D; holder.findViewById(R.id.Re_more);</span><br><span class="line">    Re_video.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            Intent intent &#x3D; new Intent(mContext, VideoActivity.class);</span><br><span class="line">            intent.putExtra(&quot;id&quot;, videoBean.getData().get(position).getId());</span><br><span class="line">            intent.putExtra(&quot;uid&quot;, videoBean.getData().get(position).getUid());</span><br><span class="line">            mContext.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    if (item !&#x3D; null) &#123;</span><br><span class="line">        initData(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void initData(RecommendVideoBean.BeanData item) &#123;</span><br><span class="line">    Glide.with(mContext)</span><br><span class="line">            .load(item.getCover())</span><br><span class="line">            .into(cover);</span><br><span class="line">    play_volume.setText(item.getPlayNum() + &quot;&quot;);</span><br><span class="line">    barrage_volume.setText(item.getDanmunum() + &quot;&quot;);</span><br><span class="line">    title.setText(item.getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 包括获取控件和初始化数据<h6 id="在Avtivity-Fragment中的使用："><a href="#在Avtivity-Fragment中的使用：" class="headerlink" title="在Avtivity/Fragment中的使用："></a>在Avtivity/Fragment中的使用：</h6></li><li>初始化<ol><li>获取RecyclerView控件</li><li>设置RecyclerView的排列方式</li><li>创建适配器对象</li><li>RecyclerView设置适配器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GridLayoutManager layoutManager1 &#x3D; new GridLayoutManager(getContext(), 2);</span><br><span class="line">      adapter &#x3D; new RecommendedVideoAdapter(getContext(), videoChoiceDialog);</span><br><span class="line">      binding.ReRecy.setLayoutManager(layoutManager1);</span><br><span class="line">      binding.ReRecy.setAdapter(adapter);</span><br></pre></td></tr></table></figure></li></ol></li><li>加载数据<br>直接调用适配器的加载数据的方法，刷新也是一样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adapter.loadMore(videoBean.getData());</span><br><span class="line">&#x2F;&#x2F;loadMore一般是传入一个list（加载）</span><br><span class="line">for (RecommendVideoBean.BeanData datum : videoBean.getData()) &#123;</span><br><span class="line">           adapter.add(0, datum);</span><br><span class="line">       &#125;</span><br><span class="line">&#x2F;&#x2F;add一般是传入一个对象（在末尾添加一个）</span><br><span class="line">adapter.refresh(videoBean.getData());</span><br><span class="line">&#x2F;&#x2F;refresh和加载差不多（刷新）</span><br></pre></td></tr></table></figure><h6 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h6></li><li>如果想要有item加载时的动画，那么在调用adapter加载数据的时候，就不能使用 loadMore ，必须使用 add 来一个一个添加，否则是没有动画的</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
            <tag> Recycler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SmartRefreshLayout的使用</title>
      <link href="2020/09/22/SmartRefreshLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/09/22/SmartRefreshLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>第三方刷新库的使用</p><a id="more"></a><h1 id="SmartRefreshLayout"><a href="#SmartRefreshLayout" class="headerlink" title="SmartRefreshLayout"></a>SmartRefreshLayout</h1><p>本编将讲解SmartRefreshLayout的使用，来达成进入页面时，调用自动加载来加载数据的效果。</p><h6 id="SmartRefreshLayout的Xml使用："><a href="#SmartRefreshLayout的Xml使用：" class="headerlink" title="SmartRefreshLayout的Xml使用："></a>SmartRefreshLayout的Xml使用：</h6><ul><li>SmartRefreshLayout是一个父类，它只允许有一个子类被它包裹，不能有两个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.scwang.smartrefresh.layout.SmartRefreshLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;swipe&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">              android:id&#x3D;&quot;@+id&#x2F;Hot_Recy&quot;</span><br><span class="line">              android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">              android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">              android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">              android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">              android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">              app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;com.scwang.smartrefresh.layout.SmartRefreshLayout&gt;</span><br></pre></td></tr></table></figure><p>这样就给这个页面添加了个刷新功能（包括，下拉刷新，上拉加载）</p><ul><li>接下来就是对SmartRefreshLayout的属性进行设置<ol><li>推荐进行全局设置，在MyApplication里进行设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MyApplication extends Application &#123;</span><br><span class="line">...</span><br><span class="line">static &#123;&#x2F;&#x2F;使用static代码段可以防止内存泄漏</span><br><span class="line">    &#x2F;&#x2F;设置全局默认配置（优先级最低，会被其他设置覆盖）</span><br><span class="line">    SmartRefreshLayout.setDefaultRefreshInitializer(new DefaultRefreshInitializer() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void initialize(@NonNull Context context, @NonNull RefreshLayout layout) &#123;</span><br><span class="line">            &#x2F;&#x2F;开始设置全局的基本参数（可以被下面的DefaultRefreshHeaderCreator覆盖）</span><br><span class="line">            layout.setEnableLoadMore(false);</span><br><span class="line">            layout.setDisableContentWhenRefresh(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;全局设置默认的 Header</span><br><span class="line">    SmartRefreshLayout.setDefaultRefreshHeaderCreator(new DefaultRefreshHeaderCreator() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public RefreshHeader createRefreshHeader(Context context, RefreshLayout layout) &#123;</span><br><span class="line">            &#x2F;&#x2F;开始设置全局的基本参数（这里设置的属性只跟下面的MaterialHeader绑定，其他Header不会生效，能覆盖DefaultRefreshInitializer的属性和Xml设置的属性）</span><br><span class="line">            layout.setEnableHeaderTranslationContent(false);</span><br><span class="line">            return new MaterialHeader(context).setColorSchemeResources(R.color.Pink,R.color.While,R.color.While);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我这里是设置了SmartRefreshLayout它的下拉刷新样式，并且取消了上拉加载，但是这里设置的属性优先级是最低的，别的页面如果进行覆写，则会被覆盖</li></ol></li></ul><h6 id="SmartRefreshLayout的java代码使用："><a href="#SmartRefreshLayout的java代码使用：" class="headerlink" title="SmartRefreshLayout的java代码使用："></a>SmartRefreshLayout的java代码使用：</h6><ul><li>首先获取控件，这里因为全篇都是使用的DataBinding，所有就不用获取控件了，之后设置SmartRefreshLayout的下拉刷新监听，在监听方法里面写入你的加载数据的方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binding.swipe.setOnRefreshListener(new OnRefreshListener() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onRefresh(@NonNull RefreshLayout refreshLayout) &#123;</span><br><span class="line">                initDatas();</span><br><span class="line">                isFirst &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>我这里是调用了加载数据的方法，并且将isFirst设置为false，这样是用来区分第一次加载和手动下拉加载</li><li>之后还需要在onCreate中设置SmartRefreshLayout自动刷新，这样在进入avtivity/Fragment的时候就会进行自动的刷新，并调用刷新监听里设置的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void initData() &#123;</span><br><span class="line">        binding.swipe.autoRefresh();&#x2F;&#x2F;自动刷新</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>这样基本上就完成了想要的效果。接下来就给出SmartRefreshLayout的属性。</li><li>SmartRefreshLayout属性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class RefreshActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        &#x2F;&#x2F;下面示例中的值等于默认值</span><br><span class="line">        RefreshLayout refreshLayout &#x3D; (RefreshLayout)findViewById(R.id.refreshLayout);</span><br><span class="line">        refreshLayout.setPrimaryColorsId(R.color.colorPrimary, android.R.color.white);</span><br><span class="line">        refreshLayout.setDragRate(0.5f);&#x2F;&#x2F;显示下拉高度&#x2F;手指真实下拉高度&#x3D;阻尼效果</span><br><span class="line">        refreshLayout.setReboundDuration(300);&#x2F;&#x2F;回弹动画时长（毫秒）</span><br><span class="line"></span><br><span class="line">        refreshLayout.setHeaderHeight(100);&#x2F;&#x2F;Header标准高度（显示下拉高度&gt;&#x3D;标准高度 触发刷新）</span><br><span class="line">        refreshLayout.setHeaderHeightPx(100);&#x2F;&#x2F;同上-像素为单位 （V1.1.0删除）</span><br><span class="line">        refreshLayout.setFooterHeight(100);&#x2F;&#x2F;Footer标准高度（显示上拉高度&gt;&#x3D;标准高度 触发加载）</span><br><span class="line">        refreshLayout.setFooterHeightPx(100);&#x2F;&#x2F;同上-像素为单位 （V1.1.0删除）</span><br><span class="line"></span><br><span class="line">        refreshLayout.setFooterHeaderInsetStart(0);&#x2F;&#x2F;设置 Header 起始位置偏移量 1.0.5</span><br><span class="line">        refreshLayout.setFooterHeaderInsetStartPx(0);&#x2F;&#x2F;同上-像素为单位 1.0.5 （V1.1.0删除）</span><br><span class="line">        refreshLayout.setFooterFooterInsetStart(0);&#x2F;&#x2F;设置 Footer 起始位置偏移量 1.0.5</span><br><span class="line">        refreshLayout.setFooterFooterInsetStartPx(0);&#x2F;&#x2F;同上-像素为单位 1.0.5 （V1.1.0删除）</span><br><span class="line"></span><br><span class="line">        refreshLayout.setHeaderMaxDragRate(2);&#x2F;&#x2F;最大显示下拉高度&#x2F;Header标准高度</span><br><span class="line">        refreshLayout.setFooterMaxDragRate(2);&#x2F;&#x2F;最大显示下拉高度&#x2F;Footer标准高度</span><br><span class="line">        refreshLayout.setHeaderTriggerRate(1);&#x2F;&#x2F;触发刷新距离 与 HeaderHeight 的比率1.0.4</span><br><span class="line">        refreshLayout.setFooterTriggerRate(1);&#x2F;&#x2F;触发加载距离 与 FooterHeight 的比率1.0.4</span><br><span class="line"></span><br><span class="line">        refreshLayout.setEnableRefresh(true);&#x2F;&#x2F;是否启用下拉刷新功能</span><br><span class="line">        refreshLayout.setEnableLoadMore(false);&#x2F;&#x2F;是否启用上拉加载功能</span><br><span class="line">        refreshLayout.setEnableAutoLoadMore(true);&#x2F;&#x2F;是否启用列表惯性滑动到底部时自动加载更多</span><br><span class="line">        refreshLayout.setEnablePureScrollMode(false);&#x2F;&#x2F;是否启用纯滚动模式</span><br><span class="line">        refreshLayout.setEnableNestedScroll(false);&#x2F;&#x2F;是否启用嵌套滚动</span><br><span class="line">        refreshLayout.setEnableOverScrollBounce(true);&#x2F;&#x2F;是否启用越界回弹</span><br><span class="line">        refreshLayout.setEnableScrollContentWhenLoaded(true);&#x2F;&#x2F;是否在加载完成时滚动列表显示新的内容</span><br><span class="line">        refreshLayout.setEnableHeaderTranslationContent(true);&#x2F;&#x2F;是否下拉Header的时候向下平移列表或者内容</span><br><span class="line">        refreshLayout.setEnableFooterTranslationContent(true);&#x2F;&#x2F;是否上拉Footer的时候向上平移列表或者内容</span><br><span class="line">        refreshLayout.setEnableLoadMoreWhenContentNotFull(true);&#x2F;&#x2F;是否在列表不满一页时候开启上拉加载功能</span><br><span class="line">        refreshLayout.setEnableFooterFollowWhenLoadFinished(false);&#x2F;&#x2F;是否在全部加载结束之后Footer跟随内容1.0.4</span><br><span class="line">        refreshLayout.setEnableOverScrollDrag(false);&#x2F;&#x2F;是否启用越界拖动（仿苹果效果）1.0.4</span><br><span class="line"></span><br><span class="line">        refreshLayout.setEnableScrollContentWhenRefreshed(true);&#x2F;&#x2F;是否在刷新完成时滚动列表显示新的内容 1.0.5</span><br><span class="line">        refreshLayout.srlEnableClipHeaderWhenFixedBehind(true);&#x2F;&#x2F;是否剪裁Header当时样式为FixedBehind时1.0.5</span><br><span class="line">        refreshLayout.srlEnableClipFooterWhenFixedBehind(true);&#x2F;&#x2F;是否剪裁Footer当时样式为FixedBehind时1.0.5</span><br><span class="line"></span><br><span class="line">        refreshLayout.setDisableContentWhenRefresh(false);&#x2F;&#x2F;是否在刷新的时候禁止列表的操作</span><br><span class="line">        refreshLayout.setDisableContentWhenLoading(false);&#x2F;&#x2F;是否在加载的时候禁止列表的操作</span><br><span class="line"></span><br><span class="line">        refreshLayout.setOnMultiPurposeListener(new SimpleMultiPurposeListener());&#x2F;&#x2F;设置多功能监听器</span><br><span class="line">        refreshLayout.setScrollBoundaryDecider(new ScrollBoundaryDecider());&#x2F;&#x2F;设置滚动边界判断</span><br><span class="line">        refreshLayout.setScrollBoundaryDecider(new ScrollBoundaryDeciderAdapter());&#x2F;&#x2F;自定义滚动边界</span><br><span class="line"></span><br><span class="line">        refreshLayout.setRefreshHeader(new ClassicsHeader(context));&#x2F;&#x2F;设置Header</span><br><span class="line">        refreshLayout.setRefreshFooter(new ClassicsFooter(context));&#x2F;&#x2F;设置Footer</span><br><span class="line">        refreshLayout.setRefreshContent(new View(context));&#x2F;&#x2F;设置刷新Content（用于非xml布局代替addView）1.0.4</span><br><span class="line"></span><br><span class="line">        refreshLayout.autoRefresh();&#x2F;&#x2F;自动刷新</span><br><span class="line">        refreshLayout.autoLoadMore();&#x2F;&#x2F;自动加载</span><br><span class="line">        refreshLayout.autoRefreshAnimationOnly();&#x2F;&#x2F;自动刷新，只显示动画不执行刷新</span><br><span class="line">        refreshLayout.autoLoadMoreAnimationOnly();&#x2F;&#x2F;自动加载，只显示动画不执行加载</span><br><span class="line">        refreshLayout.autoRefresh(400);&#x2F;&#x2F;延迟400毫秒后自动刷新</span><br><span class="line">        refreshLayout.autoLoadMore(400);&#x2F;&#x2F;延迟400毫秒后自动加载</span><br><span class="line">        refreshLayout.finishRefresh();&#x2F;&#x2F;结束刷新</span><br><span class="line">        refreshLayout.finishLoadMore();&#x2F;&#x2F;结束加载</span><br><span class="line">        refreshLayout.finishRefresh(3000);&#x2F;&#x2F;延迟3000毫秒后结束刷新</span><br><span class="line">        refreshLayout.finishLoadMore(3000);&#x2F;&#x2F;延迟3000毫秒后结束加载</span><br><span class="line">        refreshLayout.finishRefresh(false);&#x2F;&#x2F;结束刷新（刷新失败）</span><br><span class="line">        refreshLayout.finishLoadMore(false);&#x2F;&#x2F;结束加载（加载失败）</span><br><span class="line">        refreshLayout.finishLoadMoreWithNoMoreData();&#x2F;&#x2F;完成加载并标记没有更多数据 1.0.4</span><br><span class="line">        refreshLayout.closeHeaderOrFooter();&#x2F;&#x2F;关闭正在打开状态的 Header 或者 Footer（1.1.0）</span><br><span class="line">        refreshLayout.resetNoMoreData();&#x2F;&#x2F;恢复没有更多数据的原始状态 1.0.4（1.1.0删除）</span><br><span class="line">        refreshLayout.setNoMoreData(false);&#x2F;&#x2F;恢复没有更多数据的原始状态 1.0.5</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖注入</title>
      <link href="2020/09/21/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>2020/09/21/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>依赖注入咯</p><a id="more"></a><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h6 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h6><p>依赖注入是实现程序解耦的一种方式。如果通过百度搜索可以找到如下答案：<br>控制反转（Inversion of Control，英文缩写为IoC）是一个重要的面向对象编程的法则来削减计算机程序的耦合问题.控制反转一般分为两种类型，依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）。依赖注入应用比较广泛。</p><h6 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a>个人理解：</h6><p>在程序中，一个对象中的方法需要依赖另一个对象，该对象中保存其所依赖对象的实例，生成依赖对象的方式不再该对象中通过new创建，而是调用者外部创建依赖对象，通过一定的方式进行传入。</p><h6 id="依赖注入的三种实现方式（原生方式）："><a href="#依赖注入的三种实现方式（原生方式）：" class="headerlink" title="依赖注入的三种实现方式（原生方式）："></a>依赖注入的三种实现方式（原生方式）：</h6><ol><li>构造方法注入 该方式是通过构造方法将其所依赖的外部类对象传入进来，是我认为的最简单的方式。其实现方式如下，我们修改之前的代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Classes &#123;</span><br><span class="line">&#x2F;&#x2F; 依赖类</span><br><span class="line">private Boy boy;</span><br><span class="line">&#x2F;**</span><br><span class="line">* 构造方法注入，通过构造方法传入该对象</span><br><span class="line">* @param boy</span><br><span class="line">*&#x2F;</span><br><span class="line">public Classes(Boy boy) &#123;</span><br><span class="line">this.boy &#x3D; boy;</span><br><span class="line">&#125;</span><br><span class="line">public void run() &#123;</span><br><span class="line">boy.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Setter 注入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> public class Classes &#123;</span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line">private Boy boy;</span><br><span class="line"></span><br><span class="line">public void setBoy(Boy boy)&#123;</span><br><span class="line">    this.boy &#x3D; boy;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口方式 接口方式是定义一个接口，该接口中声明一个注入的方法，而需要注入的类实现该接口，实现接口中定义的方法。定义接口，声明注入方法:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface BoyInjection &#123;</span><br><span class="line">void inject(Boy boy); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Classes implements BoyInjection &#123;</span><br><span class="line"> &#x2F;&#x2F;.... private Boy boy; </span><br><span class="line">@Override public void inject(Boy boy) &#123; </span><br><span class="line">&#x2F;&#x2F;实现接口中的方法 this.boy &#x3D; boy; </span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="Android-Dagger2依赖注入"><a href="#Android-Dagger2依赖注入" class="headerlink" title="Android Dagger2依赖注入:"></a>Android Dagger2依赖注入:</h6><ul><li>引入依赖库:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile &#39;com.google.dagger:dagger:2.11&#39;</span><br><span class="line"> annotationProcessor &#39;com.google.dagger:dagger-compiler:2.11&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>版本号以官网为准：<a href="https://github.com/google/dagger">https://github.com/google/dagger</a> </p><ul><li>创建一个对象:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.print(&quot;吃饭了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Moudule：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一步 添加@Module 注解</span><br><span class="line">@Module</span><br><span class="line">public class MainModule &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建具体的示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一步 添加@Module 注解</span><br><span class="line">@Module</span><br><span class="line">public class MainModule &#123;</span><br><span class="line">    &#x2F;&#x2F;第二步 使用Provider 注解 实例化对象</span><br><span class="line">    @Provides</span><br><span class="line">    A providerA() &#123;   &#x2F;&#x2F; providerA只是个名称</span><br><span class="line">        return new A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个Component:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一步 添加@Component</span><br><span class="line">&#x2F;&#x2F;第二步 添加module</span><br><span class="line">@Component(modules &#x3D; &#123;MainModule.class&#125;)  &#x2F;&#x2F;与刚刚创建的Moudule连接起来</span><br><span class="line">public interface MainComponent &#123;</span><br><span class="line">    &#x2F;&#x2F;第三步  写一个方法 绑定Activity &#x2F;Fragment</span><br><span class="line">    void inject(MainActivity activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>之后Rebuild Project一下，Make Project也行，之后系统会自动创建几个类，用来与activity连接。(这一步操作可能会要等待很长一段时间，10分钟左右)</p></blockquote><ul><li>将Component与Activity/Fragment绑定关系:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    &#x2F;***</span><br><span class="line">     * 第二步  使用Inject 注解，获取到A 对象的实例</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Inject  &#x2F;&#x2F;记得在需要的参数前加@Inject</span><br><span class="line">A a;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        &#x2F;***</span><br><span class="line">         * 第一步 添加依赖关系</span><br><span class="line">         *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;第一种方式与Activity&#x2F;Fragment进行绑定</span><br><span class="line">        DaggerMainConponent.create().inject(this);</span><br><span class="line">        &#x2F;&#x2F;第二种方式与Activity&#x2F;Fragment进行绑定</span><br><span class="line">        DaggerMainConponent.builder().build().inject(this);</span><br><span class="line">        &#x2F;***</span><br><span class="line">         * 第三步  调用A 对象的方法</span><br><span class="line">         *&#x2F;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以了，接下来介绍Dagger2的单例模式.</p><h6 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式:"></a>单例模式:</h6><p>@Singleton 这个注释可以使Dagger进入单例模式，要在Moudule和Component的上方添加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class ActivityModule &#123;</span><br><span class="line">    @Singleton</span><br><span class="line">    @Provides</span><br><span class="line">    Student privadeStu()&#123;</span><br><span class="line">        return new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Singleton</span><br><span class="line">@Component(modules &#x3D; &#123;ActivityModule.class&#125;)</span><br><span class="line">public interface ActivityComponent &#123;</span><br><span class="line">    void inject(MainActivity mainActivity);</span><br><span class="line">    void inject(UserActivity userActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加@Singleton就变成单例了，在MainActivity里 声明两个Student不同名字的对象分别打印他的地址，你会发现地址是一样的<br>但是你再新建立一个Activity 再次声明 Student stu ，注入对象，你会发现这时候 地址就不一样了。因为持有的对象是Activity。<br>到此已经能在一个Activity里，声明两个对象变量，用@Inject注入，得到的是 同一个对象</p><h6 id="Singleton的分析"><a href="#Singleton的分析" class="headerlink" title="@Singleton的分析:"></a>@Singleton的分析:</h6><p>接下来我要推翻刚才说的@Singleton，看到英文Singleton 是单例的意思，在Dagger2里他就是个命名的一个注解而已<br>他叫什么名字都行 @ABC、@ABB、@ABCC，都行。点开Singleton（ctrl+B）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scope   &#x2F;&#x2F;作用域的注释，代表着被包括的都是在一个作用域之中</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RUNTIME)</span><br><span class="line">public @interface Singleton &#123;&#125;</span><br></pre></td></tr></table></figure><p>Singleton 用了@Scope（作用域） 标记。 也就是说被 @Scope包裹的Component 都是在一个作用域里的， 作用域！不叫单例<br>好 那直接用Scope包裹Component。编译器提示 直接Remove了这个注解。因为他的目标是 @Target(ANNOTATION_TYPE) 这个表示这个Scope只用于注解，不能用在 类上面</p><h6 id="那我们声明一个注解："><a href="#那我们声明一个注解：" class="headerlink" title="那我们声明一个注解："></a>那我们声明一个注解：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scope</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface ActivityScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们把刚才加@Singleton的地方全换成@ActivityScope</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class ActivityModule &#123;</span><br><span class="line">    @ActivityScope</span><br><span class="line">    @Provides</span><br><span class="line">    Student privadeStu()&#123;</span><br><span class="line">        return new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ActivityScope</span><br><span class="line">@Component(modules &#x3D; &#123;ActivityModule.class&#125;)</span><br><span class="line">public interface ActivityComponent &#123;</span><br><span class="line">    void inject(MainActivity mainActivity);</span><br><span class="line">    void inject(UserActivity userActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印两个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag: com.mydagger.bean.Student@96575e0</span><br><span class="line">tag: com.mydagger.bean.Student@96575e0</span><br></pre></td></tr></table></figure><p>刚才说了持有对象的是Activity，那只能在一个Activity中实现单例，那要全局单例怎么做呢？<br>通常要全局使用的对象，要么写个static的类，要么Application。我们直接Application</p><ul><li><p>全局单例:</p><ol><li><p>先定义个全局的注解，刚讲了名字无所谓(这里要创建第二个的注解是因为，一个注解只能作用到一个作用域，简单来说就是不能与等下要创建的的另一个Component的注解相同)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> @Scope  &#x2F;&#x2F;作用域的意思</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface AppScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ActivityScope</span><br><span class="line">&#x2F;&#x2F;先绑定自身的Module，在绑定要依赖的Component</span><br><span class="line">@Component(modules &#x3D; &#123;ActivityModule.class&#125;,dependencies &#x3D; AppComponent.class)</span><br><span class="line">public interface ActivityComponent &#123;</span><br><span class="line">    &#x2F;&#x2F;第一个activity的绑定方法（XXXActivity就是填写你自己的activity的名字）</span><br><span class="line">void inject(XXXActivity testActivity);</span><br><span class="line">&#x2F;&#x2F;第二个activity的绑定方法</span><br><span class="line">    void inject(XXXActivity testActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加了一个 dependencies（依赖），当前是ActivityComponent 依赖 AppComponent<br>新建一个 AppComponent, 连接一个Module，提供一个方法 提供 给 MainActivity @Inject使用<br>还有就是dependencies只是依赖与另一个Component，每个Component都必须要有一个不同的Modules（Modules中的bean类不能重复）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注意这里的注解与上面注解不同（尽管效果是一样的，但也不能一样）</span><br><span class="line">@AppScope</span><br><span class="line">@Component(modules &#x3D; &#123;AppModule.class&#125;)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">&#x2F;&#x2F;这里要重新创建一个School类(这里写的方法要与Module中的类一致，否则就会报错)</span><br><span class="line">    School getSchool();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>新建 AppModule, 提供一个方法 用AppScope和Provides标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class AppModule &#123;</span><br><span class="line">&#x2F;&#x2F;这里的注解要与Component相同</span><br><span class="line">    @AppScope</span><br><span class="line">    @Provides</span><br><span class="line">    School provideSchool()&#123;   &#x2F;&#x2F;也是返回与上一个Module不一样的Bean类</span><br><span class="line">        return  new School();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续点绿锤子编译修改Application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个自身的单例类</span><br><span class="line">public static Application app;</span><br><span class="line">&#x2F;&#x2F;在创建一个Component类</span><br><span class="line">AppComponent applicationComponent;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">super.onCreate();</span><br><span class="line">&#x2F;&#x2F;获取自身的实例</span><br><span class="line">app &#x3D; this;</span><br><span class="line">&#x2F;&#x2F;在onCreate中进行获取Component</span><br><span class="line">    applicationComponent &#x3D; DaggerAppComponent</span><br><span class="line">            .builder()</span><br><span class="line">&#x2F;&#x2F;每次调用系统创建的Component类进行绑定的时候都要绑定属于自己的Module类</span><br><span class="line">            .appModule(new AppModule())</span><br><span class="line">            .build();</span><br><span class="line">&#x2F;&#x2F;因为这个Component是给上一个Component（MainComponent）进行依赖的，也就是扩展，所以没有写绑定的方法&#125;</span><br><span class="line"></span><br><span class="line">public static Application getInstance()&#123;</span><br><span class="line">&#x2F;&#x2F;返回自身的实列</span><br><span class="line">    return app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里返回一个Application的实例对象。定一个AppComponent（这个是准备给DaggerActivityComponent依赖的）也是Dagger生成的代码。链式编程进行build<br>增加一个School类 和Student类一样 用@Inject修饰构造函数。<br>修改MainActivity，增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Inject</span><br><span class="line">School school;</span><br></pre></td></tr></table></figure><p>然后在onCreate后面增加（与activity和Fragmemt进行绑定）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DaggerActivityComponent.builder()</span><br><span class="line">&#x2F;&#x2F;绑定依赖Component（通过Application获取早就创建好的Component）</span><br><span class="line">.appComponent(Application.getInstance().applicationComponent)</span><br><span class="line">&#x2F;&#x2F;绑定自身的Module</span><br><span class="line">    .activityModule(new ActivityModule())</span><br><span class="line">.build()</span><br><span class="line">&#x2F;&#x2F;绑定Activity</span><br><span class="line">    .inject(this);</span><br></pre></td></tr></table></figure><p>第二行DaggerActivityComponent 依赖于 Application的 AppComponent 这样就进行了关联<br>到此 全局单例 搞定，测试一下 写两个Activity 声明相同的对象就会发现 两个对象地址 一样的（创建的第二个activity/Fragment中也要进行Component绑定）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag: com.mydagger.bean.School@393c7e3</span><br><span class="line">tag: com.mydagger.bean.School@393c7e3</span><br></pre></td></tr></table></figure><ul><li>扩展:<br>通常会项目中使用MVP 增加网络配置等 需要全局单例的内容，可以继续建类（Module）进行扩展,得到单例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@AppScope</span><br><span class="line">@Component(modules &#x3D; &#123;AppModule.class,BModule.class....&#125;)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">    School getSchool();</span><br><span class="line">    &#x2F;&#x2F;这里需要继续提供方法，给Activity 进行对象的 @Inject    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applicationComponent &#x3D; DaggerAppComponent</span><br><span class="line">        .builder()</span><br><span class="line">        .appModule(new AppModule())......</span><br><span class="line">        .build();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoordinatorLayout的使用</title>
      <link href="2020/09/21/CoordinatorLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/09/21/CoordinatorLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>关于Android中的CoordinatorLayout的使用</p><a id="more"></a><h1 id="CoordinatorLayout的使用"><a href="#CoordinatorLayout的使用" class="headerlink" title="CoordinatorLayout的使用"></a>CoordinatorLayout的使用</h1><h4 id="本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果"><a href="#本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果" class="headerlink" title="本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果"></a>本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果</h4><h6 id="讲解为什么要使用CoordinatorLayout："><a href="#讲解为什么要使用CoordinatorLayout：" class="headerlink" title="讲解为什么要使用CoordinatorLayout："></a>讲解为什么要使用CoordinatorLayout：</h6><ul><li>NestedScrollView角度:<ol><li>首先一般想要嵌套滑动的地方都是嵌套RecyclerView来进行屏幕滑动，但是使用NestedScrollView嵌套RecyclerView会造成当进入页面的时候，RecyclerView会一次性全部展开。RecyclerView会失去复用性。在一些RecyclerView条目数量不多的时候，并不会造成多大的印象，但失去复用性会到时候RecyclerView滑出屏幕外无法被回收，数量一旦过多就会造成性能问题。</li></ol></li><li>CoordinatorLayout角度：<ol><li>使用CoordinatorLayout嵌套RecyclerView也可以达到跟随屏幕一起滑动的效果，并不会造成什么性能问题，并不会丢失特性。</li></ol></li></ul><h6 id="讲解如何使用CoordinatorLayout嵌套RecyclerView："><a href="#讲解如何使用CoordinatorLayout嵌套RecyclerView：" class="headerlink" title="讲解如何使用CoordinatorLayout嵌套RecyclerView："></a>讲解如何使用CoordinatorLayout嵌套RecyclerView：</h6><p>首先CoordinatorLayout是要与AppBarLayout一起使用才能做出许多效果。</p><ul><li><p>AppBarLayout：<br>  1.AppBarLayout用来规划需要要滑出屏幕的控件，被AppBarLayout包裹的控件需要添加（layout_scrollFlags=”scroll”）的属性</p><blockquote><p>layout_scrollFlags=”scroll”：当它滚动的时候，AppBarLayout会回调触发内部设置了layout_scrollFlags=””的控件的滚动行为。<br>scroll：跟随屏幕一起滑动<br>enterAlways：使用enterAlways，必须要带上scroll,否则没有效果，同样使用后面哪一个都要有scroll;使用要两个一块使用,enterAlways决定向下滚动时Scrolling View和Child View之间的滚动优先级问题。<br>enterAlwaysCollapsed：这里涉及到Child View的高度和最小高度，向下滚动时，<br>Child View先向下滚动最小高度值，然后Scrolling View开始滚动，到达边界时，Child View再向下滚动，直至显示完全。</p></blockquote></li><li><p>代码使用：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;appbar&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            app:elevation&#x3D;&quot;0dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.youth.banner.Banner</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Re_banner&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;200dp&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                app:banner_indicator_gravity&#x3D;&quot;right&quot;</span><br><span class="line">                app:banner_indicator_marginBottom&#x3D;&quot;@dimen&#x2F;dp_7&quot;</span><br><span class="line">                app:banner_indicator_marginRight&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                app:banner_indicator_normal_color&#x3D;&quot;@color&#x2F;White&quot;</span><br><span class="line">                app:banner_indicator_selected_color&#x3D;&quot;@color&#x2F;Pink&quot;</span><br><span class="line">                app:layout_scrollFlags&#x3D;&quot;scroll&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;Re_recy&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">            android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">            android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">            app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p> 这里就是是哟CoordinatorLayou嵌套RecyclerView，将头部的Banner设置layout_scrollFlags=”scroll”，它将会跟随屏幕一起滑动，滑出屏幕外，而RecyclerView设置的layout_behavior=”@string/appbar_scrolling_view_behavior”将会把View设置在AppBarLayout的下方，并且不会随着屏幕的滑动而滑出屏幕之外。</p></li></ul><h6 id="CoordinatorLayou吸附效果："><a href="#CoordinatorLayou吸附效果：" class="headerlink" title="CoordinatorLayou吸附效果："></a>CoordinatorLayou吸附效果：</h6><ul><li><p>CollapsingToolbarLayout</p><ol><li><p>吸附效果是需要CoordinatorLayout与CollapsingToolbarLayout一同使用，并且CollapsingToolbarLayout设置layout_scrollFlags=”scroll|snap”，代表被CollapsingToolbarLayout包裹的内容是需要吸附到屏幕顶部的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;TV_nestSc&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;#FFFFFF&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;appbar&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            app:elevation&#x3D;&quot;0dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;coll_layout&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:fitsSystemWindows&#x3D;&quot;true&quot;</span><br><span class="line">                app:layout_scrollFlags&#x3D;&quot;scroll|snap&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;RelativeLayout</span><br><span class="line">                    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;LinearLayout</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Sy_text&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_35&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                        android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">                        android:background&#x3D;&quot;@drawable&#x2F;file_background_radius_30_while_gray&quot;</span><br><span class="line">                        android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">                        android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;ImageView</span><br><span class="line">                            android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                            android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                            android:src&#x3D;&quot;@drawable&#x2F;search_24_while&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;TextView</span><br><span class="line">                            android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">                            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                            android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">                            android:text&#x3D;&quot;查找精彩动态内容&quot;</span><br><span class="line">                            android:textColor&#x3D;&quot;#c1bfc0&quot;</span><br><span class="line">                            android:textSize&#x3D;&quot;16sp&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;TextView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;xian_2&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_1&quot;</span><br><span class="line">                        android:layout_below&#x3D;&quot;@+id&#x2F;Sy_text&quot;</span><br><span class="line">                        android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                        android:background&#x3D;&quot;#e7e7e7&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;com.google.android.material.appbar.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:animateLayoutChanges&#x3D;&quot;true&quot;</span><br><span class="line">            android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">            app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Recy_dynamic&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:background&#x3D;&quot;#f4f4f4&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>吸附效果就是在滑动屏幕的时候，被CollapsingToolbarLayout包裹的内容在接近屏幕顶端的时候会有个吸附效果，之后就会一直吸在屏幕顶端，除非下滑脱离。</p></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVP 设计模式</title>
      <link href="2020/09/18/MVP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/09/18/MVP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>讲解设计模式</p><a id="more"></a><h3 id="MVP-设计模式"><a href="#MVP-设计模式" class="headerlink" title="MVP 设计模式"></a>MVP 设计模式</h3><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>MVP是有MVC演变而来的，因为在Android中用MVC来写的时候，Activity到底是View层还是Controller层真的是傻傻分不去清楚，所以基本它就把这两层的活都自己一个人干了，这样一来Activity上的代码量会非常大，Controller层和View层没有实现解耦分离开来，如果后面这两层代码其中一层出了问题你就可能两层都的修改，代码是没什么重用性可言的。而MVP的出现就是为了解决这些问题的，MVP模式将Controller的工作抽取出来交给Presenter层，Presenter层负责控制处理业务逻辑，作为中间层建立起Model层和View层的联系，从而实现三层交互。这么说确实挺难让人理解的，下面就通过一个例子，在例子中夹杂着解释让我们掌握MVP的用法吧。</p><h5 id="属性：（我就拿登录来当作例子）"><a href="#属性：（我就拿登录来当作例子）" class="headerlink" title="属性：（我就拿登录来当作例子）"></a>属性：（我就拿登录来当作例子）</h5><ul><li>Model层：创建用于保存用户信息的实体类User（就是userbean）登录的时候用来保存用户信息，建议也保存到本地一份</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String username;  &#x2F;&#x2F;用户的账号</span><br><span class="line">    private String password;  &#x2F;&#x2F;用户的密码</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>结果回调接口：</p><ol><li>创建一个接口，用来通知登录是否成功（成功的话，就可以把获取到的userbean传递下去）或者 失败</li><li>代码展示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    public interface OnLoginListener &#123;</span><br><span class="line">    &#x2F;&#x2F;登录成功的回调</span><br><span class="line">    void loginSuccess(User user);  &#x2F;&#x2F;登录成功后，将用户信息传递进去</span><br><span class="line">    &#x2F;&#x2F;登录失败的回调</span><br><span class="line">    void loginFailed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>定义业务接口:</p><ol><li>这里抽出一个接口的目的是为了降低一层耦合和便于复用。比如同一个网络请求业务你可以有OkHttp的实现，同时也可以有Retrofit的实现，这样一来就可以方便的做到网络框架的替换，当然你还可以有不同内容的实现。简单来说，就是将登录的这个功能抽取出来，成为一个接口，方便复用。</li><li>代码展示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    public interface UserLogin&#123;</span><br><span class="line">    &#x2F;&#x2F;登录方法</span><br><span class="line">public void login(String username, String password, OnLoginListener loginListener);</span><br><span class="line">&#x2F;&#x2F;这里就传入用户输入的账号，密码，在传入一个登录状况判断的接口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>具体Model的实现类:<br><br>创建一个具体的类，来实现UserLogin的接口，来实现里面的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class UserGo implements UserLogin &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void login(final String username, final String password, final OnLoginListener loginListener) &#123;</span><br><span class="line">        &#x2F;&#x2F;模拟网络请求耗时操作</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                &#x2F;&#x2F;模拟了耗时                </span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;模拟登录成功</span><br><span class="line">                if (&quot;luoqiang&quot;.equals(username) &amp;&amp; &quot;108&quot;.equals(password)) &#123;</span><br><span class="line">                    User user &#x3D; new User();</span><br><span class="line">                    user.setUsername(username);</span><br><span class="line">                    user.setPassword(password);</span><br><span class="line">                    loginListener.loginSuccess(user);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    loginListener.loginFailed();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>View层:</p><ol><li><p>View层不关心数据，不关心逻辑处理！只关心和用户的交互，那么这个登录界面应该有的操作就是：从输入框获取用户名，获取密码，清除用户名，清除密码，登录网络请求时显示进度条，隐藏进度条，登录成功跳转到对应界面，登录失败提示。接下来定义接口如下：</p><blockquote><p>这里并没有将activity来直接当作View层，原因也是为了方便复用，那个Fragment/Activity需要用到登录，就实现这个接口就行了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    public interface UserLoginView &#123;</span><br><span class="line">        String getUserName();</span><br><span class="line">        &#x2F;&#x2F;获取用户输入的账号</span><br><span class="line">        String getPassword();</span><br><span class="line">        &#x2F;&#x2F;获取用户输入的密码</span><br><span class="line">        void clearUserName();</span><br><span class="line">        &#x2F;&#x2F;清除用户输入的账号</span><br><span class="line">        void clearPassword();</span><br><span class="line">        &#x2F;&#x2F;清除用户输入的密码</span><br><span class="line">        void showLoading();</span><br><span class="line">        &#x2F;&#x2F;显示加载（一般来说，我都会在BaseActivity&#x2F;BaseFragment中实现Loading的显示和隐藏，这里就没必要在写）</span><br><span class="line">        void hideLoading();</span><br><span class="line">        &#x2F;&#x2F;隐藏加载</span><br><span class="line">        void toMainActivity(User user);</span><br><span class="line">        &#x2F;&#x2F;跳转到主页，顺便传递用户信息</span><br><span class="line">        void showFaileTips();</span><br><span class="line">        &#x2F;&#x2F;登录失败的提示</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>具体的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">    public class UserLoginActivity extends AppCompatActivity implements UserLoginView &#123;</span><br><span class="line">    private EditText mEtUsername, mEtPassword;</span><br><span class="line">    private Button mBtnLogin, mBtnClear;</span><br><span class="line">    private ProgressBar mPbLoading;</span><br><span class="line">    private UserLoginPresenter mUserLoginPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">&#x2F;&#x2F;关于Presenter层，都可以写在BaseActivtiy&#x2F;BaseFragment中，没必要写在Activity中</span><br><span class="line">        mUserLoginPresenter &#x3D; new UserLoginPresenter(this);</span><br><span class="line">        &#x2F;&#x2F;获取Presenter层</span><br><span class="line">        initViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initViews() &#123;</span><br><span class="line">        mEtUsername &#x3D; findViewById(R.id.et_username);</span><br><span class="line">        mEtPassword &#x3D; findViewById(R.id.et_password);</span><br><span class="line">        mBtnClear &#x3D; findViewById(R.id.btn_clear);</span><br><span class="line">        mBtnLogin &#x3D; findViewById(R.id.btn_login);</span><br><span class="line">        mPbLoading &#x3D; findViewById(R.id.pb_loading);</span><br><span class="line">        mBtnLogin.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                mUserLoginPresenter.login();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mBtnClear.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                mUserLoginPresenter.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return mEtUsername.getText().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return mEtPassword.getText().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clearUserName() &#123;</span><br><span class="line">        mEtUsername.setText(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clearPassword() &#123;</span><br><span class="line">        mEtPassword.setText(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showLoading() &#123;</span><br><span class="line">        mPbLoading.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void hideLoading() &#123;</span><br><span class="line">        mPbLoading.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toMainActivity(User user) &#123;</span><br><span class="line">        Toast.makeText(this, &quot;跳转到登录成功页面&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showFaileTips() &#123;</span><br><span class="line">        Toast.makeText(this, &quot;登录失败&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        &#x2F;&#x2F;为了防止内存泄漏，解绑Presenter层对View层的引用，这里的将Presenter层置为空可以在BaseActivity&#x2F;BaseFragment中进行操作</span><br><span class="line">        mUserLoginPresenter.detachView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Presenter层:</p><ol><li>Presenter的作用就是从View层获取用户的输入，传递到Model层进行处理，然后回调给View层，输出给用户！</li><li>Presenter一般来说，就是将View和Mode集合在一起，进行操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">    public class UserLoginPresenter &#123;</span><br><span class="line">    private UserGo userGo;</span><br><span class="line">    private UserLoginView userLoginView;</span><br><span class="line">    private Handler mHandler &#x3D; new Handler();</span><br><span class="line">    &#x2F;&#x2F;对应视图页面销毁的标志位,当视图销毁后回调就不需要处理了</span><br><span class="line">    private boolean destroyFlag;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Presenter必须要能拿到View和Model的实现类</span><br><span class="line">    public UserLoginPresenter(IUserLoginView userLoginView) &#123;</span><br><span class="line">        this.userLoginView &#x3D; userLoginView;</span><br><span class="line">        this. userGo &#x3D; new UserGo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login() &#123;</span><br><span class="line">        userLoginView.showLoading();</span><br><span class="line">        userGo.login(userLoginView.getUserName(), userLoginView.getPassword(), new OnLoginListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void loginSuccess(final User user) &#123;</span><br><span class="line">                if (!destroyFlag) &#123; &#x2F;&#x2F;View层销毁后不需要处理的判断</span><br><span class="line">                    &#x2F;&#x2F;需要在UI线程执行</span><br><span class="line">                    mHandler.post(new Runnable() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                            userLoginView.toMainActivity(user);</span><br><span class="line">                            userLoginView.hideLoading();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void loginFailed() &#123;</span><br><span class="line">                if (!destroyFlag) &#123; &#x2F;&#x2F;View层销毁后不需要处理的判断</span><br><span class="line">                    &#x2F;&#x2F;需要在UI线程执行</span><br><span class="line">                    mHandler.post(new Runnable() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                            userLoginView.showFaileTips();</span><br><span class="line">                            userLoginView.hideLoading();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        userLoginView.clearUserName();</span><br><span class="line">        userLoginView.clearPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;解绑视图</span><br><span class="line">    public void detachView() &#123;</span><br><span class="line">        destroyFlag &#x3D; true;</span><br><span class="line">        this.userLoginView &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
