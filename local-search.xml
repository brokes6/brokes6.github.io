<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kotlin中使用ViewModel的数据共享</title>
    <link href="/2021/04/15/Kotlin%E4%B8%AD%E4%BD%BF%E7%94%A8ViewModel%E7%9A%84%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
    <url>/2021/04/15/Kotlin%E4%B8%AD%E4%BD%BF%E7%94%A8ViewModel%E7%9A%84%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="Kotlin中使用ViewModel的数据共享"><a href="#Kotlin中使用ViewModel的数据共享" class="headerlink" title="Kotlin中使用ViewModel的数据共享"></a>Kotlin中使用ViewModel的数据共享</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p>本篇将讲述对于使用ViewModel来进行Fragment之间的数据共享，使用的技术为ViewModel，dataBinding</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>对于ViewModel是属于Androidx包下的JetPack组件，所以只需要项目使用了Androidx，就可直接使用，无需引入额外依赖包</p><h3 id="代码教程"><a href="#代码教程" class="headerlink" title="代码教程"></a>代码教程</h3><p>在进行编码之前想要做一些准备工作，给项目开启dataBinding，在项目级的build.gradle中，defaultConfig闭包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig&#123;</span><br><span class="line">    ...</span><br><span class="line">    dataBinding.enabled = <span class="keyword">true</span> </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就开启了dataBinding了</p><ol><li><p>创建ViewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> number: MutableLiveData&lt;<span class="built_in">Int</span>&gt; = MutableLiveData(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">()</span></span>: MutableLiveData&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        number.value = number.value?.plus(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">set</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        number.value = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个继承ViewModel的类，在这个类中创建一个MutableLiveData的变量，并给他设置获取和设置值的方法</p></li><li><p>在Activity中获取ViewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel: MyViewModel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        viewModel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(MyViewModel::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取ViewModel是通过<strong>ViewModelProvider</strong>(this).get(刚刚创建的ViewModel::class.java)</p><blockquote><p>这里原本可以使用<strong>ViewModelProviders</strong>.of(Activity).get(刚刚创建的ViewModel::class.java)，但是ViewModelProviders已经被淘汰了</p></blockquote></li><li><p>接下来就是创建2个Fragment，并在Fragment中获取Activity的ViewModel</p><ol><li><p>BlankFragment</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210104194138.png" alt="image-20210104194137046"></p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlankFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="comment">//这里创建了一个变量，将它的值设置为ActivityViewModel，括号里面只需要输入ViewModel类型即可</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel <span class="keyword">by</span> activityViewModels&lt;MyViewModel&gt;()</span><br><span class="line">    <span class="comment">//这个技就是当前项目的dataBinding（lateinit 代表等下进行初始化）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: FragmentBlankBinding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View &#123;</span><br><span class="line">        <span class="comment">//在这里进行dataBinding的初始化</span></span><br><span class="line">        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_blank, container, <span class="literal">false</span>)</span><br><span class="line">        initView()</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//将获取完的ViewModel传给dataBinding（是因为xml文件设置了属性）</span></span><br><span class="line">        binding.<span class="keyword">data</span> = viewModel</span><br><span class="line">        <span class="comment">//设置统一的生命周期管理为父类Activity</span></span><br><span class="line">        binding.lifecycleOwner = activity</span><br><span class="line">        <span class="comment">//点击按钮进行切换Fragment，是通过Navigation进行切换</span></span><br><span class="line">        binding.button.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> controller: NavController = Navigation.findNavController(it)</span><br><span class="line">            controller.navigate(R.id.action_blankFragment_to_detailFragment)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下面的？.let&#123;&#125;代表当前对象不为空的时候才会执行&#123;&#125;内的内容</span></span><br><span class="line">        viewModel.number.value?.let &#123; binding.seekBar.progress = it &#125;</span><br><span class="line">        binding.seekBar.setOnSeekBarChangeListener(<span class="keyword">object</span> : SeekBar.OnSeekBarChangeListener &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onProgressChanged</span><span class="params">(p0: <span class="type">SeekBar</span>?, p1: <span class="type">Int</span>, p2: <span class="type">Boolean</span>)</span></span> &#123;<span class="comment">//如果插件的值变了</span></span><br><span class="line">                viewModel.number.value = p1</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartTrackingTouch</span><span class="params">(p0: <span class="type">SeekBar</span>?)</span></span> &#123;<span class="comment">//刚开始触摸的时候</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStopTrackingTouch</span><span class="params">(p0: <span class="type">SeekBar</span>?)</span></span> &#123;<span class="comment">//结束触摸</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;data&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.laboratory.navviewmodel.MyViewModel&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/frameLayout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/Title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;String.valueOf(data.get())&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.222&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/seekBar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.347&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#858A8A&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;进入&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用ConstraintLayout是为了方便进行在Design模式下进行摆放控件，上面说的所需的内容是variable中定义的，控件中就可以使用**@{定义的名称.调用方法}**</p><ol start="2"><li><p>DetailFragment</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210104194213.png" alt="image-20210104194213106"></p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding : FragmentDetailBinding</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel <span class="keyword">by</span> activityViewModels&lt;MyViewModel&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View &#123;</span><br><span class="line">        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_detail,container,<span class="literal">false</span>)</span><br><span class="line">        initView()</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        binding.<span class="keyword">data</span> = viewModel</span><br><span class="line">        binding.lifecycleOwner = activity</span><br><span class="line">        binding.button.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> controller : NavController = Navigation.findNavController(it)</span><br><span class="line">            controller.navigate(R.id.action_detailFragment_to_blankFragment)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面的Fragment功能差不多，多了两个按钮，进行<strong>增加</strong>和<strong>删除</strong></p><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;data&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.laboratory.navviewmodel.MyViewModel&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">&quot;.DetailFragment&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;String.valueOf(data.number)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.192&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/add&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;+&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;()-&gt;data.add(1)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/reduce&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;()-&gt;data.add(-1)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;30sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@+id/add&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.391&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;返回&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.535&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用了dataBinding中，连点击事件都可以在xml中设置,只需要想 <strong>onClick=”@{()-&gt;对象.方法}”</strong> 这样去使用</p></li></ol><p>这样全局都是使用统一的ViewModel来获取数据，也就可以进行数据共享</p>]]></content>
    
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
      <tag>Android</tag>
      
      <tag>ViewModel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fragment懒加载</title>
    <link href="/2021/04/15/Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/2021/04/15/Fragment%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Fragment懒加载"><a href="#Fragment懒加载" class="headerlink" title="Fragment懒加载"></a>Fragment懒加载</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p><strong>介绍</strong>：懒加载就顾名思义，也就是当前Fragment处于可见的状态时，才会去进行加载，这种情况很适合Fragment嵌套Fragment，下面介绍原因</p><ul><li>Activity嵌套Fragment：</li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201228152428.png" alt="image-20201228152427313"></p><blockquote><p>这样当Activity进行创建完Fragment时，这3个Fragment都会运行，执行他们的生命周期。</p></blockquote><ul><li>Activity嵌套Fragment嵌套Fragment：</li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201228152444.png" alt="image-20201228152443555"></p><blockquote><p>这种情况下，但Fragment_1进行添加并创建Fragment_a,Fragment_b,Fragment_c时，Fragment_b中又会继续创建Fragment_d，Fragment_e，Fragment_f，所以这样会在很多不可见的Fragment中浪费内存和网络。</p></blockquote><blockquote><p>因此我们想要进行Fragment懒加载，只让处于显示状态的Fragment进行加载。</p></blockquote><ul><li>Activity嵌套ViewPager嵌套Fragment</li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201228153210.png" alt="image-20201228153209898"></p><blockquote><p>观察上图，我们能发现 ViePager 初始化时，默认会调用其内部 Fragment 的 setUserVisibleHint 方法，因为其预缓存 Fragment 个数为 <code>1</code> 的原因，所以只有 Fragment_1 与 Fragment_2 的生命周期函数被调用。</p></blockquote><h3 id="ViewPager-Fragment模式下的懒加载"><a href="#ViewPager-Fragment模式下的懒加载" class="headerlink" title="ViewPager+Fragment模式下的懒加载"></a>ViewPager+Fragment模式下的懒加载</h3><blockquote><p>在Andoirdx中，之前的setUserVisibleHint 已经无法使用，现在只需要给适配器传递BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT即可，这样，Fragment在重复创建时，则会调用onResume方法</p></blockquote><ol><li><p>创建ViewPager的适配器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewPagerAdapter</span></span>(</span><br><span class="line">    fm: FragmentManager,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> titles: MutableList&lt;String&gt;,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fragments: MutableList&lt;Fragment&gt;</span><br><span class="line">) : FragmentPagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        fragments.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Fragment &#123;</span><br><span class="line">        <span class="keyword">return</span> fragments[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPageTitle</span><span class="params">(position: <span class="type">Int</span>)</span></span>: CharSequence? &#123;</span><br><span class="line">        <span class="keyword">return</span> titles[position]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入3个参数，一个是Fragment管理器，Fragment集合，Fragment标题，然后将behavior值设置为”BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT”</p><blockquote><p>使用了 <code>BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT</code> 后，只有当前可见的 Fragment 才能调用 onResume 方法。</p></blockquote></li><li><p>之后还需要创建一个继承Fragment的类来进行懒加载</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行懒加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isLoaded = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mView: View? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="literal">null</span>) &#123;</span><br><span class="line">            mView = initView(inflater, container, savedInstanceState)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setUserVisibleHint</span><span class="params">(isVisibleToUser: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser)</span><br><span class="line">        <span class="keyword">this</span>.isVisibleUser = isVisibleToUser</span><br><span class="line">        lazyLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        <span class="comment">//增加了Fragment是否可见的判断</span></span><br><span class="line">        <span class="keyword">if</span> (!isLoaded &amp;&amp; !isHidden) &#123;</span><br><span class="line">            initData()</span><br><span class="line">            isLoaded = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在Fragment销毁View的时候，重置状态</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        isLoaded = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只有处于可见状态下的Fragment才能触发onResume方法，才可以进行加载数据</p></li></ol><h3 id="ViewPager2-Fragment模式下的懒加载"><a href="#ViewPager2-Fragment模式下的懒加载" class="headerlink" title="ViewPager2+Fragment模式下的懒加载"></a>ViewPager2+Fragment模式下的懒加载</h3>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Android</tag>
      
      <tag>Fragment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Glide各种问题的解决方案集合（不断更新）</title>
    <link href="/2021/04/15/%E5%85%B3%E4%BA%8EGlide%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E9%9B%86%E5%90%88%EF%BC%88%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <url>/2021/04/15/%E5%85%B3%E4%BA%8EGlide%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E9%9B%86%E5%90%88%EF%BC%88%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Glide各种问题的解决方案集合（不断更新）"><a href="#关于Glide各种问题的解决方案集合（不断更新）" class="headerlink" title="关于Glide各种问题的解决方案集合（不断更新）"></a>关于Glide各种问题的解决方案集合（不断更新）</h1><blockquote><p>本篇已Java为主要语言</p></blockquote><h3 id="Glide使用"><a href="#Glide使用" class="headerlink" title="Glide使用"></a>Glide使用</h3><ol><li><p><a href="https://github.com/bumptech/glide">添加依赖</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.github.bumptech.glide:glide:4.11.0&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.github.bumptech.glide:compiler:4.11.0&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="关于GlideModule的问题"><a href="#关于GlideModule的问题" class="headerlink" title="关于GlideModule的问题"></a>关于GlideModule的问题</h3><ol><li><p>在项目中创建一个<strong>class</strong>文件</p></li><li><p>继承AppGlideModule</p></li><li><p>添加注解@GlideModule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>里面并不需要填写内容</p></li></ol><h3 id="替换Glide的请求方式"><a href="#替换Glide的请求方式" class="headerlink" title="替换Glide的请求方式"></a>替换Glide的请求方式</h3><ol><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&quot;com.github.bumptech.glide:okhttp3-integration:4.11.0&quot;</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:okhttp:4.7.2&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在项目中创建一个<strong>class</strong>文件</p></li><li><p>继承AppGlideModule</p></li><li><p>添加注解@GlideModule</p></li><li><p>重写*<strong>registerComponents**<em>和</em></strong>isManifestParsingEnabled***方法</p></li><li><p>在**<em>registerComponents**</em>方法中替换为OkHttp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, <span class="meta">@NotNull</span> Glide glide, Registry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Glide 底层默认使用 HttpConnection 进行网络请求,这里替换为 Okhttp</span></span><br><span class="line">        registry.replace(GlideUrl.class, InputStream.class, <span class="keyword">new</span> OkHttpUrlLoader.Factory(ProgressManager.getInstance().with(<span class="keyword">new</span> OkHttpClient.Builder()).build()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isManifestParsingEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Error</tag>
      
      <tag>Android</tag>
      
      <tag>Glide</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio错误统计</title>
    <link href="/2021/04/15/AndroidStudio%E9%94%99%E8%AF%AF%E7%BB%9F%E8%AE%A1/"/>
    <url>/2021/04/15/AndroidStudio%E9%94%99%E8%AF%AF%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="AndroidStudio错误统计"><a href="#AndroidStudio错误统计" class="headerlink" title="AndroidStudio错误统计"></a>AndroidStudio错误统计</h1><h3 id="AndroidStudio-Canary"><a href="#AndroidStudio-Canary" class="headerlink" title="AndroidStudio Canary"></a>AndroidStudio Canary</h3><ol><li><p>在项目级中的build.gradle中添加项目依赖库，会报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://maven.google.com&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://jitpack.io&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>大概是因为在项目级的gradle中添加的gradle版本过高，取消了allprojects{}引用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = <span class="string">&quot;1.4.31&quot;</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">//这里的gradle版本过高</span></span><br><span class="line">        classpath <span class="string">&quot;com.android.tools.build:gradle:7.0.0&quot;</span></span><br><span class="line">        classpath <span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:<span class="variable">$kotlin_version</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无法使用</span></span><br><span class="line"><span class="comment">//allprojects &#123;</span></span><br><span class="line"><span class="comment">//    repositories &#123;</span></span><br><span class="line"><span class="comment">//        google()</span></span><br><span class="line"><span class="comment">//        jcenter()</span></span><br><span class="line"><span class="comment">//        maven &#123; url &quot;https://jitpack.io&quot; &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>AndroidStudio Canary 可与 AndroidStuid共存</p><ul><li>最好两个都下载，稳定版用来正常开发项目，测试版用来体验新功能</li></ul></li><li><p>ViewPager子页面中开启一个新的Activity，在返回会导致Fragment页面空白</p><blockquote><p>应该是因为View初始化不在onCreateView中，会导致重复初始化View，导致出错</p></blockquote><ul><li><p>把Fragment开启懒加载，把View初始化放在onCreateView中，数据加载放在懒加载中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFirstLoad = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mView: View? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">createView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="literal">null</span>) &#123;</span><br><span class="line">            mView = createView(inflater, container, savedInstanceState)</span><br><span class="line">            initView()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        <span class="keyword">if</span> (isFirstLoad) &#123;</span><br><span class="line">            initData()</span><br><span class="line">            isFirstLoad = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        isFirstLoad = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>采用RecyclerView+GSYVideoPlayer来实现抖音效果时，无法控制和销毁视频</p><ul><li></li></ul></li><li><p>在kolitn中使用Room。在创建数据库实体类(appDataBase)的时候，导入相应的实体类时，应使用**::class**</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = [xxx::class], version = 1)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>多个Fragment使用Fragment中ViewModel(相同的ViewModel)快捷创建的ViewModel并不是同一个</p><p>这样创建的viewModel是重新创建了一个，并不是使用之前创建的viewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> viewModel <span class="keyword">by</span> viewModels&lt;PhotoDetailViewModel&gt;()</span><br></pre></td></tr></table></figure><p>必须要这样创建才可以获取相同的viewModel</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModel : PhotoDetailViewModel</span><br><span class="line"> viewModel = ViewModelProvider(activity <span class="keyword">as</span> PhotoDetailActivity).<span class="keyword">get</span>(PhotoDetailViewModel::<span class="keyword">class</span>.java)</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Error</tag>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Android的各个View的介绍</title>
    <link href="/2021/04/15/%E5%85%B3%E4%BA%8EAndroid%E7%9A%84%E5%90%84%E4%B8%AAView%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/04/15/%E5%85%B3%E4%BA%8EAndroid%E7%9A%84%E5%90%84%E4%B8%AAView%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Android的各个View的介绍"><a href="#关于Android的各个View的介绍" class="headerlink" title="关于Android的各个View的介绍"></a>关于Android的各个View的介绍</h1><blockquote><p>本篇已Kotlin为主要语言</p><p>介绍的功能皆为最新功能</p></blockquote><ol><li><p><strong><em>Toolbar</em></strong></p><ul><li><p>设置标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:title&#x3D;&quot;这里是标题&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置标题前的图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:navigationIcon&#x3D;&quot;@drawable&#x2F;ic_baseline_arrow_back&quot;</span><br></pre></td></tr></table></figure><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210407182013.png"></p></li><li><p>是否选择在当前的布局当时是否以“视差”的方式来跟随滚动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_collapseMode&#x3D;&quot;pin&quot;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是让这个View的滚动的速度比其他正常滚动的View速度稍微慢一点</p></blockquote><h5 id="关于CollapsingToolbarLayout与Toolbar联动使用"><a href="#关于CollapsingToolbarLayout与Toolbar联动使用" class="headerlink" title="关于CollapsingToolbarLayout与Toolbar联动使用"></a>关于CollapsingToolbarLayout与Toolbar联动使用</h5><ul><li><p>设置上滑到Toolbar高度时，Toolbar的背景以及过度颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:contentScrim&#x3D;”?attr&#x2F;colorPrimary”</span><br></pre></td></tr></table></figure><blockquote><p>当上滑到toolbar 高度期间直到达到toolbar高度时，给toolbar设置的背景色，以及过渡颜色。<em>当然，这里不仅仅可以设置颜色，也可以设置图片。</em> 如果不设置该属性，标题栏会过渡为以之前的图片为背景</p></blockquote></li><li><p>设置Toolbar Title位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:expandedTitleGravity&#x3D;”center_horizontal”</span><br></pre></td></tr></table></figure></li><li><p>设置Toolbar Title距离开始位置的边距</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:expandedTitleMarginStart&#x3D;”50dp”</span><br></pre></td></tr></table></figure></li><li></li></ul></li><li><p>设置Toolbar文字颜色 </p></li></ul></li><li><p><strong>Activity跳转动画</strong></p><ul><li><p>overridePendingTransition()</p><blockquote><p>这个方法用来覆盖即将到来的跳转动画，也就是说使用这个方法可以替换原本的跳转动画</p></blockquote></li><li><p>overridePendingTransition()的调用时机 </p><p>这个方法需要在startActivity()或者finish()之后立即调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(activity, MainActivity::<span class="keyword">class</span>.java)</span><br><span class="line">        activity.startActivity(intent)</span><br><span class="line">        activity.overridePendingTransition(</span><br><span class="line">            R.anim.anim_slide_enter_bottom,</span><br><span class="line">            R.anim.anim_no_anim</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><blockquote><p>overridePendingTransition()需要传入两个参数，第一个为进入动画，第二个为退出动画</p><p>这些资源都需要在anim文件夹中创建</p></blockquote></li></ul></li><li><p><strong>ObjectAnimator</strong></p><ul><li><p>ObjectAnimator派生自ValueAnimator,所以ValueAnimator能用的方法，ObjectAnimator都能用, ObjectAnimator 是ValueAnimator的子类。</p></li><li><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> objectAnimator: ObjectAnimator <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        ObjectAnimator.ofFloat(binding.ivCover, ANIMATION_PROPERTY_NAME, <span class="number">0f</span>, <span class="number">360f</span>).apply &#123;</span><br><span class="line">            interpolator = LinearInterpolator()</span><br><span class="line">            duration = DURATION_CD<span class="comment">//设置动画时间</span></span><br><span class="line">            repeatCount = ANIMATION_REPEAT_COUNTS</span><br><span class="line">            start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ObjectAnimator.ofFloat</strong>接收4个参数</p><p>第一个：进行动画的View</p><p>第二个：需要进行动画的属性</p><p>第三个：起始值</p><p>第四个：结束值</p></blockquote></li><li><p><em>ObjectAnimator的函数</em></p><ol><li>改变旋转度数 rotation、rotationX、rotationY<ul><li>rotation:表示围绕 Z 旋转,rotation 表示旋转度数</li><li>rotationX:表示围绕X旋转,rotationX表示旋转度数</li><li>rotationY:表示微软Y旋转,rotationY表示旋转度数</li></ul></li><li>移动 translationX、translationY<ul><li>float translationX:表示在X轴上移动的距离，以当前控件为原点，向右为正方向，参数 translationX 表示移动的距离</li><li>float translationY:表示在Y轴上移动的距离，以当前控件为原点，向下位正方向，参数 translationY 表示移动的距离</li></ul></li><li>缩放 scaleX、scaleY<ul><li>float scaleX:在X轴上缩放，scaleX表示缩放倍数</li><li>float scaleY:在Y轴上缩放，scaleY表示缩放倍数</li></ul></li><li>改变透明度 alpha<ul><li>float alpha:控制View的透明度</li></ul></li></ol></li><li><p><em>自定义ObjectAnimator的属性</em></p><ul><li><p>只需要确保View需要改变属性有公开的 <strong>set’()</strong> / <strong>get()</strong> 方法即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>(  <span class="comment">//圆的半径</span></span><br><span class="line">    <span class="keyword">var</span> radius: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>接下来只需要给它创建一个set/get方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPointView</span></span>(context: Context?, attrs: AttributeSet?) : View(context, attrs) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mCircle: Circle? = Circle(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCircle != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> paint = Paint()</span><br><span class="line">            paint.setAntiAlias(<span class="literal">true</span>)</span><br><span class="line">            paint.setColor(Color.RED)</span><br><span class="line">            paint.setStyle(Paint.Style.FILL)</span><br><span class="line">            canvas.drawCircle(<span class="number">400</span>, <span class="number">500</span>, mCircle.getRadius(), paint)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set函数</span></span><br><span class="line">    <span class="comment">//get函数</span></span><br><span class="line">    <span class="keyword">var</span> circleRadius: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="number">800</span></span><br><span class="line">        <span class="keyword">set</span>(radius) &#123;</span><br><span class="line">            mCircle.setRadius(radius)</span><br><span class="line">            invalidate()<span class="comment">//invalidate()请求重绘View树，也就是刷新View</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在Activity中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> animator = ObjectAnimator.ofInt(view, <span class="string">&quot;circleRadius&quot;</span>, <span class="number">40</span>, <span class="number">400</span>)</span><br><span class="line">        animator.interpolator = BounceInterpolator()</span><br><span class="line">        animator.duration = <span class="number">2000</span></span><br><span class="line">        animator.start()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>DataBingding与ViewBinding</strong></p><ul><li><p>dataBinding</p><ol><li><p>在Model的build.gradle中开启dataBinding</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    buildFeatures&#123;</span><br><span class="line">        dataBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Android Stuio 4.0以上时，只能使用<strong>buildFeatures</strong>来进行管理</p></blockquote></li><li><p>在Xml中开启</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20210414100322.png"></p><blockquote><p>将光标移到第一行第一位，按下键盘”ALT+ENTER”选择第一个创建binding layout即可</p></blockquote></li><li><p>在Activity中引入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="comment">//先申明为延迟初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">//使用DataBindingUtil来进行载入布局</span></span><br><span class="line">    binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binding.randomText.text = <span class="string">&quot;当前随机参数为:<span class="subst">$&#123;it?.get(<span class="number">0</span>)?.randomName&#125;</span>&quot;</span></span><br><span class="line">binding.randomCountLast.text = <span class="string">&quot;随机次数为:<span class="subst">$&#123;it?.get(<span class="number">0</span>)?.randomNum&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>直接使用<em>binding.xxx</em>来引用View</p></li></ol></li><li><p>viewBinding</p><ol><li><p>在Model的build.gradle中开启dataBinding</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">        ...</span><br><span class="line">        buildFeatures&#123;</span><br><span class="line">        viewBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>开启之后，系统将会自动的生成绑定类</p></li><li><p>在Activity中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line">    <span class="comment">//先申明为延迟初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">//将不需要指明Layout文件</span></span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的与dataBinding一致</p></li></ol></li></ul></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin的一些语法</title>
    <link href="/2021/04/15/Kotlin%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/04/15/Kotlin%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Kotlin的一些语法"><a href="#Kotlin的一些语法" class="headerlink" title="Kotlin的一些语法"></a>Kotlin的一些语法</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><h2 id="Int"><a href="#Int" class="headerlink" title="Int"></a><em>Int</em></h2><ul><li><p>数组</p><ul><li><p>创建指定大小的空数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dp = IntArray(n)</span><br></pre></td></tr></table></figure></li><li><p>创建数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dp = arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//相当于 int[1,2,3]</span></span><br></pre></td></tr></table></figure></li><li></li></ul></li><li></li></ul><h2 id="For"><a href="#For" class="headerlink" title="For"></a><em>For</em></h2><ul><li><p>对一个数字进行循环</p><ul><li><p>循环到那个数字（不包括）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span> until n)<span class="comment">//n就是输入的数字</span></span><br></pre></td></tr></table></figure></li><li><p>循环到那个数字（包括）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>..n)<span class="comment">//n就是输入的数字</span></span><br></pre></td></tr></table></figure></li><li></li></ul></li><li></li></ul><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a><em>Lambda</em></h2><ul><li><p>内联扩展函数</p><ul><li><p><strong>let</strong> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.let&#123;</span><br><span class="line">    <span class="comment">//默认是it来代表，可以通过it来访问其公有的属性和方法</span></span><br><span class="line">it.todo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景</p><blockquote><p><strong>场景一:</strong> 最常用的场景就是使用let函数处理需要针对一个可null的对象统一做判空处理。</p><p><strong>场景二:</strong> 然后就是需要去明确一个变量所处特定的作用域范围内可以使用 </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>?.let &#123;</span><br><span class="line">   it.todo()</span><br><span class="line">   it.todo1()</span><br><span class="line">   it.todo2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>with</strong></p><p>是将某对象作为函数的参数，在函数块内可以通过 this 指代该对象。返回值为函数块的最后一行或指定return表达式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with(<span class="keyword">object</span>)&#123;</span><br><span class="line">   <span class="comment">//todo</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">   <span class="keyword">val</span> item = getItem(position)?: <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">   with(item)&#123;</span><br><span class="line">      holder.tvNewsTitle.text = titleEn<span class="comment">//这里省略了this.(原本为this.titleEn)</span></span><br><span class="line">  holder.tvNewsSummary.text = summary</span><br><span class="line">  holder.tvExtraInf.text = <span class="string">&quot;难度：<span class="variable">$gradeInfo</span> | 单词数：<span class="variable">$length</span> | 读后感: <span class="variable">$numReviews</span>&quot;</span></span><br><span class="line">       ...   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以直接调用with(object)的公有属性</p></blockquote></li><li><p><strong>run</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.run&#123;</span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>run可以说是let和with的结合体，它既可以方便调用，又以最后一行为返回值(或指定的return值)</p></blockquote><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">  getItem(position)?.run&#123;</span><br><span class="line">      holder.tvNewsTitle.text = titleEn</span><br><span class="line">  holder.tvNewsSummary.text = summary</span><br><span class="line">       ...   </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里是对上面的with进行改变</p></blockquote></li><li><p><strong>apply</strong> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.apply&#123;</span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>apply</strong>和<strong>run</strong>很像，<strong>run</strong>是返回最后一行或者指定返回结果。而<strong>apply</strong>则是对本身进行修改，返回自己</p></blockquote></li><li><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user.apply&#123;</span><br><span class="line">    <span class="comment">//这些name都是user中的公有属性</span></span><br><span class="line">    name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    age = <span class="number">10</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>also</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span>.also&#123;</span><br><span class="line"><span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>also</strong>和<strong>let</strong>很像,<strong>also</strong>是返回它本身，<strong>let</strong>是返回最后一行</p></blockquote><p>例子展示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> adapter = DetailAdapter().also &#123;</span><br><span class="line">            binding.userRandomList.layoutManager = LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.HORIZONTAL, <span class="literal">false</span>)</span><br><span class="line">            binding.userRandomList.adapter = it</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li></li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a><em>高阶函数</em></h2>]]></content>
    
    
    
    <tags>
      
      <tag>kotlin</tag>
      
      <tag>syntax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android面试题笔记</title>
    <link href="/2021/02/18/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/18/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Android面试题笔记"><a href="#Android面试题笔记" class="headerlink" title="Android面试题笔记"></a>Android面试题笔记</h1><blockquote><p>面试题的笔记与自己的看法</p></blockquote><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li><p>数组</p><ul><li><p>是由同一种数据类型组成</p></li><li><p>存储在连续的内存中</p></li><li><p>可以使用索引来查找数组中的元素地址</p></li><li><p>通常有一维数组（也是最常用的，也是最简单的数据结构），多维数组</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>插入</td><td>O(n)</td></tr><tr><td>删除</td><td>O(n)</td></tr></tbody></table></li></ul></li></ol><ol start="2"><li><p>链表</p><ul><li><p>链表整体看起来是个树型，而不是数组</p></li><li><p>每一个节点都包括一个数组和一个指针</p></li><li><p>节点中的数据类型可以为任意类型 </p></li><li><p>指针就是指向下一节点的引用</p></li><li><p>每个链表都包含一个头节点和一个尾节点</p></li><li><p>头节点就是链表中的第一个节点。尾节点就是链表中最后一个节点</p></li><li><p>头节点和尾节点并不相连，尾节点的指针下一个是结尾（也就是指向空），并不是一个循环数据结构</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>插入</td><td>O(1)</td></tr><tr><td>删除</td><td>O(1)</td></tr></tbody></table></li></ul></li><li><p>双向链表</p><ul><li><p>一个双向链表首先是一个链表</p></li><li><p>一个双向链表中有一个前驱指针和一个后继指针</p></li><li><p>前驱指针是指向前驱结点（也就是前一个节点）</p></li><li><p>后继指针是指向后继结点（也就是后一个结点）</p></li><li><p>在双向链表中也有一个头结点，头结点是指向第一个节点，最后一个结点指向空</p></li><li><p>如果最后一个结点指向第一个结点，那么这就变成了双向循环链表</p></li><li><p>双向循环链表可以很容易从每个结点查找到它的前驱节点和后继节点</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>插入</td><td>O(1)</td></tr><tr><td>删除</td><td>O(1)</td></tr></tbody></table></li></ul></li><li><p>栈</p><ul><li><p>是一个有着【后进先出】特性的数据结构</p></li><li><p>也就是最后进栈的元素也是第一个出栈的元素</p></li><li><p>想要得到栈中第一个元素（也就是最下面的元素），就必须要把后面（上面）所有的元素都先出栈，才可以取出第一个元素</p></li><li><p>向栈中添加一个元素的操作被称作Push(入栈)</p></li><li><p>从栈中取出一个元素的操作被称为Pop(出栈)</p></li><li><p>查看且不删除栈中最后一个入栈的元素（也就是最上方的元素）的操作被称为Top</p></li><li><p>时间复杂度：</p><table><thead><tr><th>算法</th><th>平均复杂度</th></tr></thead><tbody><tr><td>空间</td><td>O(n)</td></tr><tr><td>查找</td><td>O(n)</td></tr><tr><td>入栈(Push)</td><td>O(1)</td></tr><tr><td>出栈(Pop)</td><td>O(1)</td></tr><tr><td>查看栈顶(Top)</td><td>O(1)</td></tr></tbody></table></li></ul></li><li><p>队列</p><ul><li></li></ul></li><li></li><li><p>贪婪算法</p><ul><li>贪婪算法也就是在求解一个问题的时候，做出当前最好的解决，而不是全局最好的解决</li><li>这种算法的实现都是在某一方面上局部最优解</li><li>贪婪算法也是不可回退的</li><li>贪婪算法在最优子结构问题中尤为有效，最优子结构也就是局部最优能决定全局最优（问题能分成多个小问题，每个小问题的最优解决能递推到最终问题的最优解）</li><li>当一个问题可以通过贪婪算法解决时，那么贪婪算法一般是解决这个问题的最好解决办法</li></ul></li><li></li></ol><h3 id="Java核心"><a href="#Java核心" class="headerlink" title="Java核心"></a>Java核心</h3><ol><li><p>基本数据类型</p><ul><li><p>byte（数据类型为8位，有符号，以而进程补码的整数，默认值是”0”）</p></li><li><p>short（数据类型位16位，有符号，以二进程补码的整数，默认值是”0”）</p></li><li><p>int（数据类型为32位，有符号，以二进程补码表示的整数，默认值是”0”）</p></li><li><p>long（数据类型为64位，有符号，以二进程补码的整数，默认值是”0L”(L是不区分大小写，为了书写规范，最好写成大写)）</p></li><li><p>float（数据类型为单精度，32位的浮点数，默认值是”0f”）</p></li><li><p>double（数据类型为双精度，64位的浮点数，默认值是”0d”）</p></li><li><p>boolean（数据类型为表示一位的信息，默认值只有两种”true”,”false”）</p></li><li><p>char（数据类型为一个单一的16位Unicode字符，可以存储任意字符）</p><blockquote><p>Unicode是全球统一的字符编码</p></blockquote></li></ul></li><li><p>抽象类的概念</p><ul><li>在面向对象的概念中，所有的对象都是用类来描述，但是并不是所有的类都是来描述对象的，当一个类没有足够多的信息来描绘一个对象时，这个类就是一个抽象类</li></ul></li><li><p>抽象的概念</p><ul><li></li></ul></li><li><p>继承</p><ul><li>继承可以使子类别具有父类别的各种属性和方法，而不需要去在重复编写相同代码。子类在继承父类的同时，也可以去重新定义某些属性，并重写某些方法，来覆盖父类别的原有属性和方法，使获取和父类别不同的功能。当遇到需要多重继承的时候，可以使用实现接口来实现多继承相似的效果</li></ul></li><li><p>封装</p><ul><li>从字面意思上来讲就是包装的意思，是指利用抽象数据类型，将数据和有关数据操作都封装起来，使它变成一个不可分割的独立体。用户不知道对象内部的细节，但是可以通过该对象提供的接口来进行访问对象。好处是：减少耦合性，方便未来修改</li></ul></li><li><p>多态</p><ul><li>多态就是指一个行为有多个不同的表现形式或形态的能力。多态就是一个接口，使用不同的实例而执行不同的操作（比如说定义了一个接口，它有两个不同的实例对象，使用不同的实例化就可以使用不同的效果）</li></ul></li><li><p>面向对象的三个基本元素和五个原则</p><ol><li>元素<ul><li>继承</li><li>多态</li><li>封装</li></ul></li><li>原则<ul><li>单一职责</li><li>开闭原则</li><li>里氏替换</li><li>依赖倒置</li><li>接口隔离</li></ul></li></ol></li><li><p>什么是线程，什么是进程？</p><ol><li>进程<ul><li>进程就是程序一次运行的过程，是系统运行程序的基本单位，因此进程是动态的。在java中，当我们运行main函数，其实也就是开启了一个JVM进程</li></ul></li><li>线程<ul><li>线程于进程类似，是一个比进程更小的执行单位，一个进程在执行过程中可以开启多个线程。当运行main函数时，main函数所在的线程就是进程中的一个线程，也就是主线程</li></ul></li></ol></li><li><p>JDK &amp; JVM &amp; JRE分别是什么以及它们的区别？</p><ol><li><p>JDK</p><ul><li>JDK是整个JAVA开发的核心，是面向开发者使用的SDK，它提供了JAVA的开发环境和运行环境</li></ul></li><li><p>JRE</p><ul><li>JRE就是运行时环境（它主要包含两个部分，JVM的标准实现，JAVA的一些基本类库）</li></ul></li><li><p>JVM</p><ul><li>JVM是JAVA虚拟机，也就是因为它，所以JAVA才拥有跨平台性</li></ul></li><li><p>区别</p><ul><li><p>它们三者的关系为：JDK包含JRE包含JVM</p><p><img src="https://i.loli.net/2021/02/16/QnCLmVgM7TbdjD2.png" alt="image-20210216113540235"></p></li></ul></li></ol></li><li><p>什么是面向过程 &amp; 什么是面向对象 &amp; 区别？</p><ol><li><p>面向对象</p><ul><li>面向对象是一种对<strong>现实世界理解和抽象</strong>的方法</li></ul></li><li><p>面向过程</p></li></ol></li></ol><ul><li>是一种 <strong>以过程为中心</strong> 的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。每个过程有一个阶段性的目标，依次完成这些过程，才能得到结果</li></ul><ol start="11"><li><p>给我说说Java面向对象的特征</p><ol><li>特点<ul><li>对象具有属性和行为</li><li>对象具有变化和形态</li><li>对象具有唯一性</li><li>对象都是某个类别的实例</li><li>一切皆为对象，真实世界中的所有事物都可以视为对象</li></ul></li><li>三大基本特征<ul><li>继承</li><li>多态</li><li>封装</li></ul></li></ol></li><li><p>什么是重载 &amp; 什么是重写 &amp; 区别</p><ol><li><p>重载</p><ul><li>重载就是指在同一个类中，方法名相同，而参数不同，返回类型可以相同，也可以不相同</li></ul></li><li><p>重写</p><ul><li>重写是指在方法名相同时，参数也相同，返回类型也相同，但方法内部实现操作不同（一般表示子类与父类之间的关系）</li></ul></li><li><p>区别</p><table><thead><tr><th>区别点</th><th>重载方法</th><th>重写方法</th></tr></thead><tbody><tr><td>参数列表</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>返回类型</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>访问修饰符</td><td>不能比父类更严格</td><td>一定不能修改</td></tr><tr><td>方法名</td><td>一致</td><td>一致</td></tr><tr><td>异常</td><td>可以修改</td><td>可以减少或删除，一定不能抛出新的或者更</td></tr><tr><td>访问</td><td>可以修改</td><td>一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table></li></ol></li><li><p>谈谈你对this和super的认识</p><ol><li>this<ul><li>this就是指当前方法的调用者（也就是指当前使用的对象）</li></ul></li><li>super<ul><li>super只是编译期中的一个指示符（也就是被看作是调用父类中被重写的方法，但实际上调用者还是子类对象）</li></ul></li></ol></li><li><p>接口和抽象类的区别</p><ol><li>接口<ul><li>接口是公开的，不能有私有的变量和方法，接口中的所有方法都<strong>没有方法体</strong>，通过关键字<strong>interface</strong>实现。接口也可以被看做抽象类的变体，接口中所有的方法都是抽象的，可以通过接口来实现多重继承</li></ul></li><li>抽象类<ul><li>抽象类可以拥有私有的方法和变量，通过<strong>abstract</strong>来声明一个类是一个抽象类，被声明为抽象方法<strong>不能包含方法体</strong>。抽象类的子类为父类中<strong>所有抽象方法的具体实现</strong>，否则也是抽象类</li></ul></li><li>相同点<ul><li>都不能被实例化</li><li>接口的实现类或者抽象类的子类都只有实现了<strong>接口或者抽象类中的方法</strong>后才能实例化</li></ul></li><li>不同点<ul><li>接口只能定义，不能有方法的实现。抽象类可以定义也可以实现方法</li><li>实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但只能继承一个抽象类</li><li>接口强调特定功能的实现，抽象类强调所属关系</li></ul></li></ol></li><li><p>给我说说权限修饰符特性</p><ol><li>public 公开的</li><li>private 类内部使用，外部没有访问权</li><li>protected 继承权限，子类继承父类后，子类有权限访问父类，在不同的包下都可以访问</li><li>default 默认访问权限，在同个包下都可以访问</li></ol></li><li><p>给我谈谈Java中的内部类</p><blockquote><p>在Java中允许在类的内部在创建一个类，这个定义在类内部的类就被称作内部类，包含内部类的类就被称作外部类。内部类可以方便的访问外部类私有属性和方法</p></blockquote><ol><li><p>静态内部类</p><ul><li><p>定义方式为 static class。静态内部类可以直接访问外部类的静态属性和方法，但是不可以访问外部类的实例属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticOutter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer outterNum = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outStatic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run out static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStaticInner</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用外部类的静态方法&quot;</span>);</span><br><span class="line">            outStatic();</span><br><span class="line">            System.out.println(<span class="string">&quot;调用外部类的静态属性&quot;</span>);</span><br><span class="line">            System.out.println(outterNum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>成员内部类</p><ul><li><p>定义方式为 class。成员内部类除了可以访问外部类的静态属性和方法，还可以访问实例属性和方法，但不可以定义静态变量和静态方法。这里可以吧成员内部类看作一个比较特殊的<strong>实例方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer outterNum = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行外部方法......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;outterNum:&quot;</span>+outterNum);</span><br><span class="line">            System.out.println(<span class="string">&quot;运行outter的方法&quot;</span>);</span><br><span class="line">            outterMethod();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法内部类</p><ul><li><p>定义方式为 class。方法内部类就是在一个方法中定义的一个类，方法内部类只能在定义的方法中使用。方法内部类可以直接调用定义方法的参数和方法内部的属性，也可以调用外部类中的静态属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodOutter</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Integer outter = <span class="number">10</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Integer param)</span></span>&#123;</span><br><span class="line">         String local = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">MethodInner</span></span>&#123;</span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;MethodOutter outter:&quot;</span>+outter);</span><br><span class="line">                 System.out.println(<span class="string">&quot;param:&quot;</span>+param);</span><br><span class="line">                 System.out.println(<span class="string">&quot;local:&quot;</span>+local);</span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">         &#125;</span><br><span class="line">         MethodInner inner = <span class="keyword">new</span> MethodInner();</span><br><span class="line">         inner.innerMethod();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         MethodOutter out = <span class="keyword">new</span> MethodOutter();</span><br><span class="line">         out.testMethod(<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名内部类</p><ul><li><p>匿名内部类只能使用一次，它没有名字，没有构造方法，但它可以根据参数调用父类的构造方法。和方法内部类一样，匿名内部类可以访问外部类的属性和方法，也可以访问局部变量和参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestInteface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String param)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TestInteface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">                System.out.println(param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>什么是拆箱 &amp; 装箱，能给我举栗子吗？</p><ol><li><p>Java中基础数据类型与它们的包装类进行运算时，编译器会自动帮我们进行转换，转换过程对程序员是透明的，这就是装箱和拆箱，装箱和拆箱可以让我们的代码更简洁易懂</p></li><li><p>在那些情况下会进行操作</p><ul><li>进行‘=’赋值操作（装箱或拆箱）</li><li>进行’ + , - , * , / ‘混合运算（拆箱）</li><li>进行’ &gt; , &lt; , ==’比较运算（拆箱）</li><li>进行’equals’进行比较（装箱）</li></ul></li><li><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutoBox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Float&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1.0f</span>);</span><br><span class="line">    <span class="keyword">float</span> firstElement = list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二行中，创建了一个存放Float类型的List，然后往里添加1.0f(float基础类型)，在将结果返回给float（这里List取出的结果是为Float）</p><p>所以结果很明显了，以float和Float为例，装箱就是调用Float的<strong>valueOf</strong>方法new一个Float并赋值，拆箱就是调用Float对象的<strong>floatValue</strong>方法并赋值返回给float。其他基础类型都是大同小异的，具体可以查看源码。</p></li></ol></li><li><p>static关键字的作用？</p><p>在Java中主要有3种使用情况</p><ol><li><p>static成员变量</p><blockquote><p>（Java类提供了两种类型的变量：用static关键字修饰的静态变量和不用static关键字修饰的实例变量）</p></blockquote><ul><li>静态变量属于类，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间，因此就可以被使用了。对静态变量的引用有两种方式，分别是“类.静态变量”和”对象.静态变量”</li><li>实例变量属于对象，只有对象被创建后，实例变量才会被分配内存空间，才能被使用，它在内存中存在多个复制，只有用“对象.实例变量”的方式来引用</li></ul></li><li><p>static成员方法</p><blockquote><p>Java中提供了static方法和非static方法</p></blockquote><ul><li>static方法是类的方法，不需要创建对象就可以被调用</li><li>而非static方法是对象的方法，只有对象被创建出来后才可以被使用（static方法中不能使用this和super关键字，不能调用非static方法）</li></ul></li><li><p>static代码块</p><ul><li>static代码块在类中是独立于成员变量和成员函数的代码块的。注意： 这些static代码块只会被执行一次</li></ul></li></ol></li><li><p>final关键字的作用</p><ul><li></li></ul></li><li><p>说说Java异常体系主要用来干什么的 &amp; 异常体系？</p><ul><li></li></ul></li><li><p>Error和Exception的区别？</p><ul><li></li></ul></li><li><p>说说运行时异常和非运行时异常的区别？</p><ul><li></li></ul></li><li><p>如何自定义一个异常？</p><ul><li></li></ul></li><li><p>5个常见的运行时异常</p><ul><li></li></ul></li><li><p>软引用和弱引用的区别？</p><ul><li>软引用关联的对象只有在内存不足时才会被回收，而被弱引用关联的对象在JVM进行垃圾回收时总会被回收。（也就是说 弱引用在每次进行垃圾回收的时候都会被回收，软引用只会在内存不足的时候回收）</li></ul></li><li><p>Socket的定义</p><ul><li>即套接字，<strong>是应用层 与 <code>TCP/IP</code> 协议族通信的中间软件抽象层，表现为一个封装了 TCP / IP协议族 的编程接口（API）</strong></li></ul></li><li><p>给我说说线程的生命周期</p></li><li><p>线程死锁的原因 &amp; 举个栗子 &amp; 如何避免死锁</p></li><li><p>如何停止掉一个线程？</p></li><li><p>wait()和sleep()的区别？</p></li><li><p>Java中创建线程的2种方式 &amp; 区别？</p></li><li><p><code>StringBuffer</code> 和<code>StringBuilder</code> 的区别在哪里?</p><p>StringBuffer和StringBuilder和String基本都是一样的，都是用来存放字符串的。</p><ul><li>string：但string是不可变的，任何对string的改变都会重新创建新的string，而StringBuffer和StringBuilder是可变的的</li><li>StringBuffer：区别在StringBuffer支持并发操作，是线性安全的，适合在多线程中使用。</li><li>StringBuilder：不支持并发操作，线性不安全的，所以不合适在多线程中使用，但StringBuilder在单线程中性能比StringBuffer更高</li></ul></li><li></li></ol><h3 id="Android核心"><a href="#Android核心" class="headerlink" title="Android核心"></a>Android核心</h3><ol><li><p>Activity生命周期（具体可以去Activity的讲解里查看）</p><ul><li>onCreate(在活动第一次启动时，触发该方法)</li><li>onStart(该方法表示活动将被展现给用户)</li><li>onResume（该方法表示活动准备好与用户进行交互）</li><li>onPause（该方法表示活动因为其他原因，被其他Activity，全屏的Dialog覆盖）</li><li>onStop（该方法表示活动不在想要展示给用户，如果内存不足则会进行回收）</li><li>onRestart （该方法表示活动从停止状态再次想要展示给用户）</li><li>onDestory（该方法表示活动被销毁，可能会有一定延迟才会被回收）</li></ul></li><li><p>Android四大组件</p><ul><li>活动 Activity（是所有程序的根本）</li><li>服务 Service（Android组件中的一种，不可以自己运行，只能后台运行，可以与其他组件进行交互）</li><li>广播 BroadcastReceiver（是一种在应用程序之间传递信息的一种机制，也可以在应用内部进行传递信息）</li><li>内容提供者 Content Provider（Android提供第三方应用数据访问的机制）</li></ul></li><li><p>Service与IntentService的区别</p><ul><li>Android中的Service是用于后台服务的，它不是一个独立的进程，也不是一个独立的线程，它是依赖与程序的主线程，也就是说它是运行来主线程上的，不推荐在Service中编写耗时操作</li><li>但是如果必须要在Service中编写耗时操作，那么就需要使用IntentService</li><li>IntentService是继承Service的，它包含了Service的全部特性，生命周期</li><li>IntentService与Service不同的是，在IntentService进行onCreate的时候，内部开启了一个线程，可以去执行耗时操作</li></ul></li><li><p>Android 应用的结构</p><ul><li></li></ul></li><li><p>Android 应用中保存数据</p><ul><li>sharedPreference（用xml来保存应用中的数据，本地）</li><li>SQL（将应用数据保存到应用本地数据库中，应用本地）</li><li>File（将应用数据保存到创建的txt文件中，本地）</li></ul></li><li><p>在 Android 应用中执行耗时操作</p><ul><li>使用Thread执行耗时操作（也就是在子线程中进行耗时操作，在将结果通过Handler传回主线程）</li><li>使用AsyncTask执行耗时操作（也就是在子线程中进行耗时操作，可通过<strong>onProgressUpdate</strong>方法来修改UI）</li></ul></li><li><p>两个 Fragment 之间进行通信</p><ul><li>使用接口来进行两个Fragment之间的通信，通过宿主Activity中转一下</li><li>使用广播</li></ul></li><li><p>Android 的通知系统</p><ul><li></li></ul></li><li><p>Android启动模式</p><ul><li>standard（那里调用就去那里，可多次堆叠，可以创建多个相同的Activity）</li><li>singleTop（可多次实例化，但不可堆叠，当栈顶为相同的Activity则会调用onNewIntent()方法）</li><li>singleTask（当已被实例化，再次创建则会将自己以上的所有Activity全部销毁，在调用onNewIntent()，如没被实例化，那将会创建新的Task并实例化后在入栈）</li><li>singleInstance（存在于单独的栈中，在这个栈中，只有也仅有它一个）</li></ul></li><li><p>什么是Fragment</p><ul><li>Fragment相当于是Activity中的模块，它有着自己的布局，生命周期，单独处理自己的输入输出</li></ul></li><li><p>Fragment 的生命周期</p><ul><li>onAttch（当Fragment与Activity发生关联时调用）</li><li>onCreate（创建Fragment时回调，如果想要保存Fragment基本组件，则在这里初始化）</li><li>onCreateView（首次绘制页面时调用，在此可以创建View。这里不能进行耗时操作）</li><li>onActivityCreated（在onCreate方法完成后返回，这里可以进行与Activity交互UI操作，不能在此之前与Activity进行交互）</li><li>onStart（启动Fragment时回调，此时Fragment可见，只是没有显示在前台，不能和用户进行交互）</li><li>onResume（Fragment在前台处于可见状态时返回，可以与用户交互）</li><li>onPause（Fragment处于暂停状态时返回，处于可见状态，但不能和用户交互）</li><li>onStop（停止Fragment时回调，处于完全不可见）</li><li>onDestoryView（销毁有关Fragment的视图，但还未与Activity解除绑定）</li><li>onDestory（销毁Fragment时回调）</li><li>onDetach（与Activity的关联被取消时调用）</li></ul></li><li><p>Android 的 Dialog</p></li></ol><pre><code>- </code></pre><ol start="13"><li><p>Android 的 View </p><ul><li></li></ul></li><li><p>Fragment 和 Activity 有什么区别？它们之间又有什么关系？</p><ul><li></li></ul></li><li><p>解释一下 Android 中的 Intent </p><ul><li></li></ul></li><li><p>onSaveInstanceState方法会在什么时候被执行？</p><ul><li>按下Home键时，因为系统不知道你在按下Home键之后要运行多少个程序，自然也不知道当前的Activity会不会销毁，所以系统则会调用onSaveInstanceState来保存那些非永久性的数据</li><li>关闭屏幕</li><li>从当前Activity开启另一个Activity</li><li>屏幕方向发生变化时</li></ul><blockquote><p>onSaveInstanceState() 这个方法是用来保存UI状态的，可以使用它来保存当前UI和你所想保存的东西</p></blockquote></li><li><p>简述View Touch事件传递机制。</p><ol><li>过程<ul><li>dispatchTouchEvent -&gt; onInterceptTouchEvent（该方法只在ViewGroup中有） -&gt; onTouchEvent</li></ul></li><li>dispatchTouchEvent （进行事件分发，返回值是Boolean）</li><li>onInterceptTouchEvent （进行事件拦截，该方法只在ViewGroup中有，View中是没此方法，一旦拦截，则执行ViewGroup的onTouchEvent，在ViewGroup中处理事件，而不会接着分发给View，且只调用一次，所以后面的事件都会交给ViewGroup来处理）</li><li>onTouchEvent（进行事件处理）</li></ol></li><li><p>为什么在子线程中执行 new Handler() 会抛出异常?</p><ul><li>是因为在创建Handler时，会先获取当前线程的Looper，如果Looper为空，则会异常</li></ul></li><li><p>invalidate()和postInvalidate()的区别？</p><ul><li>invalidate和postInvalidate都是用来刷新View的，但是invalidate是用于主线程刷新，如果在子线程则需要配合Handler。而postInvalidate可以在子线程中直接调用</li></ul><blockquote><p>invalidate() 请求重绘View树，即draw()过程，即用来刷新View的（谁调用他，谁就刷新）</p></blockquote></li><li><p>res目录和assets目录的区别？</p><ul><li>res/raw中的文件是会被映射到R.java中的，可以直接使用资源ID，不可以有目录结构</li><li>assets中的文件是不会映射到R.java中的，如果需要使用则需要AssetsManager类来进行访问，可以创建子文件夹</li></ul></li><li><p>onTouch()、onTouchEvent()和onClick()关系？</p><ul><li>优先度 onTouch -&gt; onTouchEvent -&gt; onClick</li><li>因此onTouchListener的onTouch会先触发，如果onTouch返回为false才会接着触发onTouchEvent</li><li>onClick内部是通过onTouchEvent来实现的</li></ul></li><li><p>为什么子线程不能更新UI？</p><ul><li>只有创建视图层次结构的原始线程才能更新这个视图，也就是说只有主线程才有权力去更新UI</li><li>假如允许多线程更新<code>UI</code>，但是访问<code>UI</code>是没有加锁的，一旦多线程抢占了资源，那么界面将会乱套更新了</li><li>其实还是可以在子线程中更新UI的，前提是它要拥有自己的ViewRoot，ViewRoot是在onResume中的addView()创建的。一般来说在onCreate中通过子线程更新UI是可行的，但不推荐，因为Android UI操作并不是线程安全</li></ul></li><li><p>在 onCreate中 runOnUiTherad -&gt; onHandler(Looper.getMainLooper()).post -&gt; Thread(runOnUiTherad) -&gt; View.post</p><blockquote><p>runOnUiTherad （调用此方法就可以在主线程中执行）</p><p>onHandler(Looper.getMainLooper())（创建Handler时传递了主线程的Looper，这样onHandler就会在主线程中运行）</p><p>View.post（View.post() 的内部也是调用了 Handler）</p></blockquote></li><li><p>SharedPreference的apply和commit的区别?</p><ul><li>apply（首先apply是没有返回结果的，其次apply是将修改的数据提交给内存，然后在异步提交给硬盘）</li><li>commit（commit是会返回一个Boolean，表明是否修改成功。commit是将数据同步提交给硬盘）</li></ul></li><li><p>ScrollView下嵌套一个ListView通常会出现什么问题？如何解决？</p><ul><li>问题：当ScrollView嵌套ListView时，ListView的高度设置为wrap_content时会产生，一般情况下ListView只显示的第一个Item。</li><li>解决<ol><li>手动设置ListView高度，只需要在给ListView设置完Adapter之后在实际测量高度并赋值</li><li>停止使用ScrollView嵌套ListView，改用ListView多Item</li><li>自定义可适应ScrollView的ListView，也就是重写ListView中的onMeasure方法</li></ol></li></ul></li><li><p>什么是OOM？检测OOM的机制是什么？如何避免？</p><ul><li>OOM是内存泄漏</li><li><strong>WeakReference</strong>与<strong>ReferenceQueue</strong>联合使用，在弱引用关联的对象被回收后，会将引用添加到<strong>ReferenceQueue</strong>；清空后，可以根据是否继续含有该引用来判定是否被回收；判定回收， 手动GC, 再次判定回收，采用双重判定来确保当前引用是否被回收的状态正确性；如果两次都未回收，则确定为泄漏对象。</li><li>如何避免内存泄露：<ol><li>使用缓存技术，比如Recache、DiskLruCache、对象重复并且频繁调用可以考虑对象池</li><li>对于引用生命周期不一样的对象，可以用软引用或弱引用SoftReferner WeakReferner</li><li>对于资源对象 使用finally 强制关闭</li><li>内存压力过大就要统一的管理内存</li></ol></li></ul></li><li><p>广播的两种注册形式</p><ul><li><p>静态注册（在AndroidManifest中进行注册）在AndroidManifest中进行注册后，不管改应用程序是否处于活动状态，都会进行监听。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=<span class="string">&quot;.IncomingSMSReceiver&quot;</span>&gt;  </span><br><span class="line">    &lt;intent-filter&gt;  </span><br><span class="line">         &lt;action android:name=<span class="string">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span>/&gt;  </span><br><span class="line">    &lt;/intent-filter&gt;  </span><br><span class="line">&lt;/receiver&gt;  </span><br></pre></td></tr></table></figure></li><li><p>动态注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(<span class="string">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span>);  </span><br><span class="line">IncomingSMSReceiver receiver = <span class="keyword">new</span> IncomingSMSReceiver();  </span><br><span class="line">registerReceiver(receiver, filter);  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何设计开发一个图片轮播组件？简述要点或写代码。</p><ol><li><p>整个组件采用ViewPager</p></li><li><p>适配器继承自PagerAdapter</p></li><li><p>重写getCount()，isViewFromObject(View arg0, Object arg1)，destroyItem(ViewGroup container, int position, Object object)，instantiateItem(ViewGroup container, int position)四个方法。</p><blockquote><p>getCount（获取当前界面个数）</p><p>isViewFromObject（判断是否由对象生成页面）</p><p>destroyItem（回收Item）</p><p>instantiateItem（加载Item）</p></blockquote></li><li><p>getCount代表返回的条目，要实现无限轮播，这里就要给出一个很大的值，我们可以采Integer.MAX_VALUE。其他的和普通ViewPager开发一样，在isViewFromObject返回arg0 == arg1，在destroyItem中摧毁滑出的View,container.removeView((View) object),在instantiateItem中添加对应的item,记得添加item,container.addView(child)。里面的postion都要做取余处理，避免数组越界。</p></li><li><p>最后，可以使用一个handler实现自动轮播，重写onTouchEvent来对自动轮播控制。</p></li></ol></li><li><p>Kotlin中协程和线程的区别？</p><ol><li>线程<ul><li>线程的目的是为了提高CPU的资源使用率，使多个任务可以并行运行，是服务于机器的。线程的调度是系统来完成的，一般是抢占式的，根据优先级来分配</li></ul></li><li>协程<ul><li>协程的目的是为了让多个任务之间更好的协作，是服务于人的。协程为了确保代码逻辑是顺序，所以调度是由开发者来定制的</li></ul></li></ol></li><li><p>从架构图看，android分为几个层?</p><ul><li>5层<ol><li>:Linux Kernel(Linux内核)</li><li>Hardware Abstraction Layer(硬件抽象层)</li><li>Libraries(系统运行库或者是c/c++ 核心库)</li><li>Application Framework(开发框架包 )</li><li>Applications(核心应用程序)</li></ol></li></ul><p><img src="https://uploadfiles.nowcoder.com/images/20170308/8698685_1488963422551_58DC97016985EB4A658556EF1A13A275" alt="img"></p></li><li><p>VideoView</p><ul><li>不可以控制大小（这里的大小就是指View的大小，给他设置高宽是不会生效的）</li><li>VideoView实际的尺寸可能并不是这个尺寸设置的大小. VideoView在测量自身的尺寸时会依据视频的真实尺寸来调整自己的大小。</li></ul></li><li><p>使用SimpleAdapter作为 ListView的适配器，行布局中支持下列哪些组件？</p><ul><li>实现Checkable接口的View</li><li>TextView</li><li>ImageView</li></ul></li><li><p>如何在任意位置关掉应用所有Activity &amp; 如何在任意位置关掉指定的Activity？</p></li><li><p>Activity任务栈是什么？在项目中有用到它吗？说给我听听</p></li><li><p>什么情况下Activity不走onDestory?</p><ul><li>System.exit(0)（使用此方法来退出应用时，是不会触发onDestory）</li><li>栈里面的第一个没有销毁的activity会执行onDestroy方法，其他的不会执行（从MainActivity跳转到activity-A（或者继续从activity-A再跳转到activity-B），这时候，从后台强杀，只会执行mainActivity的onDestroy方法，activity-A（以及activity-B）的onDestroy方法都不会执行）</li></ul></li><li><p>什么情况下Activity会单独执行onPause?</p><ul><li>当Activity被一个透明的Dialog或者别的东西覆盖时，此时它依然与窗口管理器依然保持连接，系统继续维护其内部状态，所以它仍然可见，但它已经失去了焦点故不可与用户交互，所以被覆盖的Activity并不会执行onStop()方法，只会执行onPause</li></ul></li><li><p>隐式 Intent 和 显式 Intent</p><ul><li>使用显式Intent时，我们需要指定启动那一个Activity</li><li>使用隐式Intent时，只用告诉系统想做什么，系统会自动的找到符合的Activity来启动</li></ul></li><li><p>什么是 Loader ？</p></li><li><p>什么是 NDK ，为什么它是有用的？</p></li><li><p>如何理解严格模式（StrictMode）</p></li><li><p>什么是 Lint ？它的用途是什么？</p></li><li><p>ListView 和 RecyclerView 有什么区别？</p></li><li><p>如何理解上下文（Context）。怎么使用它？</p></li><li><p>为什么 Bundle 被用来传递数据，为什么不能使用简单的 HashMap 数据结构？</p><blockquote><p>Bundle本质上也是用ArrayMap来进行存储，所以也就是问为什么要用ArrayMap来进行存储。</p></blockquote><ul><li>ArrayMap：适合小数据存储，在数据量较大的时候，性能将退化。</li><li>HashMap ：内部是使用数组+链表的结果，在数据量大的时候性能不错，但在数据小的时候，它的Entry Array比ArrayMap占更多的空间</li></ul><p>在Android中，多数传递都是较小的数据，所以使用Bundle （ArrayMap）更好。而且如果使用Intent来传递数据，Bundle的Parcelable序列化比HashMap 的Serializable性能更好</p></li><li><p>如何理解 Android 的 Dialog ？</p><ul><li>要在Activity中创建一个Dialog，可以在onCreate中调用showDialog(id)，之后会回调onCreateDialog(int id,Bundle rags)这里返回的id就是showDiolog中传入的id，用来表示Dialog，之后就来在onCreateDialog中创建你自己的Dialog。最后还会调用onPrepareDialog()，之后就创建完毕。下次在调用（当前Activity不销毁）showDialog就不会允许onCreatesDialog，只会调用onPrepareDoalog</li></ul></li><li><p>什么是 ViewGroup ，它与 View 的区别在哪里？</p></li><li><p>谈谈 Serializable 接口和 Parcelable 接口的区别。在 Android 中最好使用哪种接口？</p></li><li><p>当 Bitmap 占用较多内存时，你是怎么处理的？</p></li><li><p>AsyncTask 的生命周期和(它所属的) Activity 的生命周期有什么关系？这种关系可能会导致什么样的问题？ 如何避免这些问题发生？ </p></li><li><p>什么是 NDK ，为什么它是有用的？</p></li><li><p>如何理解严格模式（StrictMode）</p></li><li><p>什么是 SurfaceView ？</p></li><li><p>你知道什么是视图树(View Tree)吗？怎样优化它的深度？</p></li><li><p>阐述一下 Android 中的 HashMap , ArrayMap 和 SparseArray</p></li><li><p>阐述一下 Looper, Handler 和 HandlerThread</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Collapsing与Navigation</title>
    <link href="/2020/12/24/Collapsing%E4%B8%8ENavigation/"/>
    <url>/2020/12/24/Collapsing%E4%B8%8ENavigation/</url>
    
    <content type="html"><![CDATA[<h1 id="Collapsing与Navigation"><a href="#Collapsing与Navigation" class="headerlink" title="Collapsing与Navigation"></a>Collapsing与Navigation</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p>关于Navigation的部分，上篇有，这里就不作多介绍了</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ol><li><p>将activity_main中的 “ConstraintLayout”抽取出来，方便操作：左键选中区域，单机右键选择Refactor，在选择 Layout进行抽取，这里我命名为（layout_constraiont）</p></li><li><p>在原本的ConstraintLayout的布局中添加层级</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/appbar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;192dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/collTpplabar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentScrim</span>=<span class="string">&quot;?attr/colorPrimary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|exitUntilCollapsed&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:toolbarId</span>=<span class="string">&quot;@+id/toolbar&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 这里的lCollapsingToolbarLayout也就是可滑动的Toolbar，在滑动过程中进行变化的就是它 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">&quot;pin&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里的layout_collapseMode设置为pin 是为了将Tooblar进行固定住，不让他上滑移出屏幕 --&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.core.widget.NestedScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">app:layout_behavior</span>=<span class="string">&quot;com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- NestedScrollView只允许有一个子类，尽量减少嵌套RecyclerView，原因可查看(CoordinatorLayout嵌套RecyclerView)文章 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:showIn</span>=<span class="string">&quot;@layout/activity_main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/navigation&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.core.widget.NestedScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>层级如下:</p><ul><li>CoordinatorLayout<ul><li>AppBarLayout<em>（AppBarLayout要与CoordinatorLayout一同使用）</em><ul><li>CollapsingToolbarLayout<em>（可滑动Toolbar）</em></li><li>Toolbar <em>（最终固定的Toolbar）</em></li></ul></li><li>NestedScrollView<em>（滑动布局）</em><ul><li>ConstraintLayout<em>（约束布局）</em><ul><li>fragment</li></ul></li></ul></li></ul></li></ul></li><li><p>因为需要将顶部通知栏进行覆盖，所以将原本的ActionBar取消掉，也就是将当前theme主题设置为 NoActionBar 即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.NoActionBar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">              <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>既然取消了ActionBar，那么需要自己设置一个ActionBar，在第二部中，我们创建了Toolbar，所以我们将它设置为ActionBar</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">setContentView(R.layout.activity_main)</span><br><span class="line">setSupportActionBar(toolbar)</span><br></pre></td></tr></table></figure><p>别的代码不需要改动</p></li><li><p>在各个Fragment中需要进行设置CollapsingToolbarLayout.title的值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        requireActivity().collTpplabar.title = getString(R.string.text_fragment)</span><br><span class="line">        <span class="comment">//直接使用requireActivity()来访问到Activity的CollapsingToolbarLayout，并为它设置Title</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_text, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就完成效果了</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DrawerLayout的使用</title>
    <link href="/2020/12/24/DrawerLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/12/24/DrawerLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="DrawerLayout的使用"><a href="#DrawerLayout的使用" class="headerlink" title="DrawerLayout的使用"></a>DrawerLayout的使用</h1><blockquote><p>本篇已Kotlin为主要语言</p></blockquote><p>DrawerLayout也就是侧边栏</p><h3 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h3><ul><li>DrawerLayout     –侧边栏的父容器<ul><li>Fragment    –容器</li></ul></li><li>NavigationView   –侧边栏</li></ul><h3 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h3><ol><li><p>首先创建3个Fragment</p><p>ListFragment：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_list, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextFragment：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_text, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PagerFragment：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PagerFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_pager, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击 New 创建空白Framgnet即可</p><p><img src="C:\Users\fuxinbo\AppData\Roaming\Typora\typora-user-images\image-20201223112423832.png" alt="image-20201223112423832"></p></li><li><p>接下来在res文件中创建一个名为”navigation”的文件夹，在文件夹下创建navigation的xml文件</p><p><img src="C:\Users\fuxinbo\AppData\Roaming\Typora\typora-user-images\image-20201223112937398.png" alt="image-20201223112937398"></p></li><li><p>在navigation中编写3个Fragment，并将刚刚创建的3个Fragment传入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@id/textFragment&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.laboratory.drawerdome.TextFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/text_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.laboratory.drawerdome.ListFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/list_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_list&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/pagerFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.laboratory.drawerdome.PagerFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/pager_fragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_pager&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>继续在res下创建名为”menu”的文件夹，在文件夹下创建menu的xml</p></li><li><p>在menu中编写3个item，item的名字要与navigation中的fragment相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_baseline_one&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/text_fragment&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/listFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_baseline_two&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/list_fragment&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/pagerFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_baseline_three&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/pager_fragment&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接下来就是在activity_main中进行设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:openDrawer</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/navigation&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">&quot;@layout/navigation_header&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">&quot;@menu/menu&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将menu设置给NavigationView，fragment设置侧边栏NavigationView</p><blockquote><p>android:layout_gravity=”start”   意思为设置侧边栏是从左到右，一定要写</p><p>DrawerLayout的openDrawer，是设置显示效果</p></blockquote></li><li><p>最后在Activity中设置</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="comment">//drawerLayout与导航栏的中继器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> appBerConfiguration: AppBarConfiguration</span><br><span class="line">    <span class="comment">//导航栏控制器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> navController: NavController</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//获取Fragment容器</span></span><br><span class="line">        navController = findNavController(R.id.fragment)</span><br><span class="line">        <span class="comment">//将drawerLayout和获取到导航栏图表相连</span></span><br><span class="line">        appBerConfiguration = AppBarConfiguration(navController.graph, drawerLayout)</span><br><span class="line">        <span class="comment">//设置将由appBerConfiguration来控制navController</span></span><br><span class="line">        setupActionBarWithNavController(navController, appBerConfiguration)</span><br><span class="line">        <span class="comment">//给Navigation设置控制器</span></span><br><span class="line">        navigation.setupWithNavController(navController)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将顶部栏与navigation进行连接</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> navController.navigateUp(appBerConfiguration) || <span class="keyword">super</span>.onSupportNavigateUp()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上效果就完成了</p>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo与Typora 上传图片</title>
    <link href="/2020/12/24/PicGo%E4%B8%8ETypora-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2020/12/24/PicGo%E4%B8%8ETypora-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="PicGo的设置与Typora上传图片"><a href="#PicGo的设置与Typora上传图片" class="headerlink" title="PicGo的设置与Typora上传图片"></a>PicGo的设置与Typora上传图片</h1><blockquote><p>需要花钱的哈</p></blockquote><p><strong>首先需要进行下面两个操作</strong></p><ol><li>阿里OSS存储的购买（为了方便，这里以阿里为例子）</li><li>PicGo的下载与设置</li></ol><h3 id="阿里OSS"><a href="#阿里OSS" class="headerlink" title="阿里OSS"></a>阿里OSS</h3><ol><li><p><a href="https://www.aliyun.com/">打开阿里云</a></p></li><li><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224151334.png"></p><p>选择对象存储OSS</p></li><li><p>点击则扣套餐进行购买（40G，1年，8.7元很香）</p></li><li><p>购买完成后，打开控制台，在左边栏中选择Bucket列表</p></li><li><p>点击创建Bucket</p><ul><li><p>地区选择离你最近的地方，版本控制器看需求来开，一般来说是不须要开启的（不会花额外的钱，但是会占用你的空间）</p></li><li><p>读写权限改为公共读（不然别人访问不了你的图片）</p></li><li><p>别的都是并不开通</p></li></ul><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224151726.png" alt="image-20201224151723354"></p></li><li><p>接下来创建AccessKey，点击Access Key</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224152803.png" alt="image-20201224152801998"></p></li><li><p>点击创建Access Key，将创建好的Access Key保存到本地</p></li><li><p><a href="http://gosspublic.alicdn.com/oss-browser/1.9.4/oss-browser-win32-x64.zip">下载安装OSS Browser客户端</a>（OSS Browser是阿里云官方的客户端工具，可以使用拥有OSS权限的用户登录，从而免去登录官网控制台的麻烦。）</p></li><li><p>下载安装好之后打开，用刚刚创建好的Access Key来进行登录,Endpoint选择公共云，之后就可以在里面看见上传的图片，文件之类的</p></li></ol><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>PicGo是一个支持多种图床的客户端图片上传工具，可以实现快速上传图片到指定图床，并将链接保存到剪贴板。</p><ol><li><p><a href="https://github.com/Molunerfinn/PicGo/releases">下载PicGo</a></p></li><li><p>下载安装好之后，点击图床设置，选择阿里云</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224153500.png" alt="image-20201224153459239"></p></li><li><p>选择PicGo设置，修改快捷键，设置你喜欢的快捷键</p></li><li><p>其余设置如下</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224153701.png" alt="image-20201224153700790"></p></li></ol><h3 id="Typora上传图片"><a href="#Typora上传图片" class="headerlink" title="Typora上传图片"></a>Typora上传图片</h3><ol><li><p>打开Typora的设置</p></li><li><p>进行如下的设置</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224153821.png" alt="image-20201224153820513"></p></li></ol><h3 id="使用教学"><a href="#使用教学" class="headerlink" title="使用教学"></a>使用教学</h3><p>Win10的截图快捷键为（win+shift+s）进行选择截图，截完图片之后，粘贴进Typora，选择上传图片 即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>Service</tag>
      
      <tag>Money</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WorkManager后台任务</title>
    <link href="/2020/12/24/WorkManager%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
    <url>/2020/12/24/WorkManager%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="关于WorkManager的使用"><a href="#关于WorkManager的使用" class="headerlink" title="关于WorkManager的使用"></a>关于WorkManager的使用</h1><blockquote><p>本篇以Kotlin为主要语言</p></blockquote><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>WorkManager</strong>是一个后台执行任务管理，即使在应用退出，也可以继续执行被创建的任务。还可以为<strong>WorkManager</strong>添加触发条件。当然还有特殊情况，当应用被彻底杀死的时候，任务是不会触发的，会等到下次应用开启，然后触发任务</p><ol><li><p>添加依赖</p><ul><li><p>打开当前项目的ProjecySturcture</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145449.png" alt="image-20201224145447147"></p></li><li><p>在Dependencies.app中点击 + 来添加依赖，之后在Library Dependency中搜索androidx.work</p><p><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145615.png" alt="image-20201223092135741"></p></li><li><p>选择ktx结尾的，点击ok，等待下载完成</p></li></ul></li><li><p>接下来创建一个类MyWorker 继承 Worker</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;work&quot;</span>, <span class="string">&quot;doWork: <span class="variable">$data</span> 任务开始&quot;</span> )</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>)</span><br><span class="line">        Log.e(<span class="string">&quot;work&quot;</span>, <span class="string">&quot;doWork: <span class="variable">$data</span> 任务结束&quot;</span> )</span><br><span class="line">        <span class="keyword">return</span> Result.success()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承Worker 是需要传入参数，所以需要创建构造方法。这里为了方便观察，于是打印日志</p></li><li><p>然后再Activity中创建全局变量 workMananger，并且创建workRequest且传入</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> workManager = WorkManager.getInstance(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//这里在XML中创建了一个Button，为其设置点击事件</span></span><br><span class="line">        button.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> wrokRequest = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">            .build()</span><br><span class="line">            workManager.enqueue(wrokRequest)</span><br><span class="line">            <span class="comment">//将创建好的workRequest传递给workManager</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，关于workManager的简单使用就完成了</p></li></ol><h3 id="WorkManager的触发条件与传递数据、串接"><a href="#WorkManager的触发条件与传递数据、串接" class="headerlink" title="WorkManager的触发条件与传递数据、串接"></a>WorkManager的触发条件与传递数据、串接</h3><h5 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> constraints = Constraints.Builder()</span><br><span class="line">           .setRequiredNetworkType(NetworkType.CONNECTED)</span><br><span class="line">           .build()</span><br><span class="line"><span class="keyword">val</span> wrokRequest = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">           .setConstraints(constraints)</span><br><span class="line">           .build()</span><br></pre></td></tr></table></figure><p>创建一个constraints，并且给他设置触发条件为连接网络时触发，然后传递给workRequest</p><h5 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h5><p>可以将数据传递进Worker，Worker也可以把数据传递出来</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> wrokRequest = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">            .setConstraints(constraints)</span><br><span class="line">            .setInputData(workDataOf(INTPUT_WORK_KEY to <span class="keyword">data</span>))</span><br><span class="line">            .build()</span><br></pre></td></tr></table></figure><p>传递数据是通过setInputData，接受一个workData参数，workData是一个键值对，最后在Worker中接受数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span></span>(context: Context, workerParams: WorkerParameters) : Worker(context, workerParams) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = inputData.getString(<span class="string">&quot;Key&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> Result.success(workDataOf(OUT_WORK_KEY to <span class="string">&quot;任务已结束&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过inputData 来接受数据，并且可以通过return Success来传递出去数据，在Activity/Fragment中通过LiveData观察来获取数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workManage.getWorkInfoByIdLiveData(workRequestA.id).observe(<span class="keyword">this</span>, Observer &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;任务完成，返回数据为<span class="subst">$&#123;it.outputData&#125;</span>&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure><h5 id="串接"><a href="#串接" class="headerlink" title="串接"></a>串接</h5><p>首先，我们先将创建触发条件与创建workRequest的内容提取出来（快捷键为:ctrl+alt+m）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createWork</span><span class="params">(<span class="keyword">data</span>: <span class="type">String</span>)</span></span>: OneTimeWorkRequest &#123;</span><br><span class="line">        <span class="keyword">val</span> constraints = Constraints.Builder()</span><br><span class="line">            .setRequiredNetworkType(NetworkType.CONNECTED)</span><br><span class="line">            .build()</span><br><span class="line">        <span class="keyword">return</span> OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">            .setConstraints(constraints)</span><br><span class="line">            .setInputData(workDataOf(INTPUT_WORK_KEY to <span class="keyword">data</span>))</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并且给这个方法传入一个参数，用来进行与Worker之间传递数据,然后使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> WORK_A_DATA = <span class="string">&quot;A ni shi han han&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> WORK_B_DATA = <span class="string">&quot;B ni shi han han&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> workRequestA = createWork(WORK_A_DATA)</span><br><span class="line"><span class="keyword">val</span> workRequestB = createWork(WORK_B_DATA)</span><br><span class="line">    workManager.beginWith(workRequestA)</span><br><span class="line">        .then(workRequestB)</span><br><span class="line">        .enqueue()</span><br></pre></td></tr></table></figure><p>beginWith() 是传入第一个workRequest，剩下的通过then来传递，最后别忘了调用enqueue()</p>]]></content>
    
    
    
    <tags>
      
      <tag>Thread</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Room在项目中的使用</title>
    <link href="/2020/12/24/Room%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/12/24/Room%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Room在项目中的使用"><a href="#Room在项目中的使用" class="headerlink" title="Room在项目中的使用"></a>Room在项目中的使用</h1><blockquote><p>本篇已Java为主要语言</p></blockquote><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&quot;androidx.room:room-runtime:2.2.5&quot;</span></span><br><span class="line">annotationProcessor  <span class="string">&quot;androidx.room:room-compiler:2.2.5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>接下来我就以保存历史为例,先介绍一下各个注释的意思</p><table><thead><tr><th>注释名称</th><th>意思</th></tr></thead><tbody><tr><td>@Entity</td><td>代表数据库中某个表的实体类。</td></tr><tr><td>@Ignore</td><td>代表无用的构造方法</td></tr><tr><td>@PrimaryKey()</td><td>代表主键的意思，是必须要有的</td></tr><tr><td>@Database</td><td>包含数据库持有者，并作为与应用持久关联数据的底层连接的主要访问点</td></tr></tbody></table><ol><li><p>创建 HistoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HistoryBean</span><span class="params">(<span class="keyword">int</span> id, String name, String address, String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentId = id;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentName = name;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentAddress = address;</span><br><span class="line">        <span class="keyword">this</span>.EquipmentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrimaryKey()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> EquipmentId;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentName;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentAddress;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentPersonnel;</span><br><span class="line">    <span class="keyword">private</span> String EquipmentState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEquipmentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentId</span><span class="params">(<span class="keyword">int</span> equipmentId)</span> </span>&#123;</span><br><span class="line">        EquipmentId = equipmentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentName</span><span class="params">(String equipmentName)</span> </span>&#123;</span><br><span class="line">        EquipmentName = equipmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentAddress</span><span class="params">(String equipmentAddress)</span> </span>&#123;</span><br><span class="line">        EquipmentAddress = equipmentAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentPersonnel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentPersonnel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentPersonnel</span><span class="params">(String equipmentPersonnel)</span> </span>&#123;</span><br><span class="line">        EquipmentPersonnel = equipmentPersonnel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEquipmentState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EquipmentState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEquipmentState</span><span class="params">(String equipmentState)</span> </span>&#123;</span><br><span class="line">        EquipmentState = equipmentState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建一个数据库管理类 （AppDatabase）继承 RoomDatabase</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = &#123;HistoryBean.class&#125;, version = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> HistoryDao <span class="title">historyDao</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在创建一个数据库操作接口 （HistoryDao）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HistoryDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> historyBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertAll</span><span class="params">(HistoryBean historyBean)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;DELETE FROM historybean&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据（传入不一样的数据，将会自动将不一样的数据替换旧数据）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> historyBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUsers</span><span class="params">(HistoryBean historyBean)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT * FROM HistoryBean&quot;)</span></span><br><span class="line">    LiveData&lt;List&lt;HistoryBean&gt;&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>接下来就是在Activity/Fragment中使用，因为在主线程中是不允许进行数据库操作的，会阻塞线程，所以必须要在子线程中来操作数据库。下面的代码就是使用AsyncTask来进行子线程操作</p><p>那么下面将创建一个数据库操作类，用来方便进行数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoOperation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AppDatabase db;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DaoOperation instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里将DaoOpertaion设置为单例模式，因为会在各种地方使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DaoOperation <span class="title">getDatabase</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (AppDatabase.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    db = MyApplication.getDatabase(context);</span><br><span class="line">                    instance = <span class="keyword">new</span> DaoOperation();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是对外开放接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> insertHistory(historyBean).execute(historyBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dellHistory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> dellHistory().execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> upHistory(historyBean).execute(historyBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下是内部实现过程</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入历史</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">insertHistory</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">HistoryBean</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HistoryBean historyBean;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">insertHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.historyBean = historyBean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(HistoryBean... historyBeans)</span> </span>&#123;</span><br><span class="line">            db.historyDao().insertAll(historyBean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除全部历史</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">dellHistory</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">dellHistory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">            db.historyDao().deleteAll();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更改历史（基本用不上）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">upHistory</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">HistoryBean</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HistoryBean historyBean;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">upHistory</span><span class="params">(HistoryBean historyBean)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.historyBean = historyBean;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(HistoryBean... historyBeans)</span> </span>&#123;</span><br><span class="line">            db.historyDao().updateUsers(historyBean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于AsyncTast的使用，其他篇幅就已经讲过了，这里就并进行讲解了 <a href="%E5%85%B3%E4%BA%8EAndroid%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C.md">关于Android多线程操作</a></p></li><li><p>最后在Activty/Fragment中使用（展示经常使用的插入和删除）</p><p><code>插入</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaoOperation.getDatabase(<span class="keyword">this</span>).insertHistory(<span class="keyword">new</span> HistoryBean(id,name, address,state));</span><br></pre></td></tr></table></figure><p><code>删除</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaoOperation.getDatabase(<span class="keyword">this</span>).dellHistory();</span><br></pre></td></tr></table></figure></li><li><p>展示不一样的数据库查询（下面的代码HistoryModel是因为我当前项目使用的Mvvm的设计模式，我将所以数据操作都放在Model中了）</p><p>因为上面设置查询的结果为LiveData，也就是可观察</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HistoryModel mHistoryModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(HistoryModel.class);</span><br><span class="line">        mHistoryModel.getHistory(<span class="keyword">this</span>).observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;List&lt;HistoryBean&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(List&lt;HistoryBean&gt; historyBeans)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//这里我是将查询到的数据传入设配器中</span></span><br><span class="line">                adapter.loadMore(historyBeans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>关于使用LiveData的好处有多，比如</p><ul><li>会观察当前引用类的生命周期，只会在生命周期内进行操作</li><li>不会造成内存泄漏</li><li>一旦数据发送变化，将立马通知</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SmallestWidth 限定符</title>
    <link href="/2020/12/17/SmallestWidth-%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <url>/2020/12/17/SmallestWidth-%E9%99%90%E5%AE%9A%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="SmallestWidth-限定符"><a href="#SmallestWidth-限定符" class="headerlink" title="SmallestWidth 限定符"></a>SmallestWidth 限定符</h1><blockquote><p>本篇不限语言</p></blockquote><h3 id="介绍smallestWidth-限定符"><a href="#介绍smallestWidth-限定符" class="headerlink" title="介绍smallestWidth 限定符"></a>介绍smallestWidth 限定符</h3><ol><li>优点<ul><li>使用这种方式只需要少量 dimens.xml 文件即可达到适配，而且根本不用考虑虚拟按键的问题。如果只适配手机，dimens.xml 文件所占的体积只有 100 多 KB，即使加上平板和 TV，也就 500 多 KB，完全可以接收。</li></ul></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>打开AndroidStudio</li><li>进入Settings</li><li>选择Plugins</li><li>在插件商店里面 搜索 “ScreenMatch” 点击安装 最后点击“ok”，重启AndroidStudio即可</li><li>在项目的默认 values 文件夹中需要一份 dimens.xml 文件<ul><li><a href="https://github.com/wildma/ScreenAdaptation/blob/master/app/src/main/res/values/dimens.xml">这里提供使用</a></li></ul></li><li>执行生成<ul><li>插件安装好后，在项目的任意目录或文件上右键，选择 ScreenMatch 选项（如下图）</li><li><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145630.webp" alt="img"></li></ul></li><li>选择对那个module进行适配（一般来说就是选择app即可）</li><li>res目录下会生成对应宽度dpi的文件（如下图）<ul><li><img src="https://fu-bucket-key.oss-cn-shenzhen.aliyuncs.com/img/20201224145638.webp" alt="img"></li></ul></li><li>在xml文件中写布局的时候，单位就使用dp_xxx即可完成适配（如下）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/dp_50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/dp_50&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>屏幕适配</tag>
      
      <tag>NoLimits</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Andorid的多线程操作/UI</title>
    <link href="/2020/12/17/Andorid%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C-UI/"/>
    <url>/2020/12/17/Andorid%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C-UI/</url>
    
    <content type="html"><![CDATA[<h1 id="Andorid的多线程操作-UI"><a href="#Andorid的多线程操作-UI" class="headerlink" title="Andorid的多线程操作/UI"></a>Andorid的多线程操作/UI</h1><blockquote><p>本篇已Java为主要语言</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ol><li>Thread</li><li>AsyncTask</li></ol><h3 id="Thread的使用"><a href="#Thread的使用" class="headerlink" title="Thread的使用"></a>Thread的使用</h3><h5 id="Thread子线程运行"><a href="#Thread子线程运行" class="headerlink" title="Thread子线程运行"></a>Thread子线程运行</h5><ol><li>创建一个类，继承Thread，并且重写run方法（如下）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span>()</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在run方法中写耗时操作即可</p><ol start="2"><li>使用： MyThread.start(); </li><li>更改写法，继承Runnable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Runnable</span>()</span>&#123;</span><br><span class="line"><span class="meta">@Overrid</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改了写法，使用方法也需要改变,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h5 id="Thread子线程通知UI更改"><a href="#Thread子线程通知UI更改" class="headerlink" title="Thread子线程通知UI更改"></a>Thread子线程通知UI更改</h5><ol><li>首先在子线程中是不运行进行UI操作，想要进行UI操作，只能在主线程中进行操作。</li><li>那么，在子线程中想要更改UI，就只能通过Handler来进行UI操作</li></ol><ul><li>先介绍一下Handler<ol><li><strong>Message</strong> :消息体，可携带一些信息，在不同线程之间进行传递数据</li><li><strong>Handler</strong> :消息 发送/处理 者，可通过Handler.sendMessage()来发送数据，也可以在handlerMesage中处理数据</li><li><strong>MessageQueue</strong> :消息队列，里面存放等待处理的消息</li><li><strong>Looper</strong> : MessageQueue的管家 用来开启一个无限循环，不停的查看MessageQueue中是否还有信息，如果存在，则取出给Handler进行处理。</li></ol></li></ul><ol start="3"><li>代码展示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">            textView.setText((String) msg.obj);</span><br><span class="line">            <span class="comment">//在handleMessage中是属于主线程</span></span><br><span class="line">            <span class="comment">//就可以从Message中取出传递的消息，赋值到TextView上去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = findViewById(R.id.title);</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//在子线程中想要更改UI，那么就只能通知Handler来更改UI</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">            message.obj = <span class="string">&quot;这是一个消息&quot;</span>;</span><br><span class="line">            handler.sendMessage(message);</span><br><span class="line">            <span class="comment">//这里向Handler传递了一个Message，Message里包含了一段文字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><ol><li>介绍：相比    Thread来说，AsyncTask将方便很多，不需要复杂的通知Handler进行UI操作，全部都可以在AsyncTask中完成</li><li>使用起来也很简单，创建一个类继承AsyncTask并传递3个参数即可，下面将介绍AsyncTask的3个需要重写的方法<ul><li><strong>onPreExecute</strong>:此方法处于主线程，可进行一些UI初始化操作，比如说初始化进度条</li><li><strong>doInBackground</strong>:此方法处于子线程，用于进行一些耗时操作</li><li><strong>onProgressUpdate</strong>:此方法处于主线程，可进行UI操作，并且如果设置了返回值，将会不停的在doInBackground运行时返回结果</li></ul></li><li>下面将以下载功能并且更新进度条为例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskDome</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ProgressDialog progressDialog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_async_task_dome); </span><br><span class="line">        progressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">new</span> Download().execute(<span class="string">&quot;下载地址&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Download</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            progressDialog.show();</span><br><span class="line">            <span class="comment">//初始化进度条</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里假装在进行下载</span></span><br><span class="line">            Uri uri = Uri.parse(strings[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... integers)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里对进度条进行更新进度</span></span><br><span class="line">            progressDialog.setMessage(String.valueOf(integers[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子就完成了在子线程中更新UI</p>]]></content>
    
    
    
    <tags>
      
      <tag>Thread</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Room数据库的使用</title>
    <link href="/2020/11/21/Room%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/21/Room%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="关于Android官方的Room数据库框架的使用"><a href="#关于Android官方的Room数据库框架的使用" class="headerlink" title="关于Android官方的Room数据库框架的使用"></a>关于Android官方的Room数据库框架的使用</h2><h6 id="关于Room"><a href="#关于Room" class="headerlink" title="关于Room"></a>关于Room</h6><p> Room是一个对象关系映射(ORM)库。Room抽象了SQLite的使用，可以在充分利用SQLite的同时访问流畅的数据库。<br> Room由三个重要的组件组成：Database、Entity、DAO</p><ul><li>Database：包含数据库持有者，并作为与应用持久关联数据的底层连接的主要访问点。而且Database对应的类必须满足下面几个条件：<br> 1. 必须是abstract类而且的extends RoomDatabase。<ol start="2"><li>必须在类头的注释中包含与数据库关联的实体列表(Entity对应的类)。</li><li>包含一个具有0个参数的抽象方法，并返回用@Dao注解的类。</li><li>在运行时，你可以通过Room.databaseBuilder() 或者 Room.inMemoryDatabaseBuilder()获取Database实例。</li></ol></li><li>Entity：代表数据库中某个表的实体类。</li><li>DAO：包含用于访问数据库的方法。</li></ul><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def room_version &#x3D; &quot;2.2.5&quot;</span><br><span class="line">implementation &quot;androidx.room:room-runtime:$room_version&quot;</span><br><span class="line">annotationProcessor &quot;androidx.room:room-compiler:$room_version&quot;</span><br></pre></td></tr></table></figure><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ol><li>首先创建一个Bean类，用来做为数据库的表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@Entity(indices &#x3D; &#123;@Index(&quot;BookName&quot;)&#125;)</span><br><span class="line">public class BookBean &#123;</span><br><span class="line"></span><br><span class="line">    public BookBean()&#123; &#125;</span><br><span class="line"></span><br><span class="line">    public BookBean(String name,String autohor,Data data)&#123;</span><br><span class="line">        this.BookName &#x3D; name;</span><br><span class="line">        this.BookAuthor &#x3D; autohor;</span><br><span class="line">        this.data &#x3D; data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PrimaryKey(autoGenerate &#x3D; true)</span><br><span class="line">    private int BookId;</span><br><span class="line"></span><br><span class="line">    private String BookName;</span><br><span class="line">    private String BookAuthor;</span><br><span class="line">    private static Data data;</span><br><span class="line"></span><br><span class="line">    public int getBookId() &#123;</span><br><span class="line">        return BookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookId(int bookId) &#123;</span><br><span class="line">        BookId &#x3D; bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBookName() &#123;</span><br><span class="line">        return BookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookName(String bookName) &#123;</span><br><span class="line">        BookName &#x3D; bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBookAuthor() &#123;</span><br><span class="line">        return BookAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBookAuthor(String bookAuthor) &#123;</span><br><span class="line">        BookAuthor &#x3D; bookAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Data&#123;</span><br><span class="line">        private String userName;</span><br><span class="line">        private int userId;</span><br><span class="line"></span><br><span class="line">        public String getUserName() &#123;</span><br><span class="line">            return userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUserName(String userName) &#123;</span><br><span class="line">            this.userName &#x3D; userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getUserId() &#123;</span><br><span class="line">            return userId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setUserId(int userId) &#123;</span><br><span class="line">            this.userId &#x3D; userId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Entityd的注释代表数据库中某个表的实体类。默认情况下Room会把Entity里面所有的字段对应到表上的每一列。如果需要制定某个字段不作为表中的一列需要添加@Ignore注解。</li><li>@Index(“BookName”)代表设置数据库中的索引</li><li>@PrimaryKey的注释代表数据库中的主键</li><li>@PrimaryKey的（autoGenerate = true）表示主键自增</li></ul></li><li>接下来就是创建数据库管理类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Database(entities &#x3D; &#123;BookBean.class&#125;, version &#x3D; 1)</span><br><span class="line">public abstract class AppDatabase extends RoomDatabase &#123;</span><br><span class="line">    public abstract BookDao userDao();</span><br><span class="line"></span><br><span class="line">    static final Migration MIGRATION_1_2 &#x3D; new Migration(1, 2) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void migrate(SupportSQLiteDatabase database) &#123;</span><br><span class="line">           database.execSQL(&quot;ALTER TABLE bookBean ADD COLUMN  index_name&#39;BookName&#39; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Database表示当前类为数据库管理类</li><li>entities = {BookBean.class}表示数据库相关的所有Entity实体类，他们会转化成数据库里面的表。</li><li>version = 1表示当前数据库的版本（每当数据库更新时，版本号也要对应增加）</li><li>public abstract BookDao userDao() 这个则是对应数据库的操作类</li><li>static final Migration MIGRATION_1_2 = new Migration(1, 2) 这个是指当数据库升级时，从版本1升级到版本2的升级过程</li></ul></li><li>之后就是创建数据库的操作类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface BookDao &#123;</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT * FROM bookbean&quot;)</span><br><span class="line">    Flowable&lt;List&lt;BookBean&gt;&gt; getAll();</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT * FROM bookbean WHERE BookId IN (:userIds)&quot;)</span><br><span class="line">    List&lt;BookBean&gt; loadAllByIds(int[] userIds);</span><br><span class="line"></span><br><span class="line">    @Query(&quot;update bookbean set bookauthor &#x3D; :value&quot;)</span><br><span class="line">    void setBookAuthor(boolean value);</span><br><span class="line"></span><br><span class="line">    @Insert</span><br><span class="line">    Completable insertAll(BookBean... users);</span><br><span class="line"></span><br><span class="line">    @Delete</span><br><span class="line">    Completable delete(BookBean user);</span><br><span class="line"></span><br><span class="line">    @Update</span><br><span class="line">    Completable updateUsers(BookBean... users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Dao 表示这个组件代表了作为DAO的类或者接口。DAO是Room的主要组件，负责定义访问数据库的方法。Room使用过程中一般使用抽象DAO类来定义数据库的CRUD操作。DAO可以是一个接口也可以是一个抽象类。如果它是一个抽象类，它可以有一个构造函数，它将RoomDatabase作为其唯一参数。Room在编译时创建每个DAO实。</li><li>@Query对应数据库的查询，后接查询语句</li><li>@Insert对应数据库的插入</li><li>@Delete对应数据库的删除</li><li>@Update对应数据库的更新，每次更新都会将没有涉及到的值进行重置</li><li>Completable返回值是为了和RxJava一起使用，如果不使用RxJava则写成void或者对应类型</li><li>Flowable也是一样，不过这个返回类型是支持背压</li></ul></li><li>在Activity/Fragment中使用<ol><li>首先为了防止重复创建数据库，我们创建一个类继承Application<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyApplication extends Application &#123;</span><br><span class="line">    private static AppDatabase db;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        db &#x3D; Room.databaseBuilder(getApplicationContext(),</span><br><span class="line">                AppDatabase.class, &quot;database-name&quot;)</span><br><span class="line">                &#x2F;&#x2F;.addMigrations(MIGRATION_1_2)</span><br><span class="line">                .build();</span><br><span class="line">        &#x2F;&#x2F;.allowMainThreadQueries()&#x2F;&#x2F;允许在主线程中查询</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static AppDatabase getDatabase()&#123;</span><br><span class="line">        return db;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在需要的Activity/Fragment中获取数据库实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">   private ActivityMainBinding binding;</span><br><span class="line">   private AppDatabase db;</span><br><span class="line">   </span><br><span class="line">    @Override</span><br><span class="line">   protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       binding &#x3D; DataBindingUtil.setContentView(this, R.layout.activity_main);</span><br><span class="line">       db &#x3D; MyApplication.getDatabase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="RxJava-Room"><a href="#RxJava-Room" class="headerlink" title="RxJava+Room"></a>RxJava+Room</h5>一般来说对数据库进行操作是不运行在主线程中执行的，因为当进行大量数据库操作时，可能会堵塞主线程，所以可以配合RxJava来使用</li></ol></li></ol><h5 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; RxJava support for Room</span><br><span class="line">   implementation &quot;androidx.room:room-rxjava2:2.2.5&quot;</span><br><span class="line"></span><br><span class="line">   implementation &#39;io.reactivex.rxjava2:rxjava:2.0.6&#39;</span><br><span class="line">   implementation &#39;io.reactivex.rxjava2:rxandroid:2.0.1&#39;</span><br></pre></td></tr></table></figure><h5 id="使用RxJava来进行数据库操作"><a href="#使用RxJava来进行数据库操作" class="headerlink" title="使用RxJava来进行数据库操作"></a>使用RxJava来进行数据库操作</h5><ul><li>增<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Completable completable &#x3D; db.userDao().insertAll(new BookBean(&quot;HTML(&quot; + i + &quot;)&quot;, &quot;jjj&quot;, data));</span><br><span class="line">                  completable.subscribeOn(Schedulers.io())</span><br><span class="line">                          .subscribe(new CompletableObserver() &#123;</span><br><span class="line">                              @Override</span><br><span class="line">                              public void onSubscribe(Disposable d) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                              @Override</span><br><span class="line">                              public void onComplete() &#123;</span><br><span class="line">                                  Log.e(&quot;why&quot;, &quot;onClick: 插入成功&quot;);</span><br><span class="line">                              &#125;</span><br><span class="line"></span><br><span class="line">                              @Override</span><br><span class="line">                              public void onError(Throwable e) &#123;</span><br><span class="line">                                  Log.e(&quot;why&quot;, &quot;onClick: 插入失败&quot; + e);</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;);</span><br></pre></td></tr></table></figure>上述操作是往数据库中添加了”一本”书的信息</li><li>删<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Completable comparable &#x3D; db.userDao().delete(bean);</span><br><span class="line">                   comparable.subscribeOn(Schedulers.io())</span><br><span class="line">                           .subscribe(new CompletableObserver() &#123;</span><br><span class="line">                               @Override</span><br><span class="line">                               public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onComplete() &#123;</span><br><span class="line">                                   Log.e(&quot;why&quot;, &quot;onClick: 删除数据成功&quot;);</span><br><span class="line">                               &#125;</span><br><span class="line"></span><br><span class="line">                               @Override</span><br><span class="line">                               public void onError(Throwable e) &#123;</span><br><span class="line">                                   Log.e(&quot;why&quot;, &quot;onClick: 删除数据失败&quot; + e);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;);</span><br></pre></td></tr></table></figure>上述操作是往数据库中删除了”全部”书的信息</li><li>改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for (BookBean bean : bookBean) &#123;</span><br><span class="line">                    bean.setBookName(&quot;JAVA&quot;);</span><br><span class="line">                    Completable completable &#x3D; db.userDao().updateUsers(bean);</span><br><span class="line">                    completable.subscribeOn(Schedulers.io())</span><br><span class="line">                            .subscribe(new CompletableObserver() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                @Override</span><br><span class="line">                                public void onComplete() &#123;</span><br><span class="line">                                    Log.e(&quot;why&quot;, &quot;onClick: 更新数据成功&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                @Override</span><br><span class="line">                                public void onError(Throwable e) &#123;</span><br><span class="line">                                    Log.e(&quot;why&quot;, &quot;onClick: 更新数据失败&quot; + e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>上述操作是将查询到的数据循环改变BookName的值，在通过数据库操作来更新”全部”数据</li><li>查<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.userDao().getAll()</span><br><span class="line">                       .subscribeOn(Schedulers.io())</span><br><span class="line">                       .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                       .subscribe(new Consumer&lt;List&lt;BookBean&gt;&gt;() &#123;</span><br><span class="line">                           @Override</span><br><span class="line">                           public void accept(List&lt;BookBean&gt; bookBeans) throws Exception &#123;</span><br><span class="line">                               bookBean &#x3D; bookBeans;</span><br><span class="line">                               for (BookBean bean : bookBeans) &#123;</span><br><span class="line">                                   Log.e(&quot;why&quot;, &quot;onClick: 查询成功,数据为&quot; + bean.toString());</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br></pre></td></tr></table></figure>上述操作是将查询到的数据”全部”保存起来</li></ul><blockquote><p>以上就是全部内容</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广播通知强制下线</title>
    <link href="/2020/10/21/%E5%B9%BF%E6%92%AD%E9%80%9A%E7%9F%A5%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF/"/>
    <url>/2020/10/21/%E5%B9%BF%E6%92%AD%E9%80%9A%E7%9F%A5%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="关于使用广播通知强制下线的功能"><a href="#关于使用广播通知强制下线的功能" class="headerlink" title="关于使用广播通知强制下线的功能"></a>关于使用广播通知强制下线的功能</h2><h5 id="关于在那里创建广播接收器"><a href="#关于在那里创建广播接收器" class="headerlink" title="关于在那里创建广播接收器"></a>关于在那里创建广播接收器</h5><p>例子：一个账号已经登录，在另一个手机上再一次登录这个账号，这时候就需要提醒用户“账号有在别处登录，请重新登录”，强制下线，跳转到登录界面。</p><ul><li>个人认为应该在Base类中创建广播接收器，并销毁，这样就可以在任何地方响应广播</li><li>广播类型应该为动态添加</li></ul><p>下面我将在BaseActivity中创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private JudgeLoginReceiver judgeLoginReceiver;</span><br><span class="line">public static String signInAction &#x3D; &quot;LOGIN.DilDil.ACTION&quot;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">   protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       onCreateView(savedInstanceState);</span><br><span class="line">   ...</span><br><span class="line">       initBroadcastReceiver();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   private void initBroadcastReceiver() &#123;</span><br><span class="line">       if (judgeLoginReceiver !&#x3D; null) &#123;</span><br><span class="line">           IntentFilter intentFilter &#x3D; new IntentFilter();</span><br><span class="line">           intentFilter.addAction(signInAction);</span><br><span class="line">           registerReceiver(judgeLoginReceiver, intentFilter);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           judgeLoginReceiver &#x3D; new JudgeLoginReceiver();</span><br><span class="line">           IntentFilter intentFilter &#x3D; new IntentFilter();</span><br><span class="line">           intentFilter.addAction(signInAction);</span><br><span class="line">           registerReceiver(judgeLoginReceiver, intentFilter);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    @Override</span><br><span class="line">   protected void onDestroy() &#123;</span><br><span class="line">       if (judgeLoginReceiver !&#x3D; null) &#123;</span><br><span class="line">           unregisterReceiver(judgeLoginReceiver);</span><br><span class="line">       &#125;</span><br><span class="line">       super.onDestroy();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，我首先创建了要响应的Action（signInAction），之后在onCreate中初始化广播。<br>在initBroadcastReceiver中，为了防止反复创建，于是判断是否已经存在，没有就创建，有就直接注册。别忘了要在onDestroy取消注册</p><h5 id="接下来还需要创建一个类来继承BroadcastReceiver"><a href="#接下来还需要创建一个类来继承BroadcastReceiver" class="headerlink" title="接下来还需要创建一个类来继承BroadcastReceiver"></a>接下来还需要创建一个类来继承BroadcastReceiver</h5><p>那么创建一个名为JudgeLoginReceiver的类来继承BroadcastReceiver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private static class JudgeLoginReceiver extends BroadcastReceiver &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            new MaterialDialog.Builder(context)</span><br><span class="line">                    .title(R.string.loginWarning)</span><br><span class="line">                    .content(R.string.thisAccountHasSigned)</span><br><span class="line">                    .positiveText(R.string.determine)</span><br><span class="line">                    .cancelable(false)</span><br><span class="line">                    .onPositive(new MaterialDialog.SingleButtonCallback() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) &#123;</span><br><span class="line">                            ApiService apiService &#x3D; ApiEngine.getInstance().getApiService();</span><br><span class="line">                            apiService.Logout()</span><br><span class="line">                                    .subscribeOn(Schedulers.io())</span><br><span class="line">                                    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                                    .subscribe(new Observer&lt;LogoutBean&gt;() &#123;</span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onSubscribe(@io.reactivex.annotations.NonNull Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onNext(@io.reactivex.annotations.NonNull LogoutBean logoutBean) &#123;</span><br><span class="line">                                            SharePreferenceUtil.getInstance(context).remove(&quot;cookie&quot;);</span><br><span class="line">                                            ActivityUtils.startActivity(LoginActivity.class);</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onError(@io.reactivex.annotations.NonNull Throwable e) &#123;</span><br><span class="line">                                            XToastUtils.error(R.string.networkError);</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        @Override</span><br><span class="line">                                        public void onComplete() &#123;</span><br><span class="line"></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继承BroadcastReceiver之后需要重写onReceive方法，这个方法是用来处理接收到广播之后的行为。<br>我在onReceive中创建了一个提示框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title 是提示框的标题</span><br><span class="line">content 是内容</span><br><span class="line">positiveText 是确定按钮的文字</span><br><span class="line">cancelable 是指是否可以点击外面退出</span><br><span class="line">onPositive 是指确实按钮的点击监听</span><br><span class="line">不写取消按钮就默认没有取消按钮</span><br></pre></td></tr></table></figure><p>接下来，我在点击事件中获取Api接口，调用了退出登录的方法，并处理结果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Function</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于DanmakuVideoPlayer的使用</title>
    <link href="/2020/10/10/%E5%85%B3%E4%BA%8EDanmakuVideoPlayer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/10/10/%E5%85%B3%E4%BA%8EDanmakuVideoPlayer%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="关于DanmakuVideoPlayer的使用"><a href="#关于DanmakuVideoPlayer的使用" class="headerlink" title="关于DanmakuVideoPlayer的使用"></a>关于DanmakuVideoPlayer的使用</h2><h5 id="介绍DanmakuVideoPlayer"><a href="#介绍DanmakuVideoPlayer" class="headerlink" title="介绍DanmakuVideoPlayer"></a>介绍DanmakuVideoPlayer</h5><ul><li><p>基于IJKPlayer（兼容系统MediaPlayer与EXOPlayer2），实现了多功能的视频播放器<br>（包括弹幕）</p><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5></li><li><p>A、直接引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;完整版引入</span><br><span class="line">implementation &#39;com.shuyu:GSYVideoPlayer:7.1.6&#39;</span><br></pre></td></tr></table></figure></li><li><p>B、添加java和你想要的so支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-java:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;是否需要ExoPlayer模式</span><br><span class="line">implementation &#39;com.shuyu:GSYVideoPlayer-exo2:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据你的需求ijk模式的so</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-armv5:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-armv7a:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-arm64:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-x64:7.1.6&#39;</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-x86:7.1.6&#39;</span><br></pre></td></tr></table></figure></li><li><p>支持其他格式协议的（mpeg，rtsp, concat、crypto协议）<br>A、B普通版本支持263/264/265等，对于mpeg编码会有声音无画面情况。 C 引入的so支持mpeg编码和其他补充协议，但是so包相对变大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-java:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;是否需要ExoPlayer模式</span><br><span class="line">implementation &#39;com.shuyu:GSYVideoPlayer-exo2:7.1.6&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;更多ijk的编码支持</span><br><span class="line">implementation &#39;com.shuyu:gsyVideoPlayer-ex_so:7.1.6&#39;</span><br></pre></td></tr></table></figure></li></ul><h5 id="activity-fragment中使用"><a href="#activity-fragment中使用" class="headerlink" title="activity/fragment中使用"></a>activity/fragment中使用</h5><ul><li>创建一个播放器类，继承StandardGSYVideoPlayer，并且创建播放器的布局。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class DanmakuVideoPlayer extends StandardGSYVideoPlayer &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>布局文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:background&#x3D;&quot;@android:color&#x2F;black&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;surface_container&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;thumbImage&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:scaleType&#x3D;&quot;centerCrop&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;弹幕控件（可直接使用）</span><br><span class="line">    &lt;master.flame.danmaku.ui.widget.DanmakuView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;danmaku_view&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_above&#x3D;&quot;@+id&#x2F;layout_bottom&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;thumb&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_alignParentStart&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentLeft&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentTop&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentEnd&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentRight&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class="line">        android:background&#x3D;&quot;#000000&quot;</span><br><span class="line">        android:scaleType&#x3D;&quot;fitCenter&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;底部区域（底部区域有分成两层，一层进度条，一层播放控制）</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;layout_bottom&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;seekbar&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;35dp&quot;</span><br><span class="line">            android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">            android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">            android:paddingRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Video_SeekBar_play&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:src&#x3D;&quot;@mipmap&#x2F;play&quot;</span><br><span class="line">                android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;SeekBar</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;progress&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">                android:layout_weight&#x3D;&quot;1.0&quot;</span><br><span class="line">                android:background&#x3D;&quot;@null&quot;</span><br><span class="line">                android:max&#x3D;&quot;100&quot;</span><br><span class="line">                android:maxHeight&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:minHeight&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:paddingTop&#x3D;&quot;8dp&quot;</span><br><span class="line">                android:paddingBottom&#x3D;&quot;8dp&quot;</span><br><span class="line">                android:progressDrawable&#x3D;&quot;@drawable&#x2F;seekbar_color&quot;</span><br><span class="line">                android:thumb&#x3D;&quot;@mipmap&#x2F;seekbar_img&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;fullscreen&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                android:scaleType&#x3D;&quot;center&quot;</span><br><span class="line">                android:src&#x3D;&quot;@drawable&#x2F;crop_free_24&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;Bottom_controller&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;25dp&quot;</span><br><span class="line">            android:layout_gravity&#x3D;&quot;center&quot;</span><br><span class="line">            android:layout_marginBottom&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">            android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">            android:paddingRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Video_play&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_8&quot;</span><br><span class="line">                android:src&#x3D;&quot;@mipmap&#x2F;play&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:src&#x3D;&quot;@drawable&#x2F;skip_next_24&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;current&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:text&#x3D;&quot;00:00&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;4dp&quot;</span><br><span class="line">                android:text&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;total&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:text&#x3D;&quot;00:00&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;definition_off&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;50dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">                android:src&#x3D;&quot;@mipmap&#x2F;definition&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.gcssloop.widget.RCRelativeLayout</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Re_video_cover&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">                app:round_corner&#x3D;&quot;5dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:alpha&#x3D;&quot;0.3&quot;</span><br><span class="line">                    android:src&#x3D;&quot;#fff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:id&#x3D;&quot;@+id&#x2F;send_danmaku&quot;</span><br><span class="line">                    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">                    android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_20&quot;</span><br><span class="line">                    android:gravity&#x3D;&quot;center|left&quot;</span><br><span class="line">                    android:paddingLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                    android:text&#x3D;&quot;@string&#x2F;BulletScreenTips&quot;</span><br><span class="line">                    android:textColor&#x3D;&quot;#b1b0b5&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;com.gcssloop.widget.RCRelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Double_speed&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;50dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;20dp&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">                android:text&#x3D;&quot;@string&#x2F;DoubleSpeed&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;definition&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;50dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;20dp&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ProgressBar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;bottom_progressbar&quot;</span><br><span class="line">        style&#x3D;&quot;?android:attr&#x2F;progressBarStyleHorizontal&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;1.5dp&quot;</span><br><span class="line">        android:layout_alignParentBottom&#x3D;&quot;true&quot;</span><br><span class="line">        android:max&#x3D;&quot;100&quot;</span><br><span class="line">        android:progressDrawable&#x3D;&quot;@drawable&#x2F;video_progress&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;back_tiny&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;24dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;24dp&quot;</span><br><span class="line">        android:layout_marginLeft&#x3D;&quot;6dp&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;6dp&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;顶部区域(相应的控件只能写在名为layout_top的父布局下面)</span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;layout_top&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:background&#x3D;&quot;@drawable&#x2F;video_title_bg&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center_vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;first_floor&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;@dimen&#x2F;dp_48&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;back&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;48dp&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;48dp&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">            android:scaleType&#x3D;&quot;centerInside&quot;</span><br><span class="line">            android:src&#x3D;&quot;@drawable&#x2F;video_back&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;title&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">            android:layout_toRightOf&#x3D;&quot;@+id&#x2F;back&quot;</span><br><span class="line">            android:paddingLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">            android:textColor&#x3D;&quot;@android:color&#x2F;white&quot;</span><br><span class="line">            android:textSize&#x3D;&quot;18sp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;LinearLayout</span><br><span class="line">                    android:id&#x3D;&quot;@+id&#x2F;Sanlians&quot;</span><br><span class="line">                    android:layout_marginEnd&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                    android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">                    android:layout_alignParentEnd&#x3D;&quot;true&quot;</span><br><span class="line">                    android:gravity&#x3D;&quot;right|center_vertical&quot;</span><br><span class="line">                    android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                    android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_like&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@mipmap&#x2F;like_while&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_coin&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@mipmap&#x2F;coin_while&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_forward&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@mipmap&#x2F;forward_while&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ImageView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Dm_more&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_20&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                        android:src&#x3D;&quot;@drawable&#x2F;more_vert_24&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">        &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;UPImage&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;@dimen&#x2F;dp_120&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;@dimen&#x2F;dp_30&quot;</span><br><span class="line">            android:layout_below&#x3D;&quot;@+id&#x2F;first_floor&quot;</span><br><span class="line">            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_20&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:alpha&#x3D;&quot;0.5&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:background&#x3D;&quot;@drawable&#x2F;file_background_circular_grey&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.android.liuzhuang.rcimageview.CircleImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;up_img&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;@dimen&#x2F;dp_30&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;@dimen&#x2F;dp_30&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;up_name&quot;</span><br><span class="line">                android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">                android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">                android:paddingRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:text&#x3D;&quot;UP主名称&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;5dp&quot;</span><br><span class="line">                android:layout_toRightOf&#x3D;&quot;@+id&#x2F;up_img&quot;</span><br><span class="line">                android:textColor&#x3D;&quot;@color&#x2F;White&quot;</span><br><span class="line">                android:textSize&#x3D;&quot;16sp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;moe.codeest.enviews.ENDownloadView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;loading&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;28dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;28dp&quot;</span><br><span class="line">        android:layout_centerHorizontal&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;invisible&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;moe.codeest.enviews.ENPlayView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;start&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;60dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;60dp&quot;</span><br><span class="line">        android:layout_centerHorizontal&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_vertical&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;small_close&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:paddingLeft&#x3D;&quot;10dp&quot;</span><br><span class="line">        android:paddingTop&#x3D;&quot;10dp&quot;</span><br><span class="line">        android:scaleType&#x3D;&quot;centerInside&quot;</span><br><span class="line">        android:src&#x3D;&quot;@drawable&#x2F;video_small_close&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;lock_screen&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;30dp&quot;</span><br><span class="line">        android:layout_alignParentRight&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical&#x3D;&quot;true&quot;</span><br><span class="line">        android:layout_marginRight&#x3D;&quot;50dp&quot;</span><br><span class="line">        android:scaleType&#x3D;&quot;centerInside&quot;</span><br><span class="line">        android:src&#x3D;&quot;@drawable&#x2F;unlock&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;小图预览</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;preview_layout&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;@dimen&#x2F;seek_bar_image&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;100dp&quot;</span><br><span class="line">        android:layout_above&#x3D;&quot;@+id&#x2F;layout_bottom&quot;</span><br><span class="line">        android:visibility&#x3D;&quot;gone&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;preview_image&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:background&#x3D;&quot;#000000&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure>次布局包括 顶部、播放/暂停按钮、底部、弹幕、画面。对应的区域控件只能写在对应的区域，<br>否则后期无法控制隐藏与显示。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XUI的BaseRecyclerAdapter</title>
    <link href="/2020/10/09/XUI%E7%9A%84BaseRecyclerAdapter/"/>
    <url>/2020/10/09/XUI%E7%9A%84BaseRecyclerAdapter/</url>
    
    <content type="html"><![CDATA[<h2 id="关于XUI的BaseRecyclerAdapter的使用"><a href="#关于XUI的BaseRecyclerAdapter的使用" class="headerlink" title="关于XUI的BaseRecyclerAdapter的使用"></a>关于XUI的BaseRecyclerAdapter的使用</h2><h6 id="正常使用："><a href="#正常使用：" class="headerlink" title="正常使用："></a>正常使用：</h6><ul><li>创建一个适配器来继承BaseRecyclerAdapter，想要传入参数（也就是适配器数据）  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class RecommendedVideoAdapter extends BaseRecyclerAdapter&lt;RecommendVideoBean.BeanData&gt;</span><br></pre></td></tr></table></figure></li><li>创建构造方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public RecommendedVideoAdapter(Context context,VideoChoiceDialog videoChoiceDialog) &#123;</span><br><span class="line">    this.videoChoiceDialog &#x3D; videoChoiceDialog;</span><br><span class="line">    mContext &#x3D; context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 将上下文对象传入进来，方便之后的使用</li><li>在bindData中写处理数据的操作  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Override</span><br><span class="line">protected void bindData(@NonNull RecyclerViewHolder holder, int position, RecommendVideoBean.BeanData item) &#123;</span><br><span class="line">    cover &#x3D; holder.findViewById(R.id.Re_cover);</span><br><span class="line">    play_volume &#x3D; holder.findViewById(R.id.Re_play_volume);</span><br><span class="line">    barrage_volume &#x3D; holder.findViewById(R.id.Re_barrage_volume);</span><br><span class="line">    Re_video &#x3D; holder.findViewById(R.id.Re_video_cover);</span><br><span class="line">    title &#x3D; holder.findViewById(R.id.Re_title);</span><br><span class="line">    more &#x3D; holder.findViewById(R.id.Re_more);</span><br><span class="line">    Re_video.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick(View v) &#123;</span><br><span class="line">            Intent intent &#x3D; new Intent(mContext, VideoActivity.class);</span><br><span class="line">            intent.putExtra(&quot;id&quot;, videoBean.getData().get(position).getId());</span><br><span class="line">            intent.putExtra(&quot;uid&quot;, videoBean.getData().get(position).getUid());</span><br><span class="line">            mContext.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    if (item !&#x3D; null) &#123;</span><br><span class="line">        initData(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void initData(RecommendVideoBean.BeanData item) &#123;</span><br><span class="line">    Glide.with(mContext)</span><br><span class="line">            .load(item.getCover())</span><br><span class="line">            .into(cover);</span><br><span class="line">    play_volume.setText(item.getPlayNum() + &quot;&quot;);</span><br><span class="line">    barrage_volume.setText(item.getDanmunum() + &quot;&quot;);</span><br><span class="line">    title.setText(item.getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 包括获取控件和初始化数据<h6 id="在Avtivity-Fragment中的使用："><a href="#在Avtivity-Fragment中的使用：" class="headerlink" title="在Avtivity/Fragment中的使用："></a>在Avtivity/Fragment中的使用：</h6></li><li>初始化<ol><li>获取RecyclerView控件</li><li>设置RecyclerView的排列方式</li><li>创建适配器对象</li><li>RecyclerView设置适配器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GridLayoutManager layoutManager1 &#x3D; new GridLayoutManager(getContext(), 2);</span><br><span class="line">      adapter &#x3D; new RecommendedVideoAdapter(getContext(), videoChoiceDialog);</span><br><span class="line">      binding.ReRecy.setLayoutManager(layoutManager1);</span><br><span class="line">      binding.ReRecy.setAdapter(adapter);</span><br></pre></td></tr></table></figure></li></ol></li><li>加载数据<br>直接调用适配器的加载数据的方法，刷新也是一样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adapter.loadMore(videoBean.getData());</span><br><span class="line">&#x2F;&#x2F;loadMore一般是传入一个list（加载）</span><br><span class="line">for (RecommendVideoBean.BeanData datum : videoBean.getData()) &#123;</span><br><span class="line">           adapter.add(0, datum);</span><br><span class="line">       &#125;</span><br><span class="line">&#x2F;&#x2F;add一般是传入一个对象（在末尾添加一个）</span><br><span class="line">adapter.refresh(videoBean.getData());</span><br><span class="line">&#x2F;&#x2F;refresh和加载差不多（刷新）</span><br></pre></td></tr></table></figure><h6 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h6></li><li>如果想要有item加载时的动画，那么在调用adapter加载数据的时候，就不能使用 loadMore ，必须使用 add 来一个一个添加，否则是没有动画的</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Android</tag>
      
      <tag>Recycler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SmartRefreshLayout的使用</title>
    <link href="/2020/09/22/SmartRefreshLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/22/SmartRefreshLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SmartRefreshLayout"><a href="#SmartRefreshLayout" class="headerlink" title="SmartRefreshLayout"></a>SmartRefreshLayout</h1><p>本编将讲解SmartRefreshLayout的使用，来达成进入页面时，调用自动加载来加载数据的效果。</p><h6 id="SmartRefreshLayout的Xml使用："><a href="#SmartRefreshLayout的Xml使用：" class="headerlink" title="SmartRefreshLayout的Xml使用："></a>SmartRefreshLayout的Xml使用：</h6><ul><li>SmartRefreshLayout是一个父类，它只允许有一个子类被它包裹，不能有两个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.scwang.smartrefresh.layout.SmartRefreshLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;swipe&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">              android:id&#x3D;&quot;@+id&#x2F;Hot_Recy&quot;</span><br><span class="line">              android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">              android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">              android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">              android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">              android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">              app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;com.scwang.smartrefresh.layout.SmartRefreshLayout&gt;</span><br></pre></td></tr></table></figure><p>这样就给这个页面添加了个刷新功能（包括，下拉刷新，上拉加载）</p><ul><li>接下来就是对SmartRefreshLayout的属性进行设置<ol><li>推荐进行全局设置，在MyApplication里进行设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MyApplication extends Application &#123;</span><br><span class="line">...</span><br><span class="line">static &#123;&#x2F;&#x2F;使用static代码段可以防止内存泄漏</span><br><span class="line">    &#x2F;&#x2F;设置全局默认配置（优先级最低，会被其他设置覆盖）</span><br><span class="line">    SmartRefreshLayout.setDefaultRefreshInitializer(new DefaultRefreshInitializer() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void initialize(@NonNull Context context, @NonNull RefreshLayout layout) &#123;</span><br><span class="line">            &#x2F;&#x2F;开始设置全局的基本参数（可以被下面的DefaultRefreshHeaderCreator覆盖）</span><br><span class="line">            layout.setEnableLoadMore(false);</span><br><span class="line">            layout.setDisableContentWhenRefresh(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;全局设置默认的 Header</span><br><span class="line">    SmartRefreshLayout.setDefaultRefreshHeaderCreator(new DefaultRefreshHeaderCreator() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public RefreshHeader createRefreshHeader(Context context, RefreshLayout layout) &#123;</span><br><span class="line">            &#x2F;&#x2F;开始设置全局的基本参数（这里设置的属性只跟下面的MaterialHeader绑定，其他Header不会生效，能覆盖DefaultRefreshInitializer的属性和Xml设置的属性）</span><br><span class="line">            layout.setEnableHeaderTranslationContent(false);</span><br><span class="line">            return new MaterialHeader(context).setColorSchemeResources(R.color.Pink,R.color.While,R.color.While);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我这里是设置了SmartRefreshLayout它的下拉刷新样式，并且取消了上拉加载，但是这里设置的属性优先级是最低的，别的页面如果进行覆写，则会被覆盖</li></ol></li></ul><h6 id="SmartRefreshLayout的java代码使用："><a href="#SmartRefreshLayout的java代码使用：" class="headerlink" title="SmartRefreshLayout的java代码使用："></a>SmartRefreshLayout的java代码使用：</h6><ul><li>首先获取控件，这里因为全篇都是使用的DataBinding，所有就不用获取控件了，之后设置SmartRefreshLayout的下拉刷新监听，在监听方法里面写入你的加载数据的方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binding.swipe.setOnRefreshListener(new OnRefreshListener() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onRefresh(@NonNull RefreshLayout refreshLayout) &#123;</span><br><span class="line">                initDatas();</span><br><span class="line">                isFirst &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>我这里是调用了加载数据的方法，并且将isFirst设置为false，这样是用来区分第一次加载和手动下拉加载</li><li>之后还需要在onCreate中设置SmartRefreshLayout自动刷新，这样在进入avtivity/Fragment的时候就会进行自动的刷新，并调用刷新监听里设置的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void initData() &#123;</span><br><span class="line">        binding.swipe.autoRefresh();&#x2F;&#x2F;自动刷新</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>这样基本上就完成了想要的效果。接下来就给出SmartRefreshLayout的属性。</li><li>SmartRefreshLayout属性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class RefreshActivity extends Activity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        &#x2F;&#x2F;下面示例中的值等于默认值</span><br><span class="line">        RefreshLayout refreshLayout &#x3D; (RefreshLayout)findViewById(R.id.refreshLayout);</span><br><span class="line">        refreshLayout.setPrimaryColorsId(R.color.colorPrimary, android.R.color.white);</span><br><span class="line">        refreshLayout.setDragRate(0.5f);&#x2F;&#x2F;显示下拉高度&#x2F;手指真实下拉高度&#x3D;阻尼效果</span><br><span class="line">        refreshLayout.setReboundDuration(300);&#x2F;&#x2F;回弹动画时长（毫秒）</span><br><span class="line"></span><br><span class="line">        refreshLayout.setHeaderHeight(100);&#x2F;&#x2F;Header标准高度（显示下拉高度&gt;&#x3D;标准高度 触发刷新）</span><br><span class="line">        refreshLayout.setHeaderHeightPx(100);&#x2F;&#x2F;同上-像素为单位 （V1.1.0删除）</span><br><span class="line">        refreshLayout.setFooterHeight(100);&#x2F;&#x2F;Footer标准高度（显示上拉高度&gt;&#x3D;标准高度 触发加载）</span><br><span class="line">        refreshLayout.setFooterHeightPx(100);&#x2F;&#x2F;同上-像素为单位 （V1.1.0删除）</span><br><span class="line"></span><br><span class="line">        refreshLayout.setFooterHeaderInsetStart(0);&#x2F;&#x2F;设置 Header 起始位置偏移量 1.0.5</span><br><span class="line">        refreshLayout.setFooterHeaderInsetStartPx(0);&#x2F;&#x2F;同上-像素为单位 1.0.5 （V1.1.0删除）</span><br><span class="line">        refreshLayout.setFooterFooterInsetStart(0);&#x2F;&#x2F;设置 Footer 起始位置偏移量 1.0.5</span><br><span class="line">        refreshLayout.setFooterFooterInsetStartPx(0);&#x2F;&#x2F;同上-像素为单位 1.0.5 （V1.1.0删除）</span><br><span class="line"></span><br><span class="line">        refreshLayout.setHeaderMaxDragRate(2);&#x2F;&#x2F;最大显示下拉高度&#x2F;Header标准高度</span><br><span class="line">        refreshLayout.setFooterMaxDragRate(2);&#x2F;&#x2F;最大显示下拉高度&#x2F;Footer标准高度</span><br><span class="line">        refreshLayout.setHeaderTriggerRate(1);&#x2F;&#x2F;触发刷新距离 与 HeaderHeight 的比率1.0.4</span><br><span class="line">        refreshLayout.setFooterTriggerRate(1);&#x2F;&#x2F;触发加载距离 与 FooterHeight 的比率1.0.4</span><br><span class="line"></span><br><span class="line">        refreshLayout.setEnableRefresh(true);&#x2F;&#x2F;是否启用下拉刷新功能</span><br><span class="line">        refreshLayout.setEnableLoadMore(false);&#x2F;&#x2F;是否启用上拉加载功能</span><br><span class="line">        refreshLayout.setEnableAutoLoadMore(true);&#x2F;&#x2F;是否启用列表惯性滑动到底部时自动加载更多</span><br><span class="line">        refreshLayout.setEnablePureScrollMode(false);&#x2F;&#x2F;是否启用纯滚动模式</span><br><span class="line">        refreshLayout.setEnableNestedScroll(false);&#x2F;&#x2F;是否启用嵌套滚动</span><br><span class="line">        refreshLayout.setEnableOverScrollBounce(true);&#x2F;&#x2F;是否启用越界回弹</span><br><span class="line">        refreshLayout.setEnableScrollContentWhenLoaded(true);&#x2F;&#x2F;是否在加载完成时滚动列表显示新的内容</span><br><span class="line">        refreshLayout.setEnableHeaderTranslationContent(true);&#x2F;&#x2F;是否下拉Header的时候向下平移列表或者内容</span><br><span class="line">        refreshLayout.setEnableFooterTranslationContent(true);&#x2F;&#x2F;是否上拉Footer的时候向上平移列表或者内容</span><br><span class="line">        refreshLayout.setEnableLoadMoreWhenContentNotFull(true);&#x2F;&#x2F;是否在列表不满一页时候开启上拉加载功能</span><br><span class="line">        refreshLayout.setEnableFooterFollowWhenLoadFinished(false);&#x2F;&#x2F;是否在全部加载结束之后Footer跟随内容1.0.4</span><br><span class="line">        refreshLayout.setEnableOverScrollDrag(false);&#x2F;&#x2F;是否启用越界拖动（仿苹果效果）1.0.4</span><br><span class="line"></span><br><span class="line">        refreshLayout.setEnableScrollContentWhenRefreshed(true);&#x2F;&#x2F;是否在刷新完成时滚动列表显示新的内容 1.0.5</span><br><span class="line">        refreshLayout.srlEnableClipHeaderWhenFixedBehind(true);&#x2F;&#x2F;是否剪裁Header当时样式为FixedBehind时1.0.5</span><br><span class="line">        refreshLayout.srlEnableClipFooterWhenFixedBehind(true);&#x2F;&#x2F;是否剪裁Footer当时样式为FixedBehind时1.0.5</span><br><span class="line"></span><br><span class="line">        refreshLayout.setDisableContentWhenRefresh(false);&#x2F;&#x2F;是否在刷新的时候禁止列表的操作</span><br><span class="line">        refreshLayout.setDisableContentWhenLoading(false);&#x2F;&#x2F;是否在加载的时候禁止列表的操作</span><br><span class="line"></span><br><span class="line">        refreshLayout.setOnMultiPurposeListener(new SimpleMultiPurposeListener());&#x2F;&#x2F;设置多功能监听器</span><br><span class="line">        refreshLayout.setScrollBoundaryDecider(new ScrollBoundaryDecider());&#x2F;&#x2F;设置滚动边界判断</span><br><span class="line">        refreshLayout.setScrollBoundaryDecider(new ScrollBoundaryDeciderAdapter());&#x2F;&#x2F;自定义滚动边界</span><br><span class="line"></span><br><span class="line">        refreshLayout.setRefreshHeader(new ClassicsHeader(context));&#x2F;&#x2F;设置Header</span><br><span class="line">        refreshLayout.setRefreshFooter(new ClassicsFooter(context));&#x2F;&#x2F;设置Footer</span><br><span class="line">        refreshLayout.setRefreshContent(new View(context));&#x2F;&#x2F;设置刷新Content（用于非xml布局代替addView）1.0.4</span><br><span class="line"></span><br><span class="line">        refreshLayout.autoRefresh();&#x2F;&#x2F;自动刷新</span><br><span class="line">        refreshLayout.autoLoadMore();&#x2F;&#x2F;自动加载</span><br><span class="line">        refreshLayout.autoRefreshAnimationOnly();&#x2F;&#x2F;自动刷新，只显示动画不执行刷新</span><br><span class="line">        refreshLayout.autoLoadMoreAnimationOnly();&#x2F;&#x2F;自动加载，只显示动画不执行加载</span><br><span class="line">        refreshLayout.autoRefresh(400);&#x2F;&#x2F;延迟400毫秒后自动刷新</span><br><span class="line">        refreshLayout.autoLoadMore(400);&#x2F;&#x2F;延迟400毫秒后自动加载</span><br><span class="line">        refreshLayout.finishRefresh();&#x2F;&#x2F;结束刷新</span><br><span class="line">        refreshLayout.finishLoadMore();&#x2F;&#x2F;结束加载</span><br><span class="line">        refreshLayout.finishRefresh(3000);&#x2F;&#x2F;延迟3000毫秒后结束刷新</span><br><span class="line">        refreshLayout.finishLoadMore(3000);&#x2F;&#x2F;延迟3000毫秒后结束加载</span><br><span class="line">        refreshLayout.finishRefresh(false);&#x2F;&#x2F;结束刷新（刷新失败）</span><br><span class="line">        refreshLayout.finishLoadMore(false);&#x2F;&#x2F;结束加载（加载失败）</span><br><span class="line">        refreshLayout.finishLoadMoreWithNoMoreData();&#x2F;&#x2F;完成加载并标记没有更多数据 1.0.4</span><br><span class="line">        refreshLayout.closeHeaderOrFooter();&#x2F;&#x2F;关闭正在打开状态的 Header 或者 Footer（1.1.0）</span><br><span class="line">        refreshLayout.resetNoMoreData();&#x2F;&#x2F;恢复没有更多数据的原始状态 1.0.4（1.1.0删除）</span><br><span class="line">        refreshLayout.setNoMoreData(false);&#x2F;&#x2F;恢复没有更多数据的原始状态 1.0.5</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>依赖注入</title>
    <link href="/2020/09/21/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <url>/2020/09/21/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h6 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h6><p>依赖注入是实现程序解耦的一种方式。如果通过百度搜索可以找到如下答案：<br>控制反转（Inversion of Control，英文缩写为IoC）是一个重要的面向对象编程的法则来削减计算机程序的耦合问题.控制反转一般分为两种类型，依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）。依赖注入应用比较广泛。</p><h6 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a>个人理解：</h6><p>在程序中，一个对象中的方法需要依赖另一个对象，该对象中保存其所依赖对象的实例，生成依赖对象的方式不再该对象中通过new创建，而是调用者外部创建依赖对象，通过一定的方式进行传入。</p><h6 id="依赖注入的三种实现方式（原生方式）："><a href="#依赖注入的三种实现方式（原生方式）：" class="headerlink" title="依赖注入的三种实现方式（原生方式）："></a>依赖注入的三种实现方式（原生方式）：</h6><ol><li>构造方法注入 该方式是通过构造方法将其所依赖的外部类对象传入进来，是我认为的最简单的方式。其实现方式如下，我们修改之前的代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Classes &#123;</span><br><span class="line">&#x2F;&#x2F; 依赖类</span><br><span class="line">private Boy boy;</span><br><span class="line">&#x2F;**</span><br><span class="line">* 构造方法注入，通过构造方法传入该对象</span><br><span class="line">* @param boy</span><br><span class="line">*&#x2F;</span><br><span class="line">public Classes(Boy boy) &#123;</span><br><span class="line">this.boy &#x3D; boy;</span><br><span class="line">&#125;</span><br><span class="line">public void run() &#123;</span><br><span class="line">boy.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Setter 注入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> public class Classes &#123;</span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line">private Boy boy;</span><br><span class="line"></span><br><span class="line">public void setBoy(Boy boy)&#123;</span><br><span class="line">    this.boy &#x3D; boy;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口方式 接口方式是定义一个接口，该接口中声明一个注入的方法，而需要注入的类实现该接口，实现接口中定义的方法。定义接口，声明注入方法:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface BoyInjection &#123;</span><br><span class="line">void inject(Boy boy); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Classes implements BoyInjection &#123;</span><br><span class="line"> &#x2F;&#x2F;.... private Boy boy; </span><br><span class="line">@Override public void inject(Boy boy) &#123; </span><br><span class="line">&#x2F;&#x2F;实现接口中的方法 this.boy &#x3D; boy; </span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;....</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="Android-Dagger2依赖注入"><a href="#Android-Dagger2依赖注入" class="headerlink" title="Android Dagger2依赖注入:"></a>Android Dagger2依赖注入:</h6><ul><li>引入依赖库:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile &#39;com.google.dagger:dagger:2.11&#39;</span><br><span class="line"> annotationProcessor &#39;com.google.dagger:dagger-compiler:2.11&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>版本号以官网为准：<a href="https://github.com/google/dagger">https://github.com/google/dagger</a> </p><ul><li>创建一个对象:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.print(&quot;吃饭了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Moudule：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一步 添加@Module 注解</span><br><span class="line">@Module</span><br><span class="line">public class MainModule &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建具体的示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一步 添加@Module 注解</span><br><span class="line">@Module</span><br><span class="line">public class MainModule &#123;</span><br><span class="line">    &#x2F;&#x2F;第二步 使用Provider 注解 实例化对象</span><br><span class="line">    @Provides</span><br><span class="line">    A providerA() &#123;   &#x2F;&#x2F; providerA只是个名称</span><br><span class="line">        return new A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个Component:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一步 添加@Component</span><br><span class="line">&#x2F;&#x2F;第二步 添加module</span><br><span class="line">@Component(modules &#x3D; &#123;MainModule.class&#125;)  &#x2F;&#x2F;与刚刚创建的Moudule连接起来</span><br><span class="line">public interface MainComponent &#123;</span><br><span class="line">    &#x2F;&#x2F;第三步  写一个方法 绑定Activity &#x2F;Fragment</span><br><span class="line">    void inject(MainActivity activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>之后Rebuild Project一下，Make Project也行，之后系统会自动创建几个类，用来与activity连接。(这一步操作可能会要等待很长一段时间，10分钟左右)</p></blockquote><ul><li>将Component与Activity/Fragment绑定关系:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    &#x2F;***</span><br><span class="line">     * 第二步  使用Inject 注解，获取到A 对象的实例</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Inject  &#x2F;&#x2F;记得在需要的参数前加@Inject</span><br><span class="line">A a;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        &#x2F;***</span><br><span class="line">         * 第一步 添加依赖关系</span><br><span class="line">         *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;第一种方式与Activity&#x2F;Fragment进行绑定</span><br><span class="line">        DaggerMainConponent.create().inject(this);</span><br><span class="line">        &#x2F;&#x2F;第二种方式与Activity&#x2F;Fragment进行绑定</span><br><span class="line">        DaggerMainConponent.builder().build().inject(this);</span><br><span class="line">        &#x2F;***</span><br><span class="line">         * 第三步  调用A 对象的方法</span><br><span class="line">         *&#x2F;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以了，接下来介绍Dagger2的单例模式.</p><h6 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式:"></a>单例模式:</h6><p>@Singleton 这个注释可以使Dagger进入单例模式，要在Moudule和Component的上方添加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class ActivityModule &#123;</span><br><span class="line">    @Singleton</span><br><span class="line">    @Provides</span><br><span class="line">    Student privadeStu()&#123;</span><br><span class="line">        return new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Singleton</span><br><span class="line">@Component(modules &#x3D; &#123;ActivityModule.class&#125;)</span><br><span class="line">public interface ActivityComponent &#123;</span><br><span class="line">    void inject(MainActivity mainActivity);</span><br><span class="line">    void inject(UserActivity userActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加@Singleton就变成单例了，在MainActivity里 声明两个Student不同名字的对象分别打印他的地址，你会发现地址是一样的<br>但是你再新建立一个Activity 再次声明 Student stu ，注入对象，你会发现这时候 地址就不一样了。因为持有的对象是Activity。<br>到此已经能在一个Activity里，声明两个对象变量，用@Inject注入，得到的是 同一个对象</p><h6 id="Singleton的分析"><a href="#Singleton的分析" class="headerlink" title="@Singleton的分析:"></a>@Singleton的分析:</h6><p>接下来我要推翻刚才说的@Singleton，看到英文Singleton 是单例的意思，在Dagger2里他就是个命名的一个注解而已<br>他叫什么名字都行 @ABC、@ABB、@ABCC，都行。点开Singleton（ctrl+B）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scope   &#x2F;&#x2F;作用域的注释，代表着被包括的都是在一个作用域之中</span><br><span class="line">@Documented</span><br><span class="line">@Retention(RUNTIME)</span><br><span class="line">public @interface Singleton &#123;&#125;</span><br></pre></td></tr></table></figure><p>Singleton 用了@Scope（作用域） 标记。 也就是说被 @Scope包裹的Component 都是在一个作用域里的， 作用域！不叫单例<br>好 那直接用Scope包裹Component。编译器提示 直接Remove了这个注解。因为他的目标是 @Target(ANNOTATION_TYPE) 这个表示这个Scope只用于注解，不能用在 类上面</p><h6 id="那我们声明一个注解："><a href="#那我们声明一个注解：" class="headerlink" title="那我们声明一个注解："></a>那我们声明一个注解：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scope</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface ActivityScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们把刚才加@Singleton的地方全换成@ActivityScope</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class ActivityModule &#123;</span><br><span class="line">    @ActivityScope</span><br><span class="line">    @Provides</span><br><span class="line">    Student privadeStu()&#123;</span><br><span class="line">        return new Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ActivityScope</span><br><span class="line">@Component(modules &#x3D; &#123;ActivityModule.class&#125;)</span><br><span class="line">public interface ActivityComponent &#123;</span><br><span class="line">    void inject(MainActivity mainActivity);</span><br><span class="line">    void inject(UserActivity userActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印两个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag: com.mydagger.bean.Student@96575e0</span><br><span class="line">tag: com.mydagger.bean.Student@96575e0</span><br></pre></td></tr></table></figure><p>刚才说了持有对象的是Activity，那只能在一个Activity中实现单例，那要全局单例怎么做呢？<br>通常要全局使用的对象，要么写个static的类，要么Application。我们直接Application</p><ul><li><p>全局单例:</p><ol><li><p>先定义个全局的注解，刚讲了名字无所谓(这里要创建第二个的注解是因为，一个注解只能作用到一个作用域，简单来说就是不能与等下要创建的的另一个Component的注解相同)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> @Scope  &#x2F;&#x2F;作用域的意思</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface AppScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ActivityScope</span><br><span class="line">&#x2F;&#x2F;先绑定自身的Module，在绑定要依赖的Component</span><br><span class="line">@Component(modules &#x3D; &#123;ActivityModule.class&#125;,dependencies &#x3D; AppComponent.class)</span><br><span class="line">public interface ActivityComponent &#123;</span><br><span class="line">    &#x2F;&#x2F;第一个activity的绑定方法（XXXActivity就是填写你自己的activity的名字）</span><br><span class="line">void inject(XXXActivity testActivity);</span><br><span class="line">&#x2F;&#x2F;第二个activity的绑定方法</span><br><span class="line">    void inject(XXXActivity testActivity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里增加了一个 dependencies（依赖），当前是ActivityComponent 依赖 AppComponent<br>新建一个 AppComponent, 连接一个Module，提供一个方法 提供 给 MainActivity @Inject使用<br>还有就是dependencies只是依赖与另一个Component，每个Component都必须要有一个不同的Modules（Modules中的bean类不能重复）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注意这里的注解与上面注解不同（尽管效果是一样的，但也不能一样）</span><br><span class="line">@AppScope</span><br><span class="line">@Component(modules &#x3D; &#123;AppModule.class&#125;)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">&#x2F;&#x2F;这里要重新创建一个School类(这里写的方法要与Module中的类一致，否则就会报错)</span><br><span class="line">    School getSchool();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>新建 AppModule, 提供一个方法 用AppScope和Provides标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class AppModule &#123;</span><br><span class="line">&#x2F;&#x2F;这里的注解要与Component相同</span><br><span class="line">    @AppScope</span><br><span class="line">    @Provides</span><br><span class="line">    School provideSchool()&#123;   &#x2F;&#x2F;也是返回与上一个Module不一样的Bean类</span><br><span class="line">        return  new School();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续点绿锤子编译修改Application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个自身的单例类</span><br><span class="line">public static Application app;</span><br><span class="line">&#x2F;&#x2F;在创建一个Component类</span><br><span class="line">AppComponent applicationComponent;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">super.onCreate();</span><br><span class="line">&#x2F;&#x2F;获取自身的实例</span><br><span class="line">app &#x3D; this;</span><br><span class="line">&#x2F;&#x2F;在onCreate中进行获取Component</span><br><span class="line">    applicationComponent &#x3D; DaggerAppComponent</span><br><span class="line">            .builder()</span><br><span class="line">&#x2F;&#x2F;每次调用系统创建的Component类进行绑定的时候都要绑定属于自己的Module类</span><br><span class="line">            .appModule(new AppModule())</span><br><span class="line">            .build();</span><br><span class="line">&#x2F;&#x2F;因为这个Component是给上一个Component（MainComponent）进行依赖的，也就是扩展，所以没有写绑定的方法&#125;</span><br><span class="line"></span><br><span class="line">public static Application getInstance()&#123;</span><br><span class="line">&#x2F;&#x2F;返回自身的实列</span><br><span class="line">    return app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里返回一个Application的实例对象。定一个AppComponent（这个是准备给DaggerActivityComponent依赖的）也是Dagger生成的代码。链式编程进行build<br>增加一个School类 和Student类一样 用@Inject修饰构造函数。<br>修改MainActivity，增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Inject</span><br><span class="line">School school;</span><br></pre></td></tr></table></figure><p>然后在onCreate后面增加（与activity和Fragmemt进行绑定）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DaggerActivityComponent.builder()</span><br><span class="line">&#x2F;&#x2F;绑定依赖Component（通过Application获取早就创建好的Component）</span><br><span class="line">.appComponent(Application.getInstance().applicationComponent)</span><br><span class="line">&#x2F;&#x2F;绑定自身的Module</span><br><span class="line">    .activityModule(new ActivityModule())</span><br><span class="line">.build()</span><br><span class="line">&#x2F;&#x2F;绑定Activity</span><br><span class="line">    .inject(this);</span><br></pre></td></tr></table></figure><p>第二行DaggerActivityComponent 依赖于 Application的 AppComponent 这样就进行了关联<br>到此 全局单例 搞定，测试一下 写两个Activity 声明相同的对象就会发现 两个对象地址 一样的（创建的第二个activity/Fragment中也要进行Component绑定）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag: com.mydagger.bean.School@393c7e3</span><br><span class="line">tag: com.mydagger.bean.School@393c7e3</span><br></pre></td></tr></table></figure><ul><li>扩展:<br>通常会项目中使用MVP 增加网络配置等 需要全局单例的内容，可以继续建类（Module）进行扩展,得到单例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@AppScope</span><br><span class="line">@Component(modules &#x3D; &#123;AppModule.class,BModule.class....&#125;)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">    School getSchool();</span><br><span class="line">    &#x2F;&#x2F;这里需要继续提供方法，给Activity 进行对象的 @Inject    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applicationComponent &#x3D; DaggerAppComponent</span><br><span class="line">        .builder()</span><br><span class="line">        .appModule(new AppModule())......</span><br><span class="line">        .build();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Context</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoordinatorLayout的使用</title>
    <link href="/2020/09/21/CoordinatorLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/21/CoordinatorLayout%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CoordinatorLayout的使用"><a href="#CoordinatorLayout的使用" class="headerlink" title="CoordinatorLayout的使用"></a>CoordinatorLayout的使用</h1><h4 id="本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果"><a href="#本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果" class="headerlink" title="本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果"></a>本篇是讲解CoordinatorLayout的使用，主要目的是用来替代NestedScrollView，使用CoordinatorLayout来达到NestedScrollView嵌套滑动的效果</h4><h6 id="讲解为什么要使用CoordinatorLayout："><a href="#讲解为什么要使用CoordinatorLayout：" class="headerlink" title="讲解为什么要使用CoordinatorLayout："></a>讲解为什么要使用CoordinatorLayout：</h6><ul><li>NestedScrollView角度:<ol><li>首先一般想要嵌套滑动的地方都是嵌套RecyclerView来进行屏幕滑动，但是使用NestedScrollView嵌套RecyclerView会造成当进入页面的时候，RecyclerView会一次性全部展开。RecyclerView会失去复用性。在一些RecyclerView条目数量不多的时候，并不会造成多大的印象，但失去复用性会到时候RecyclerView滑出屏幕外无法被回收，数量一旦过多就会造成性能问题。</li></ol></li><li>CoordinatorLayout角度：<ol><li>使用CoordinatorLayout嵌套RecyclerView也可以达到跟随屏幕一起滑动的效果，并不会造成什么性能问题，并不会丢失特性。</li></ol></li></ul><h6 id="讲解如何使用CoordinatorLayout嵌套RecyclerView："><a href="#讲解如何使用CoordinatorLayout嵌套RecyclerView：" class="headerlink" title="讲解如何使用CoordinatorLayout嵌套RecyclerView："></a>讲解如何使用CoordinatorLayout嵌套RecyclerView：</h6><p>首先CoordinatorLayout是要与AppBarLayout一起使用才能做出许多效果。</p><ul><li><p>AppBarLayout：<br>  1.AppBarLayout用来规划需要要滑出屏幕的控件，被AppBarLayout包裹的控件需要添加（layout_scrollFlags=”scroll”）的属性</p><blockquote><p>layout_scrollFlags=”scroll”：当它滚动的时候，AppBarLayout会回调触发内部设置了layout_scrollFlags=””的控件的滚动行为。<br>scroll：跟随屏幕一起滑动<br>enterAlways：使用enterAlways，必须要带上scroll,否则没有效果，同样使用后面哪一个都要有scroll;使用要两个一块使用,enterAlways决定向下滚动时Scrolling View和Child View之间的滚动优先级问题。<br>enterAlwaysCollapsed：这里涉及到Child View的高度和最小高度，向下滚动时，<br>Child View先向下滚动最小高度值，然后Scrolling View开始滚动，到达边界时，Child View再向下滚动，直至显示完全。</p></blockquote></li><li><p>代码使用：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;appbar&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            app:elevation&#x3D;&quot;0dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.youth.banner.Banner</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Re_banner&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;200dp&quot;</span><br><span class="line">                android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                app:banner_indicator_gravity&#x3D;&quot;right&quot;</span><br><span class="line">                app:banner_indicator_marginBottom&#x3D;&quot;@dimen&#x2F;dp_7&quot;</span><br><span class="line">                app:banner_indicator_marginRight&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                app:banner_indicator_normal_color&#x3D;&quot;@color&#x2F;White&quot;</span><br><span class="line">                app:banner_indicator_selected_color&#x3D;&quot;@color&#x2F;Pink&quot;</span><br><span class="line">                app:layout_scrollFlags&#x3D;&quot;scroll&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;Re_recy&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">            android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">            android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">            app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p> 这里就是是哟CoordinatorLayou嵌套RecyclerView，将头部的Banner设置layout_scrollFlags=”scroll”，它将会跟随屏幕一起滑动，滑出屏幕外，而RecyclerView设置的layout_behavior=”@string/appbar_scrolling_view_behavior”将会把View设置在AppBarLayout的下方，并且不会随着屏幕的滑动而滑出屏幕之外。</p></li></ul><h6 id="CoordinatorLayou吸附效果："><a href="#CoordinatorLayou吸附效果：" class="headerlink" title="CoordinatorLayou吸附效果："></a>CoordinatorLayou吸附效果：</h6><ul><li><p>CollapsingToolbarLayout</p><ol><li><p>吸附效果是需要CoordinatorLayout与CollapsingToolbarLayout一同使用，并且CollapsingToolbarLayout设置layout_scrollFlags=”scroll|snap”，代表被CollapsingToolbarLayout包裹的内容是需要吸附到屏幕顶部的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;TV_nestSc&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;#FFFFFF&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.google.android.material.appbar.AppBarLayout</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;appbar&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            app:elevation&#x3D;&quot;0dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;com.google.android.material.appbar.CollapsingToolbarLayout</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;coll_layout&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                android:fitsSystemWindows&#x3D;&quot;true&quot;</span><br><span class="line">                app:layout_scrollFlags&#x3D;&quot;scroll|snap&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;RelativeLayout</span><br><span class="line">                    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;LinearLayout</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;Sy_text&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_35&quot;</span><br><span class="line">                        android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                        android:layout_marginRight&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">                        android:background&#x3D;&quot;@drawable&#x2F;file_background_radius_30_while_gray&quot;</span><br><span class="line">                        android:gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">                        android:orientation&#x3D;&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;ImageView</span><br><span class="line">                            android:layout_width&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                            android:layout_height&#x3D;&quot;@dimen&#x2F;dp_24&quot;</span><br><span class="line">                            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_15&quot;</span><br><span class="line">                            android:src&#x3D;&quot;@drawable&#x2F;search_24_while&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;TextView</span><br><span class="line">                            android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">                            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                            android:layout_marginLeft&#x3D;&quot;@dimen&#x2F;dp_5&quot;</span><br><span class="line">                            android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">                            android:text&#x3D;&quot;查找精彩动态内容&quot;</span><br><span class="line">                            android:textColor&#x3D;&quot;#c1bfc0&quot;</span><br><span class="line">                            android:textSize&#x3D;&quot;16sp&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;TextView</span><br><span class="line">                        android:id&#x3D;&quot;@+id&#x2F;xian_2&quot;</span><br><span class="line">                        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                        android:layout_height&#x3D;&quot;@dimen&#x2F;dp_1&quot;</span><br><span class="line">                        android:layout_below&#x3D;&quot;@+id&#x2F;Sy_text&quot;</span><br><span class="line">                        android:layout_marginTop&#x3D;&quot;@dimen&#x2F;dp_10&quot;</span><br><span class="line">                        android:background&#x3D;&quot;#e7e7e7&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;&#x2F;RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;com.google.android.material.appbar.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;com.google.android.material.appbar.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:animateLayoutChanges&#x3D;&quot;true&quot;</span><br><span class="line">            android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">            app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;Recy_dynamic&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">                android:background&#x3D;&quot;#f4f4f4&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>吸附效果就是在滑动屏幕的时候，被CollapsingToolbarLayout包裹的内容在接近屏幕顶端的时候会有个吸附效果，之后就会一直吸在屏幕顶端，除非下滑脱离。</p></li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>View</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVP 设计模式</title>
    <link href="/2020/09/18/MVP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/09/18/MVP-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="MVP-设计模式"><a href="#MVP-设计模式" class="headerlink" title="MVP 设计模式"></a>MVP 设计模式</h3><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>MVP是有MVC演变而来的，因为在Android中用MVC来写的时候，Activity到底是View层还是Controller层真的是傻傻分不去清楚，所以基本它就把这两层的活都自己一个人干了，这样一来Activity上的代码量会非常大，Controller层和View层没有实现解耦分离开来，如果后面这两层代码其中一层出了问题你就可能两层都的修改，代码是没什么重用性可言的。而MVP的出现就是为了解决这些问题的，MVP模式将Controller的工作抽取出来交给Presenter层，Presenter层负责控制处理业务逻辑，作为中间层建立起Model层和View层的联系，从而实现三层交互。这么说确实挺难让人理解的，下面就通过一个例子，在例子中夹杂着解释让我们掌握MVP的用法吧。</p><h5 id="属性：（我就拿登录来当作例子）"><a href="#属性：（我就拿登录来当作例子）" class="headerlink" title="属性：（我就拿登录来当作例子）"></a>属性：（我就拿登录来当作例子）</h5><ul><li>Model层：创建用于保存用户信息的实体类User（就是userbean）登录的时候用来保存用户信息，建议也保存到本地一份</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String username;  &#x2F;&#x2F;用户的账号</span><br><span class="line">    private String password;  &#x2F;&#x2F;用户的密码</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>结果回调接口：</p><ol><li>创建一个接口，用来通知登录是否成功（成功的话，就可以把获取到的userbean传递下去）或者 失败</li><li>代码展示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    public interface OnLoginListener &#123;</span><br><span class="line">    &#x2F;&#x2F;登录成功的回调</span><br><span class="line">    void loginSuccess(User user);  &#x2F;&#x2F;登录成功后，将用户信息传递进去</span><br><span class="line">    &#x2F;&#x2F;登录失败的回调</span><br><span class="line">    void loginFailed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>定义业务接口:</p><ol><li>这里抽出一个接口的目的是为了降低一层耦合和便于复用。比如同一个网络请求业务你可以有OkHttp的实现，同时也可以有Retrofit的实现，这样一来就可以方便的做到网络框架的替换，当然你还可以有不同内容的实现。简单来说，就是将登录的这个功能抽取出来，成为一个接口，方便复用。</li><li>代码展示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    public interface UserLogin&#123;</span><br><span class="line">    &#x2F;&#x2F;登录方法</span><br><span class="line">public void login(String username, String password, OnLoginListener loginListener);</span><br><span class="line">&#x2F;&#x2F;这里就传入用户输入的账号，密码，在传入一个登录状况判断的接口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>具体Model的实现类:<br><br>创建一个具体的类，来实现UserLogin的接口，来实现里面的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class UserGo implements UserLogin &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void login(final String username, final String password, final OnLoginListener loginListener) &#123;</span><br><span class="line">        &#x2F;&#x2F;模拟网络请求耗时操作</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                &#x2F;&#x2F;模拟了耗时                </span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(2000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;模拟登录成功</span><br><span class="line">                if (&quot;luoqiang&quot;.equals(username) &amp;&amp; &quot;108&quot;.equals(password)) &#123;</span><br><span class="line">                    User user &#x3D; new User();</span><br><span class="line">                    user.setUsername(username);</span><br><span class="line">                    user.setPassword(password);</span><br><span class="line">                    loginListener.loginSuccess(user);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    loginListener.loginFailed();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>View层:</p><ol><li><p>View层不关心数据，不关心逻辑处理！只关心和用户的交互，那么这个登录界面应该有的操作就是：从输入框获取用户名，获取密码，清除用户名，清除密码，登录网络请求时显示进度条，隐藏进度条，登录成功跳转到对应界面，登录失败提示。接下来定义接口如下：</p><blockquote><p>这里并没有将activity来直接当作View层，原因也是为了方便复用，那个Fragment/Activity需要用到登录，就实现这个接口就行了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    public interface UserLoginView &#123;</span><br><span class="line">        String getUserName();</span><br><span class="line">        &#x2F;&#x2F;获取用户输入的账号</span><br><span class="line">        String getPassword();</span><br><span class="line">        &#x2F;&#x2F;获取用户输入的密码</span><br><span class="line">        void clearUserName();</span><br><span class="line">        &#x2F;&#x2F;清除用户输入的账号</span><br><span class="line">        void clearPassword();</span><br><span class="line">        &#x2F;&#x2F;清除用户输入的密码</span><br><span class="line">        void showLoading();</span><br><span class="line">        &#x2F;&#x2F;显示加载（一般来说，我都会在BaseActivity&#x2F;BaseFragment中实现Loading的显示和隐藏，这里就没必要在写）</span><br><span class="line">        void hideLoading();</span><br><span class="line">        &#x2F;&#x2F;隐藏加载</span><br><span class="line">        void toMainActivity(User user);</span><br><span class="line">        &#x2F;&#x2F;跳转到主页，顺便传递用户信息</span><br><span class="line">        void showFaileTips();</span><br><span class="line">        &#x2F;&#x2F;登录失败的提示</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>具体的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">    public class UserLoginActivity extends AppCompatActivity implements UserLoginView &#123;</span><br><span class="line">    private EditText mEtUsername, mEtPassword;</span><br><span class="line">    private Button mBtnLogin, mBtnClear;</span><br><span class="line">    private ProgressBar mPbLoading;</span><br><span class="line">    private UserLoginPresenter mUserLoginPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">&#x2F;&#x2F;关于Presenter层，都可以写在BaseActivtiy&#x2F;BaseFragment中，没必要写在Activity中</span><br><span class="line">        mUserLoginPresenter &#x3D; new UserLoginPresenter(this);</span><br><span class="line">        &#x2F;&#x2F;获取Presenter层</span><br><span class="line">        initViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initViews() &#123;</span><br><span class="line">        mEtUsername &#x3D; findViewById(R.id.et_username);</span><br><span class="line">        mEtPassword &#x3D; findViewById(R.id.et_password);</span><br><span class="line">        mBtnClear &#x3D; findViewById(R.id.btn_clear);</span><br><span class="line">        mBtnLogin &#x3D; findViewById(R.id.btn_login);</span><br><span class="line">        mPbLoading &#x3D; findViewById(R.id.pb_loading);</span><br><span class="line">        mBtnLogin.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                mUserLoginPresenter.login();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mBtnClear.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                mUserLoginPresenter.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return mEtUsername.getText().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return mEtPassword.getText().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clearUserName() &#123;</span><br><span class="line">        mEtUsername.setText(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clearPassword() &#123;</span><br><span class="line">        mEtPassword.setText(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showLoading() &#123;</span><br><span class="line">        mPbLoading.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void hideLoading() &#123;</span><br><span class="line">        mPbLoading.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toMainActivity(User user) &#123;</span><br><span class="line">        Toast.makeText(this, &quot;跳转到登录成功页面&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showFaileTips() &#123;</span><br><span class="line">        Toast.makeText(this, &quot;登录失败&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        &#x2F;&#x2F;为了防止内存泄漏，解绑Presenter层对View层的引用，这里的将Presenter层置为空可以在BaseActivity&#x2F;BaseFragment中进行操作</span><br><span class="line">        mUserLoginPresenter.detachView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Presenter层:</p><ol><li>Presenter的作用就是从View层获取用户的输入，传递到Model层进行处理，然后回调给View层，输出给用户！</li><li>Presenter一般来说，就是将View和Mode集合在一起，进行操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">    public class UserLoginPresenter &#123;</span><br><span class="line">    private UserGo userGo;</span><br><span class="line">    private UserLoginView userLoginView;</span><br><span class="line">    private Handler mHandler &#x3D; new Handler();</span><br><span class="line">    &#x2F;&#x2F;对应视图页面销毁的标志位,当视图销毁后回调就不需要处理了</span><br><span class="line">    private boolean destroyFlag;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Presenter必须要能拿到View和Model的实现类</span><br><span class="line">    public UserLoginPresenter(IUserLoginView userLoginView) &#123;</span><br><span class="line">        this.userLoginView &#x3D; userLoginView;</span><br><span class="line">        this. userGo &#x3D; new UserGo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login() &#123;</span><br><span class="line">        userLoginView.showLoading();</span><br><span class="line">        userGo.login(userLoginView.getUserName(), userLoginView.getPassword(), new OnLoginListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void loginSuccess(final User user) &#123;</span><br><span class="line">                if (!destroyFlag) &#123; &#x2F;&#x2F;View层销毁后不需要处理的判断</span><br><span class="line">                    &#x2F;&#x2F;需要在UI线程执行</span><br><span class="line">                    mHandler.post(new Runnable() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                            userLoginView.toMainActivity(user);</span><br><span class="line">                            userLoginView.hideLoading();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void loginFailed() &#123;</span><br><span class="line">                if (!destroyFlag) &#123; &#x2F;&#x2F;View层销毁后不需要处理的判断</span><br><span class="line">                    &#x2F;&#x2F;需要在UI线程执行</span><br><span class="line">                    mHandler.post(new Runnable() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public void run() &#123;</span><br><span class="line">                            userLoginView.showFaileTips();</span><br><span class="line">                            userLoginView.hideLoading();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        userLoginView.clearUserName();</span><br><span class="line">        userLoginView.clearPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;解绑视图</span><br><span class="line">    public void detachView() &#123;</span><br><span class="line">        destroyFlag &#x3D; true;</span><br><span class="line">        this.userLoginView &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>MVP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
